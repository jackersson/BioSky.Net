// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace BioService {
  public static class BiometricFacialSevice
  {
    static readonly string __ServiceName = "BioService.BiometricFacialSevice";

    static readonly Marshaller<global::BioService.SocketConfiguration> __Marshaller_SocketConfiguration = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.SocketConfiguration.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Response.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Photo> __Marshaller_Photo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Photo.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.PortraitCharacteristic> __Marshaller_PortraitCharacteristic = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.PortraitCharacteristic.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.EnrollmentData> __Marshaller_EnrollmentData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.EnrollmentFeedback> __Marshaller_EnrollmentFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentFeedback.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationData> __Marshaller_VerificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationFeedback> __Marshaller_VerificationFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationFeedback.Parser.ParseFrom);

    static readonly Method<global::BioService.SocketConfiguration, global::BioService.Response> __Method_AddSocket = new Method<global::BioService.SocketConfiguration, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "AddSocket",
        __Marshaller_SocketConfiguration,
        __Marshaller_Response);

    static readonly Method<global::BioService.Photo, global::BioService.PortraitCharacteristic> __Method_DetectFace = new Method<global::BioService.Photo, global::BioService.PortraitCharacteristic>(
        MethodType.Unary,
        __ServiceName,
        "DetectFace",
        __Marshaller_Photo,
        __Marshaller_PortraitCharacteristic);

    static readonly Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback> __Method_EnrollFace = new Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "EnrollFace",
        __Marshaller_EnrollmentData,
        __Marshaller_EnrollmentFeedback);

    static readonly Method<global::BioService.VerificationData, global::BioService.VerificationFeedback> __Method_VerifyFace = new Method<global::BioService.VerificationData, global::BioService.VerificationFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "VerifyFace",
        __Marshaller_VerificationData,
        __Marshaller_VerificationFeedback);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioService.BioService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBiometricFacialSeviceClient
    {
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options);
      global::BioService.PortraitCharacteristic DetectFace(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PortraitCharacteristic DetectFace(global::BioService.Photo request, CallOptions options);
      AsyncUnaryCall<global::BioService.PortraitCharacteristic> DetectFaceAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PortraitCharacteristic> DetectFaceAsync(global::BioService.Photo request, CallOptions options);
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, CallOptions options);
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, CallOptions options);
    }

    // server-side interface
    public interface IBiometricFacialSevice
    {
      Task<global::BioService.Response> AddSocket(global::BioService.SocketConfiguration request, ServerCallContext context);
      Task<global::BioService.PortraitCharacteristic> DetectFace(global::BioService.Photo request, ServerCallContext context);
      Task EnrollFace(global::BioService.EnrollmentData request, IServerStreamWriter<global::BioService.EnrollmentFeedback> responseStream, ServerCallContext context);
      Task VerifyFace(global::BioService.VerificationData request, IServerStreamWriter<global::BioService.VerificationFeedback> responseStream, ServerCallContext context);
    }

    // client stub
    public class BiometricFacialSeviceClient : ClientBase, IBiometricFacialSeviceClient
    {
      public BiometricFacialSeviceClient(Channel channel) : base(channel)
      {
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.PortraitCharacteristic DetectFace(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DetectFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PortraitCharacteristic DetectFace(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_DetectFace, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PortraitCharacteristic> DetectFaceAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DetectFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PortraitCharacteristic> DetectFaceAsync(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_DetectFace, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_EnrollFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, CallOptions options)
      {
        var call = CreateCall(__Method_EnrollFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VerifyFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, CallOptions options)
      {
        var call = CreateCall(__Method_VerifyFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBiometricFacialSevice serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddSocket, serviceImpl.AddSocket)
          .AddMethod(__Method_DetectFace, serviceImpl.DetectFace)
          .AddMethod(__Method_EnrollFace, serviceImpl.EnrollFace)
          .AddMethod(__Method_VerifyFace, serviceImpl.VerifyFace).Build();
    }

    // creates a new client
    public static BiometricFacialSeviceClient NewClient(Channel channel)
    {
      return new BiometricFacialSeviceClient(channel);
    }

  }
  public static class BiometricFingerprintSevice
  {
    static readonly string __ServiceName = "BioService.BiometricFingerprintSevice";

    static readonly Marshaller<global::BioService.EnrollmentData> __Marshaller_EnrollmentData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.EnrollmentFeedback> __Marshaller_EnrollmentFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentFeedback.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationData> __Marshaller_VerificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationFeedback> __Marshaller_VerificationFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationFeedback.Parser.ParseFrom);

    static readonly Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback> __Method_EnrollFingerprint = new Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "EnrollFingerprint",
        __Marshaller_EnrollmentData,
        __Marshaller_EnrollmentFeedback);

    static readonly Method<global::BioService.VerificationData, global::BioService.VerificationFeedback> __Method_VerifyFingerprint = new Method<global::BioService.VerificationData, global::BioService.VerificationFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "VerifyFingerprint",
        __Marshaller_VerificationData,
        __Marshaller_VerificationFeedback);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioService.BioService.Descriptor.Services[1]; }
    }

    // client interface
    public interface IBiometricFingerprintSeviceClient
    {
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFingerprint(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFingerprint(global::BioService.EnrollmentData request, CallOptions options);
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFingerprint(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFingerprint(global::BioService.VerificationData request, CallOptions options);
    }

    // server-side interface
    public interface IBiometricFingerprintSevice
    {
      Task EnrollFingerprint(global::BioService.EnrollmentData request, IServerStreamWriter<global::BioService.EnrollmentFeedback> responseStream, ServerCallContext context);
      Task VerifyFingerprint(global::BioService.VerificationData request, IServerStreamWriter<global::BioService.VerificationFeedback> responseStream, ServerCallContext context);
    }

    // client stub
    public class BiometricFingerprintSeviceClient : ClientBase, IBiometricFingerprintSeviceClient
    {
      public BiometricFingerprintSeviceClient(Channel channel) : base(channel)
      {
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFingerprint(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_EnrollFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFingerprint(global::BioService.EnrollmentData request, CallOptions options)
      {
        var call = CreateCall(__Method_EnrollFingerprint, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFingerprint(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VerifyFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFingerprint(global::BioService.VerificationData request, CallOptions options)
      {
        var call = CreateCall(__Method_VerifyFingerprint, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBiometricFingerprintSevice serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_EnrollFingerprint, serviceImpl.EnrollFingerprint)
          .AddMethod(__Method_VerifyFingerprint, serviceImpl.VerifyFingerprint).Build();
    }

    // creates a new client
    public static BiometricFingerprintSeviceClient NewClient(Channel channel)
    {
      return new BiometricFingerprintSeviceClient(channel);
    }

  }
  public static class BiometricDatabaseSevice
  {
    static readonly string __ServiceName = "BioService.BiometricDatabaseSevice";

    static readonly Marshaller<global::BioService.QueryPersons> __Marshaller_QueryPersons = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.QueryPersons.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.PersonList> __Marshaller_PersonList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.PersonList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Person> __Marshaller_Person = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Person.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Photo> __Marshaller_Photo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Photo.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Response.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Card> __Marshaller_Card = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Card.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.CardList> __Marshaller_CardList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.CardList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.QueryPhoto> __Marshaller_QueryPhoto = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.QueryPhoto.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.PhotoList> __Marshaller_PhotoList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.PhotoList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.RawIndexes> __Marshaller_RawIndexes = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.RawIndexes.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.QueryVisitors> __Marshaller_QueryVisitors = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.QueryVisitors.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VisitorList> __Marshaller_VisitorList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VisitorList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Visitor> __Marshaller_Visitor = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Visitor.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.FullVisitorData> __Marshaller_FullVisitorData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.FullVisitorData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.QueryLocations> __Marshaller_QueryLocations = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.QueryLocations.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.LocationList> __Marshaller_LocationList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.LocationList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Location> __Marshaller_Location = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Location.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.FacialImage> __Marshaller_FacialImage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.FacialImage.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.FingerprintImage> __Marshaller_FingerprintImage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.FingerprintImage.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.BioClient> __Marshaller_BioClient = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.BioClient.Parser.ParseFrom);

    static readonly Method<global::BioService.QueryPersons, global::BioService.PersonList> __Method_PersonSelect = new Method<global::BioService.QueryPersons, global::BioService.PersonList>(
        MethodType.Unary,
        __ServiceName,
        "PersonSelect",
        __Marshaller_QueryPersons,
        __Marshaller_PersonList);

    static readonly Method<global::BioService.Person, global::BioService.Person> __Method_AddPerson = new Method<global::BioService.Person, global::BioService.Person>(
        MethodType.Unary,
        __ServiceName,
        "AddPerson",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly Method<global::BioService.Person, global::BioService.Person> __Method_UpdatePerson = new Method<global::BioService.Person, global::BioService.Person>(
        MethodType.Unary,
        __ServiceName,
        "UpdatePerson",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly Method<global::BioService.Person, global::BioService.Person> __Method_RemovePerson = new Method<global::BioService.Person, global::BioService.Person>(
        MethodType.Unary,
        __ServiceName,
        "RemovePerson",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly Method<global::BioService.Photo, global::BioService.Response> __Method_SetThumbnail = new Method<global::BioService.Photo, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "SetThumbnail",
        __Marshaller_Photo,
        __Marshaller_Response);

    static readonly Method<global::BioService.Card, global::BioService.Card> __Method_AddCard = new Method<global::BioService.Card, global::BioService.Card>(
        MethodType.Unary,
        __ServiceName,
        "AddCard",
        __Marshaller_Card,
        __Marshaller_Card);

    static readonly Method<global::BioService.CardList, global::BioService.CardList> __Method_RemoveCards = new Method<global::BioService.CardList, global::BioService.CardList>(
        MethodType.Unary,
        __ServiceName,
        "RemoveCards",
        __Marshaller_CardList,
        __Marshaller_CardList);

    static readonly Method<global::BioService.Card, global::BioService.Card> __Method_RemoveCard = new Method<global::BioService.Card, global::BioService.Card>(
        MethodType.Unary,
        __ServiceName,
        "RemoveCard",
        __Marshaller_Card,
        __Marshaller_Card);

    static readonly Method<global::BioService.QueryPhoto, global::BioService.PhotoList> __Method_SelectPhotos = new Method<global::BioService.QueryPhoto, global::BioService.PhotoList>(
        MethodType.Unary,
        __ServiceName,
        "SelectPhotos",
        __Marshaller_QueryPhoto,
        __Marshaller_PhotoList);

    static readonly Method<global::BioService.Photo, global::BioService.Photo> __Method_AddPhoto = new Method<global::BioService.Photo, global::BioService.Photo>(
        MethodType.Unary,
        __ServiceName,
        "AddPhoto",
        __Marshaller_Photo,
        __Marshaller_Photo);

    static readonly Method<global::BioService.RawIndexes, global::BioService.RawIndexes> __Method_RemovePhotos = new Method<global::BioService.RawIndexes, global::BioService.RawIndexes>(
        MethodType.Unary,
        __ServiceName,
        "RemovePhotos",
        __Marshaller_RawIndexes,
        __Marshaller_RawIndexes);

    static readonly Method<global::BioService.QueryVisitors, global::BioService.VisitorList> __Method_SelectVisitors = new Method<global::BioService.QueryVisitors, global::BioService.VisitorList>(
        MethodType.Unary,
        __ServiceName,
        "SelectVisitors",
        __Marshaller_QueryVisitors,
        __Marshaller_VisitorList);

    static readonly Method<global::BioService.Visitor, global::BioService.Response> __Method_AttachVisitorToPerson = new Method<global::BioService.Visitor, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "AttachVisitorToPerson",
        __Marshaller_Visitor,
        __Marshaller_Response);

    static readonly Method<global::BioService.RawIndexes, global::BioService.RawIndexes> __Method_RemoveVisitors = new Method<global::BioService.RawIndexes, global::BioService.RawIndexes>(
        MethodType.Unary,
        __ServiceName,
        "RemoveVisitors",
        __Marshaller_RawIndexes,
        __Marshaller_RawIndexes);

    static readonly Method<global::BioService.FullVisitorData, global::BioService.Visitor> __Method_AddVisitor = new Method<global::BioService.FullVisitorData, global::BioService.Visitor>(
        MethodType.Unary,
        __ServiceName,
        "AddVisitor",
        __Marshaller_FullVisitorData,
        __Marshaller_Visitor);

    static readonly Method<global::BioService.QueryLocations, global::BioService.LocationList> __Method_SelectLocations = new Method<global::BioService.QueryLocations, global::BioService.LocationList>(
        MethodType.Unary,
        __ServiceName,
        "SelectLocations",
        __Marshaller_QueryLocations,
        __Marshaller_LocationList);

    static readonly Method<global::BioService.Location, global::BioService.Location> __Method_AddLocation = new Method<global::BioService.Location, global::BioService.Location>(
        MethodType.Unary,
        __ServiceName,
        "AddLocation",
        __Marshaller_Location,
        __Marshaller_Location);

    static readonly Method<global::BioService.Location, global::BioService.Location> __Method_UpdateLocation = new Method<global::BioService.Location, global::BioService.Location>(
        MethodType.Unary,
        __ServiceName,
        "UpdateLocation",
        __Marshaller_Location,
        __Marshaller_Location);

    static readonly Method<global::BioService.Location, global::BioService.Location> __Method_RemoveLocation = new Method<global::BioService.Location, global::BioService.Location>(
        MethodType.Unary,
        __ServiceName,
        "RemoveLocation",
        __Marshaller_Location,
        __Marshaller_Location);

    static readonly Method<global::BioService.FacialImage, global::BioService.FacialImage> __Method_AddFace = new Method<global::BioService.FacialImage, global::BioService.FacialImage>(
        MethodType.Unary,
        __ServiceName,
        "AddFace",
        __Marshaller_FacialImage,
        __Marshaller_FacialImage);

    static readonly Method<global::BioService.FacialImage, global::BioService.FacialImage> __Method_RemoveFace = new Method<global::BioService.FacialImage, global::BioService.FacialImage>(
        MethodType.Unary,
        __ServiceName,
        "RemoveFace",
        __Marshaller_FacialImage,
        __Marshaller_FacialImage);

    static readonly Method<global::BioService.FacialImage, global::BioService.FacialImage> __Method_UpdateFace = new Method<global::BioService.FacialImage, global::BioService.FacialImage>(
        MethodType.Unary,
        __ServiceName,
        "UpdateFace",
        __Marshaller_FacialImage,
        __Marshaller_FacialImage);

    static readonly Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage> __Method_AddFingerprint = new Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage>(
        MethodType.Unary,
        __ServiceName,
        "AddFingerprint",
        __Marshaller_FingerprintImage,
        __Marshaller_FingerprintImage);

    static readonly Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage> __Method_RemoveFingerprint = new Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage>(
        MethodType.Unary,
        __ServiceName,
        "RemoveFingerprint",
        __Marshaller_FingerprintImage,
        __Marshaller_FingerprintImage);

    static readonly Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage> __Method_UpdateFingerprint = new Method<global::BioService.FingerprintImage, global::BioService.FingerprintImage>(
        MethodType.Unary,
        __ServiceName,
        "UpdateFingerprint",
        __Marshaller_FingerprintImage,
        __Marshaller_FingerprintImage);

    static readonly Method<global::BioService.BioClient, global::BioService.Response> __Method_AddClient = new Method<global::BioService.BioClient, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "AddClient",
        __Marshaller_BioClient,
        __Marshaller_Response);

    static readonly Method<global::BioService.BioClient, global::BioService.Response> __Method_RemoveClient = new Method<global::BioService.BioClient, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "RemoveClient",
        __Marshaller_BioClient,
        __Marshaller_Response);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioService.BioService.Descriptor.Services[2]; }
    }

    // client interface
    public interface IBiometricDatabaseSeviceClient
    {
      global::BioService.PersonList PersonSelect(global::BioService.QueryPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PersonList PersonSelect(global::BioService.QueryPersons request, CallOptions options);
      AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.QueryPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.QueryPersons request, CallOptions options);
      global::BioService.Person AddPerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Person AddPerson(global::BioService.Person request, CallOptions options);
      AsyncUnaryCall<global::BioService.Person> AddPersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Person> AddPersonAsync(global::BioService.Person request, CallOptions options);
      global::BioService.Person UpdatePerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Person UpdatePerson(global::BioService.Person request, CallOptions options);
      AsyncUnaryCall<global::BioService.Person> UpdatePersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Person> UpdatePersonAsync(global::BioService.Person request, CallOptions options);
      global::BioService.Person RemovePerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Person RemovePerson(global::BioService.Person request, CallOptions options);
      AsyncUnaryCall<global::BioService.Person> RemovePersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Person> RemovePersonAsync(global::BioService.Person request, CallOptions options);
      global::BioService.Response SetThumbnail(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response SetThumbnail(global::BioService.Photo request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> SetThumbnailAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> SetThumbnailAsync(global::BioService.Photo request, CallOptions options);
      global::BioService.Card AddCard(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Card AddCard(global::BioService.Card request, CallOptions options);
      AsyncUnaryCall<global::BioService.Card> AddCardAsync(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Card> AddCardAsync(global::BioService.Card request, CallOptions options);
      global::BioService.CardList RemoveCards(global::BioService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.CardList RemoveCards(global::BioService.CardList request, CallOptions options);
      AsyncUnaryCall<global::BioService.CardList> RemoveCardsAsync(global::BioService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.CardList> RemoveCardsAsync(global::BioService.CardList request, CallOptions options);
      global::BioService.Card RemoveCard(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Card RemoveCard(global::BioService.Card request, CallOptions options);
      AsyncUnaryCall<global::BioService.Card> RemoveCardAsync(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Card> RemoveCardAsync(global::BioService.Card request, CallOptions options);
      global::BioService.PhotoList SelectPhotos(global::BioService.QueryPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PhotoList SelectPhotos(global::BioService.QueryPhoto request, CallOptions options);
      AsyncUnaryCall<global::BioService.PhotoList> SelectPhotosAsync(global::BioService.QueryPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PhotoList> SelectPhotosAsync(global::BioService.QueryPhoto request, CallOptions options);
      global::BioService.Photo AddPhoto(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Photo AddPhoto(global::BioService.Photo request, CallOptions options);
      AsyncUnaryCall<global::BioService.Photo> AddPhotoAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Photo> AddPhotoAsync(global::BioService.Photo request, CallOptions options);
      global::BioService.RawIndexes RemovePhotos(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.RawIndexes RemovePhotos(global::BioService.RawIndexes request, CallOptions options);
      AsyncUnaryCall<global::BioService.RawIndexes> RemovePhotosAsync(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.RawIndexes> RemovePhotosAsync(global::BioService.RawIndexes request, CallOptions options);
      global::BioService.VisitorList SelectVisitors(global::BioService.QueryVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.VisitorList SelectVisitors(global::BioService.QueryVisitors request, CallOptions options);
      AsyncUnaryCall<global::BioService.VisitorList> SelectVisitorsAsync(global::BioService.QueryVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.VisitorList> SelectVisitorsAsync(global::BioService.QueryVisitors request, CallOptions options);
      global::BioService.Response AttachVisitorToPerson(global::BioService.Visitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response AttachVisitorToPerson(global::BioService.Visitor request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> AttachVisitorToPersonAsync(global::BioService.Visitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> AttachVisitorToPersonAsync(global::BioService.Visitor request, CallOptions options);
      global::BioService.RawIndexes RemoveVisitors(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.RawIndexes RemoveVisitors(global::BioService.RawIndexes request, CallOptions options);
      AsyncUnaryCall<global::BioService.RawIndexes> RemoveVisitorsAsync(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.RawIndexes> RemoveVisitorsAsync(global::BioService.RawIndexes request, CallOptions options);
      global::BioService.Visitor AddVisitor(global::BioService.FullVisitorData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Visitor AddVisitor(global::BioService.FullVisitorData request, CallOptions options);
      AsyncUnaryCall<global::BioService.Visitor> AddVisitorAsync(global::BioService.FullVisitorData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Visitor> AddVisitorAsync(global::BioService.FullVisitorData request, CallOptions options);
      global::BioService.LocationList SelectLocations(global::BioService.QueryLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.LocationList SelectLocations(global::BioService.QueryLocations request, CallOptions options);
      AsyncUnaryCall<global::BioService.LocationList> SelectLocationsAsync(global::BioService.QueryLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.LocationList> SelectLocationsAsync(global::BioService.QueryLocations request, CallOptions options);
      global::BioService.Location AddLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Location AddLocation(global::BioService.Location request, CallOptions options);
      AsyncUnaryCall<global::BioService.Location> AddLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Location> AddLocationAsync(global::BioService.Location request, CallOptions options);
      global::BioService.Location UpdateLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Location UpdateLocation(global::BioService.Location request, CallOptions options);
      AsyncUnaryCall<global::BioService.Location> UpdateLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Location> UpdateLocationAsync(global::BioService.Location request, CallOptions options);
      global::BioService.Location RemoveLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Location RemoveLocation(global::BioService.Location request, CallOptions options);
      AsyncUnaryCall<global::BioService.Location> RemoveLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Location> RemoveLocationAsync(global::BioService.Location request, CallOptions options);
      global::BioService.FacialImage AddFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FacialImage AddFace(global::BioService.FacialImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FacialImage> AddFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FacialImage> AddFaceAsync(global::BioService.FacialImage request, CallOptions options);
      global::BioService.FacialImage RemoveFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FacialImage RemoveFace(global::BioService.FacialImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FacialImage> RemoveFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FacialImage> RemoveFaceAsync(global::BioService.FacialImage request, CallOptions options);
      global::BioService.FacialImage UpdateFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FacialImage UpdateFace(global::BioService.FacialImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FacialImage> UpdateFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FacialImage> UpdateFaceAsync(global::BioService.FacialImage request, CallOptions options);
      global::BioService.FingerprintImage AddFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FingerprintImage AddFingerprint(global::BioService.FingerprintImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FingerprintImage> AddFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FingerprintImage> AddFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options);
      global::BioService.FingerprintImage RemoveFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FingerprintImage RemoveFingerprint(global::BioService.FingerprintImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FingerprintImage> RemoveFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FingerprintImage> RemoveFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options);
      global::BioService.FingerprintImage UpdateFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.FingerprintImage UpdateFingerprint(global::BioService.FingerprintImage request, CallOptions options);
      AsyncUnaryCall<global::BioService.FingerprintImage> UpdateFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.FingerprintImage> UpdateFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options);
      global::BioService.Response AddClient(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response AddClient(global::BioService.BioClient request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> AddClientAsync(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> AddClientAsync(global::BioService.BioClient request, CallOptions options);
      global::BioService.Response RemoveClient(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response RemoveClient(global::BioService.BioClient request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> RemoveClientAsync(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> RemoveClientAsync(global::BioService.BioClient request, CallOptions options);
    }

    // server-side interface
    public interface IBiometricDatabaseSevice
    {
      Task<global::BioService.PersonList> PersonSelect(global::BioService.QueryPersons request, ServerCallContext context);
      Task<global::BioService.Person> AddPerson(global::BioService.Person request, ServerCallContext context);
      Task<global::BioService.Person> UpdatePerson(global::BioService.Person request, ServerCallContext context);
      Task<global::BioService.Person> RemovePerson(global::BioService.Person request, ServerCallContext context);
      Task<global::BioService.Response> SetThumbnail(global::BioService.Photo request, ServerCallContext context);
      Task<global::BioService.Card> AddCard(global::BioService.Card request, ServerCallContext context);
      Task<global::BioService.CardList> RemoveCards(global::BioService.CardList request, ServerCallContext context);
      Task<global::BioService.Card> RemoveCard(global::BioService.Card request, ServerCallContext context);
      Task<global::BioService.PhotoList> SelectPhotos(global::BioService.QueryPhoto request, ServerCallContext context);
      Task<global::BioService.Photo> AddPhoto(global::BioService.Photo request, ServerCallContext context);
      Task<global::BioService.RawIndexes> RemovePhotos(global::BioService.RawIndexes request, ServerCallContext context);
      Task<global::BioService.VisitorList> SelectVisitors(global::BioService.QueryVisitors request, ServerCallContext context);
      Task<global::BioService.Response> AttachVisitorToPerson(global::BioService.Visitor request, ServerCallContext context);
      Task<global::BioService.RawIndexes> RemoveVisitors(global::BioService.RawIndexes request, ServerCallContext context);
      Task<global::BioService.Visitor> AddVisitor(global::BioService.FullVisitorData request, ServerCallContext context);
      Task<global::BioService.LocationList> SelectLocations(global::BioService.QueryLocations request, ServerCallContext context);
      Task<global::BioService.Location> AddLocation(global::BioService.Location request, ServerCallContext context);
      Task<global::BioService.Location> UpdateLocation(global::BioService.Location request, ServerCallContext context);
      Task<global::BioService.Location> RemoveLocation(global::BioService.Location request, ServerCallContext context);
      Task<global::BioService.FacialImage> AddFace(global::BioService.FacialImage request, ServerCallContext context);
      Task<global::BioService.FacialImage> RemoveFace(global::BioService.FacialImage request, ServerCallContext context);
      Task<global::BioService.FacialImage> UpdateFace(global::BioService.FacialImage request, ServerCallContext context);
      Task<global::BioService.FingerprintImage> AddFingerprint(global::BioService.FingerprintImage request, ServerCallContext context);
      Task<global::BioService.FingerprintImage> RemoveFingerprint(global::BioService.FingerprintImage request, ServerCallContext context);
      Task<global::BioService.FingerprintImage> UpdateFingerprint(global::BioService.FingerprintImage request, ServerCallContext context);
      Task<global::BioService.Response> AddClient(global::BioService.BioClient request, ServerCallContext context);
      Task<global::BioService.Response> RemoveClient(global::BioService.BioClient request, ServerCallContext context);
    }

    // client stub
    public class BiometricDatabaseSeviceClient : ClientBase, IBiometricDatabaseSeviceClient
    {
      public BiometricDatabaseSeviceClient(Channel channel) : base(channel)
      {
      }
      public global::BioService.PersonList PersonSelect(global::BioService.QueryPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PersonList PersonSelect(global::BioService.QueryPersons request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.QueryPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.QueryPersons request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Person AddPerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddPerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Person AddPerson(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_AddPerson, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> AddPersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddPerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> AddPersonAsync(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_AddPerson, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Person UpdatePerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdatePerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Person UpdatePerson(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdatePerson, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> UpdatePersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdatePerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> UpdatePersonAsync(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdatePerson, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Person RemovePerson(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemovePerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Person RemovePerson(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_RemovePerson, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> RemovePersonAsync(global::BioService.Person request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemovePerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Person> RemovePersonAsync(global::BioService.Person request, CallOptions options)
      {
        var call = CreateCall(__Method_RemovePerson, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Response SetThumbnail(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SetThumbnail, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response SetThumbnail(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_SetThumbnail, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> SetThumbnailAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SetThumbnail, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> SetThumbnailAsync(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_SetThumbnail, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Card AddCard(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddCard, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Card AddCard(global::BioService.Card request, CallOptions options)
      {
        var call = CreateCall(__Method_AddCard, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Card> AddCardAsync(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddCard, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Card> AddCardAsync(global::BioService.Card request, CallOptions options)
      {
        var call = CreateCall(__Method_AddCard, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.CardList RemoveCards(global::BioService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveCards, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.CardList RemoveCards(global::BioService.CardList request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveCards, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.CardList> RemoveCardsAsync(global::BioService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveCards, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.CardList> RemoveCardsAsync(global::BioService.CardList request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveCards, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Card RemoveCard(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveCard, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Card RemoveCard(global::BioService.Card request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveCard, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Card> RemoveCardAsync(global::BioService.Card request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveCard, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Card> RemoveCardAsync(global::BioService.Card request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveCard, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.PhotoList SelectPhotos(global::BioService.QueryPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectPhotos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PhotoList SelectPhotos(global::BioService.QueryPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectPhotos, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PhotoList> SelectPhotosAsync(global::BioService.QueryPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectPhotos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PhotoList> SelectPhotosAsync(global::BioService.QueryPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectPhotos, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Photo AddPhoto(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddPhoto, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Photo AddPhoto(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_AddPhoto, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Photo> AddPhotoAsync(global::BioService.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddPhoto, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Photo> AddPhotoAsync(global::BioService.Photo request, CallOptions options)
      {
        var call = CreateCall(__Method_AddPhoto, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.RawIndexes RemovePhotos(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemovePhotos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.RawIndexes RemovePhotos(global::BioService.RawIndexes request, CallOptions options)
      {
        var call = CreateCall(__Method_RemovePhotos, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.RawIndexes> RemovePhotosAsync(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemovePhotos, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.RawIndexes> RemovePhotosAsync(global::BioService.RawIndexes request, CallOptions options)
      {
        var call = CreateCall(__Method_RemovePhotos, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.VisitorList SelectVisitors(global::BioService.QueryVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectVisitors, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.VisitorList SelectVisitors(global::BioService.QueryVisitors request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectVisitors, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> SelectVisitorsAsync(global::BioService.QueryVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectVisitors, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> SelectVisitorsAsync(global::BioService.QueryVisitors request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectVisitors, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Response AttachVisitorToPerson(global::BioService.Visitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AttachVisitorToPerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response AttachVisitorToPerson(global::BioService.Visitor request, CallOptions options)
      {
        var call = CreateCall(__Method_AttachVisitorToPerson, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AttachVisitorToPersonAsync(global::BioService.Visitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AttachVisitorToPerson, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AttachVisitorToPersonAsync(global::BioService.Visitor request, CallOptions options)
      {
        var call = CreateCall(__Method_AttachVisitorToPerson, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.RawIndexes RemoveVisitors(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveVisitors, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.RawIndexes RemoveVisitors(global::BioService.RawIndexes request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveVisitors, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.RawIndexes> RemoveVisitorsAsync(global::BioService.RawIndexes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveVisitors, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.RawIndexes> RemoveVisitorsAsync(global::BioService.RawIndexes request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveVisitors, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Visitor AddVisitor(global::BioService.FullVisitorData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddVisitor, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Visitor AddVisitor(global::BioService.FullVisitorData request, CallOptions options)
      {
        var call = CreateCall(__Method_AddVisitor, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Visitor> AddVisitorAsync(global::BioService.FullVisitorData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddVisitor, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Visitor> AddVisitorAsync(global::BioService.FullVisitorData request, CallOptions options)
      {
        var call = CreateCall(__Method_AddVisitor, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.LocationList SelectLocations(global::BioService.QueryLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectLocations, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.LocationList SelectLocations(global::BioService.QueryLocations request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectLocations, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> SelectLocationsAsync(global::BioService.QueryLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SelectLocations, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> SelectLocationsAsync(global::BioService.QueryLocations request, CallOptions options)
      {
        var call = CreateCall(__Method_SelectLocations, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Location AddLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Location AddLocation(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_AddLocation, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> AddLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> AddLocationAsync(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_AddLocation, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Location UpdateLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Location UpdateLocation(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateLocation, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> UpdateLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> UpdateLocationAsync(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateLocation, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Location RemoveLocation(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Location RemoveLocation(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveLocation, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> RemoveLocationAsync(global::BioService.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Location> RemoveLocationAsync(global::BioService.Location request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveLocation, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FacialImage AddFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FacialImage AddFace(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_AddFace, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> AddFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> AddFaceAsync(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_AddFace, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FacialImage RemoveFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FacialImage RemoveFace(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveFace, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> RemoveFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> RemoveFaceAsync(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveFace, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FacialImage UpdateFace(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FacialImage UpdateFace(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateFace, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> UpdateFaceAsync(global::BioService.FacialImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FacialImage> UpdateFaceAsync(global::BioService.FacialImage request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateFace, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage AddFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage AddFingerprint(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_AddFingerprint, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> AddFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> AddFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_AddFingerprint, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage RemoveFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage RemoveFingerprint(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveFingerprint, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> RemoveFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> RemoveFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveFingerprint, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage UpdateFingerprint(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.FingerprintImage UpdateFingerprint(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateFingerprint, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> UpdateFingerprintAsync(global::BioService.FingerprintImage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateFingerprint, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.FingerprintImage> UpdateFingerprintAsync(global::BioService.FingerprintImage request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateFingerprint, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Response AddClient(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddClient, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response AddClient(global::BioService.BioClient request, CallOptions options)
      {
        var call = CreateCall(__Method_AddClient, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddClientAsync(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddClient, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddClientAsync(global::BioService.BioClient request, CallOptions options)
      {
        var call = CreateCall(__Method_AddClient, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.Response RemoveClient(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveClient, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response RemoveClient(global::BioService.BioClient request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveClient, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> RemoveClientAsync(global::BioService.BioClient request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RemoveClient, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> RemoveClientAsync(global::BioService.BioClient request, CallOptions options)
      {
        var call = CreateCall(__Method_RemoveClient, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBiometricDatabaseSevice serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_PersonSelect, serviceImpl.PersonSelect)
          .AddMethod(__Method_AddPerson, serviceImpl.AddPerson)
          .AddMethod(__Method_UpdatePerson, serviceImpl.UpdatePerson)
          .AddMethod(__Method_RemovePerson, serviceImpl.RemovePerson)
          .AddMethod(__Method_SetThumbnail, serviceImpl.SetThumbnail)
          .AddMethod(__Method_AddCard, serviceImpl.AddCard)
          .AddMethod(__Method_RemoveCards, serviceImpl.RemoveCards)
          .AddMethod(__Method_RemoveCard, serviceImpl.RemoveCard)
          .AddMethod(__Method_SelectPhotos, serviceImpl.SelectPhotos)
          .AddMethod(__Method_AddPhoto, serviceImpl.AddPhoto)
          .AddMethod(__Method_RemovePhotos, serviceImpl.RemovePhotos)
          .AddMethod(__Method_SelectVisitors, serviceImpl.SelectVisitors)
          .AddMethod(__Method_AttachVisitorToPerson, serviceImpl.AttachVisitorToPerson)
          .AddMethod(__Method_RemoveVisitors, serviceImpl.RemoveVisitors)
          .AddMethod(__Method_AddVisitor, serviceImpl.AddVisitor)
          .AddMethod(__Method_SelectLocations, serviceImpl.SelectLocations)
          .AddMethod(__Method_AddLocation, serviceImpl.AddLocation)
          .AddMethod(__Method_UpdateLocation, serviceImpl.UpdateLocation)
          .AddMethod(__Method_RemoveLocation, serviceImpl.RemoveLocation)
          .AddMethod(__Method_AddFace, serviceImpl.AddFace)
          .AddMethod(__Method_RemoveFace, serviceImpl.RemoveFace)
          .AddMethod(__Method_UpdateFace, serviceImpl.UpdateFace)
          .AddMethod(__Method_AddFingerprint, serviceImpl.AddFingerprint)
          .AddMethod(__Method_RemoveFingerprint, serviceImpl.RemoveFingerprint)
          .AddMethod(__Method_UpdateFingerprint, serviceImpl.UpdateFingerprint)
          .AddMethod(__Method_AddClient, serviceImpl.AddClient)
          .AddMethod(__Method_RemoveClient, serviceImpl.RemoveClient).Build();
    }

    // creates a new client
    public static BiometricDatabaseSeviceClient NewClient(Channel channel)
    {
      return new BiometricDatabaseSeviceClient(channel);
    }

  }
}
#endregion
