// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace BioService {
  public static class BiometricFacialSevice
  {
    static readonly string __ServiceName = "BioService.BiometricFacialSevice";

    static readonly Marshaller<global::BioService.SocketConfiguration> __Marshaller_SocketConfiguration = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.SocketConfiguration.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Response.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.EnrollmentData> __Marshaller_EnrollmentData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.EnrollmentFeedback> __Marshaller_EnrollmentFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.EnrollmentFeedback.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationData> __Marshaller_VerificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationData.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VerificationFeedback> __Marshaller_VerificationFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VerificationFeedback.Parser.ParseFrom);

    static readonly Method<global::BioService.SocketConfiguration, global::BioService.Response> __Method_AddSocket = new Method<global::BioService.SocketConfiguration, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "AddSocket",
        __Marshaller_SocketConfiguration,
        __Marshaller_Response);

    static readonly Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback> __Method_EnrollFace = new Method<global::BioService.EnrollmentData, global::BioService.EnrollmentFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "EnrollFace",
        __Marshaller_EnrollmentData,
        __Marshaller_EnrollmentFeedback);

    static readonly Method<global::BioService.VerificationData, global::BioService.VerificationFeedback> __Method_VerifyFace = new Method<global::BioService.VerificationData, global::BioService.VerificationFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "VerifyFace",
        __Marshaller_VerificationData,
        __Marshaller_VerificationFeedback);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioService.BioService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBiometricFacialSeviceClient
    {
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options);
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, CallOptions options);
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, CallOptions options);
    }

    // server-side interface
    public interface IBiometricFacialSevice
    {
      Task<global::BioService.Response> AddSocket(global::BioService.SocketConfiguration request, ServerCallContext context);
      Task EnrollFace(global::BioService.EnrollmentData request, IServerStreamWriter<global::BioService.EnrollmentFeedback> responseStream, ServerCallContext context);
      Task VerifyFace(global::BioService.VerificationData request, IServerStreamWriter<global::BioService.VerificationFeedback> responseStream, ServerCallContext context);
    }

    // client stub
    public class BiometricFacialSeviceClient : ClientBase, IBiometricFacialSeviceClient
    {
      public BiometricFacialSeviceClient(Channel channel) : base(channel)
      {
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_EnrollFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.EnrollmentFeedback> EnrollFace(global::BioService.EnrollmentData request, CallOptions options)
      {
        var call = CreateCall(__Method_EnrollFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VerifyFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioService.VerificationFeedback> VerifyFace(global::BioService.VerificationData request, CallOptions options)
      {
        var call = CreateCall(__Method_VerifyFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBiometricFacialSevice serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddSocket, serviceImpl.AddSocket)
          .AddMethod(__Method_EnrollFace, serviceImpl.EnrollFace)
          .AddMethod(__Method_VerifyFace, serviceImpl.VerifyFace).Build();
    }

    // creates a new client
    public static BiometricFacialSeviceClient NewClient(Channel channel)
    {
      return new BiometricFacialSeviceClient(channel);
    }

  }
  public static class BiometricDatabaseSevice
  {
    static readonly string __ServiceName = "BioService.BiometricDatabaseSevice";

    static readonly Marshaller<global::BioService.SocketConfiguration> __Marshaller_SocketConfiguration = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.SocketConfiguration.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.Response.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.CommandPersons> __Marshaller_CommandPersons = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.CommandPersons.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.PersonList> __Marshaller_PersonList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.PersonList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.CommandVisitors> __Marshaller_CommandVisitors = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.CommandVisitors.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.VisitorList> __Marshaller_VisitorList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.VisitorList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.CommandLocations> __Marshaller_CommandLocations = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.CommandLocations.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.LocationList> __Marshaller_LocationList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.LocationList.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.CommandPhoto> __Marshaller_CommandPhoto = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.CommandPhoto.Parser.ParseFrom);
    static readonly Marshaller<global::BioService.PhotoList> __Marshaller_PhotoList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioService.PhotoList.Parser.ParseFrom);

    static readonly Method<global::BioService.SocketConfiguration, global::BioService.Response> __Method_AddSocket = new Method<global::BioService.SocketConfiguration, global::BioService.Response>(
        MethodType.Unary,
        __ServiceName,
        "AddSocket",
        __Marshaller_SocketConfiguration,
        __Marshaller_Response);

    static readonly Method<global::BioService.CommandPersons, global::BioService.PersonList> __Method_PersonSelect = new Method<global::BioService.CommandPersons, global::BioService.PersonList>(
        MethodType.Unary,
        __ServiceName,
        "PersonSelect",
        __Marshaller_CommandPersons,
        __Marshaller_PersonList);

    static readonly Method<global::BioService.CommandVisitors, global::BioService.VisitorList> __Method_VisitorSelect = new Method<global::BioService.CommandVisitors, global::BioService.VisitorList>(
        MethodType.Unary,
        __ServiceName,
        "VisitorSelect",
        __Marshaller_CommandVisitors,
        __Marshaller_VisitorList);

    static readonly Method<global::BioService.CommandLocations, global::BioService.LocationList> __Method_LocationSelect = new Method<global::BioService.CommandLocations, global::BioService.LocationList>(
        MethodType.Unary,
        __ServiceName,
        "LocationSelect",
        __Marshaller_CommandLocations,
        __Marshaller_LocationList);

    static readonly Method<global::BioService.CommandPhoto, global::BioService.PhotoList> __Method_PhotoSelect = new Method<global::BioService.CommandPhoto, global::BioService.PhotoList>(
        MethodType.Unary,
        __ServiceName,
        "PhotoSelect",
        __Marshaller_CommandPhoto,
        __Marshaller_PhotoList);

    static readonly Method<global::BioService.PersonList, global::BioService.PersonList> __Method_PersonUpdate = new Method<global::BioService.PersonList, global::BioService.PersonList>(
        MethodType.Unary,
        __ServiceName,
        "PersonUpdate",
        __Marshaller_PersonList,
        __Marshaller_PersonList);

    static readonly Method<global::BioService.VisitorList, global::BioService.VisitorList> __Method_VisitorUpdate = new Method<global::BioService.VisitorList, global::BioService.VisitorList>(
        MethodType.Unary,
        __ServiceName,
        "VisitorUpdate",
        __Marshaller_VisitorList,
        __Marshaller_VisitorList);

    static readonly Method<global::BioService.LocationList, global::BioService.LocationList> __Method_LocationUpdate = new Method<global::BioService.LocationList, global::BioService.LocationList>(
        MethodType.Unary,
        __ServiceName,
        "LocationUpdate",
        __Marshaller_LocationList,
        __Marshaller_LocationList);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioService.BioService.Descriptor.Services[1]; }
    }

    // client interface
    public interface IBiometricDatabaseSeviceClient
    {
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options);
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options);
      global::BioService.PersonList PersonSelect(global::BioService.CommandPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PersonList PersonSelect(global::BioService.CommandPersons request, CallOptions options);
      AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.CommandPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.CommandPersons request, CallOptions options);
      global::BioService.VisitorList VisitorSelect(global::BioService.CommandVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.VisitorList VisitorSelect(global::BioService.CommandVisitors request, CallOptions options);
      AsyncUnaryCall<global::BioService.VisitorList> VisitorSelectAsync(global::BioService.CommandVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.VisitorList> VisitorSelectAsync(global::BioService.CommandVisitors request, CallOptions options);
      global::BioService.LocationList LocationSelect(global::BioService.CommandLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.LocationList LocationSelect(global::BioService.CommandLocations request, CallOptions options);
      AsyncUnaryCall<global::BioService.LocationList> LocationSelectAsync(global::BioService.CommandLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.LocationList> LocationSelectAsync(global::BioService.CommandLocations request, CallOptions options);
      global::BioService.PhotoList PhotoSelect(global::BioService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PhotoList PhotoSelect(global::BioService.CommandPhoto request, CallOptions options);
      AsyncUnaryCall<global::BioService.PhotoList> PhotoSelectAsync(global::BioService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PhotoList> PhotoSelectAsync(global::BioService.CommandPhoto request, CallOptions options);
      global::BioService.PersonList PersonUpdate(global::BioService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.PersonList PersonUpdate(global::BioService.PersonList request, CallOptions options);
      AsyncUnaryCall<global::BioService.PersonList> PersonUpdateAsync(global::BioService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.PersonList> PersonUpdateAsync(global::BioService.PersonList request, CallOptions options);
      global::BioService.VisitorList VisitorUpdate(global::BioService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.VisitorList VisitorUpdate(global::BioService.VisitorList request, CallOptions options);
      AsyncUnaryCall<global::BioService.VisitorList> VisitorUpdateAsync(global::BioService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.VisitorList> VisitorUpdateAsync(global::BioService.VisitorList request, CallOptions options);
      global::BioService.LocationList LocationUpdate(global::BioService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioService.LocationList LocationUpdate(global::BioService.LocationList request, CallOptions options);
      AsyncUnaryCall<global::BioService.LocationList> LocationUpdateAsync(global::BioService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioService.LocationList> LocationUpdateAsync(global::BioService.LocationList request, CallOptions options);
    }

    // server-side interface
    public interface IBiometricDatabaseSevice
    {
      Task<global::BioService.Response> AddSocket(global::BioService.SocketConfiguration request, ServerCallContext context);
      Task<global::BioService.PersonList> PersonSelect(global::BioService.CommandPersons request, ServerCallContext context);
      Task<global::BioService.VisitorList> VisitorSelect(global::BioService.CommandVisitors request, ServerCallContext context);
      Task<global::BioService.LocationList> LocationSelect(global::BioService.CommandLocations request, ServerCallContext context);
      Task<global::BioService.PhotoList> PhotoSelect(global::BioService.CommandPhoto request, ServerCallContext context);
      Task<global::BioService.PersonList> PersonUpdate(global::BioService.PersonList request, ServerCallContext context);
      Task<global::BioService.VisitorList> VisitorUpdate(global::BioService.VisitorList request, ServerCallContext context);
      Task<global::BioService.LocationList> LocationUpdate(global::BioService.LocationList request, ServerCallContext context);
    }

    // client stub
    public class BiometricDatabaseSeviceClient : ClientBase, IBiometricDatabaseSeviceClient
    {
      public BiometricDatabaseSeviceClient(Channel channel) : base(channel)
      {
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.Response AddSocket(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AddSocket, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.Response> AddSocketAsync(global::BioService.SocketConfiguration request, CallOptions options)
      {
        var call = CreateCall(__Method_AddSocket, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.PersonList PersonSelect(global::BioService.CommandPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PersonList PersonSelect(global::BioService.CommandPersons request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.CommandPersons request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonSelectAsync(global::BioService.CommandPersons request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.VisitorList VisitorSelect(global::BioService.CommandVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.VisitorList VisitorSelect(global::BioService.CommandVisitors request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> VisitorSelectAsync(global::BioService.CommandVisitors request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> VisitorSelectAsync(global::BioService.CommandVisitors request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.LocationList LocationSelect(global::BioService.CommandLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.LocationList LocationSelect(global::BioService.CommandLocations request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> LocationSelectAsync(global::BioService.CommandLocations request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> LocationSelectAsync(global::BioService.CommandLocations request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.PhotoList PhotoSelect(global::BioService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PhotoList PhotoSelect(global::BioService.CommandPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PhotoList> PhotoSelectAsync(global::BioService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PhotoList> PhotoSelectAsync(global::BioService.CommandPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.PersonList PersonUpdate(global::BioService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.PersonList PersonUpdate(global::BioService.PersonList request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonUpdateAsync(global::BioService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.PersonList> PersonUpdateAsync(global::BioService.PersonList request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.VisitorList VisitorUpdate(global::BioService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.VisitorList VisitorUpdate(global::BioService.VisitorList request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> VisitorUpdateAsync(global::BioService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.VisitorList> VisitorUpdateAsync(global::BioService.VisitorList request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioService.LocationList LocationUpdate(global::BioService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioService.LocationList LocationUpdate(global::BioService.LocationList request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> LocationUpdateAsync(global::BioService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioService.LocationList> LocationUpdateAsync(global::BioService.LocationList request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBiometricDatabaseSevice serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_AddSocket, serviceImpl.AddSocket)
          .AddMethod(__Method_PersonSelect, serviceImpl.PersonSelect)
          .AddMethod(__Method_VisitorSelect, serviceImpl.VisitorSelect)
          .AddMethod(__Method_LocationSelect, serviceImpl.LocationSelect)
          .AddMethod(__Method_PhotoSelect, serviceImpl.PhotoSelect)
          .AddMethod(__Method_PersonUpdate, serviceImpl.PersonUpdate)
          .AddMethod(__Method_VisitorUpdate, serviceImpl.VisitorUpdate)
          .AddMethod(__Method_LocationUpdate, serviceImpl.LocationUpdate).Build();
    }

    // creates a new client
    public static BiometricDatabaseSeviceClient NewClient(Channel channel)
    {
      return new BiometricDatabaseSeviceClient(channel);
    }

  }
}
#endregion
