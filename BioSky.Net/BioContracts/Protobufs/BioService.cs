// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioService {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BioService {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BioService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFiaW9fc2VydmljZS5wcm90bxIKQmlvU2VydmljZSKdBAoGUGVyc29uEgoK", 
            "AmlkGAEgASgDEhEKCWZpcnN0bmFtZRgCIAEoCRIQCghsYXN0bmFtZRgDIAEo", 
            "CRITCgtkYXRlb2ZiaXJ0aBgEIAEoAxIpCgZnZW5kZXIYBSABKA4yGS5CaW9T", 
            "ZXJ2aWNlLlBlcnNvbi5HZW5kZXISDwoHY291bnRyeRgGIAEoCRIMCgRjaXR5", 
            "GAcgASgJEhMKC3RodW1ibmFpbGlkGAggASgDEhAKCGNvbW1lbnRzGAkgASgJ", 
            "EikKBnJpZ2h0cxgKIAEoDjIZLkJpb1NlcnZpY2UuUGVyc29uLlJpZ2h0cxIN", 
            "CgVlbWFpbBgLIAEoCRIqCghkYnJlc3VsdBgMIAEoDjIYLkJpb1NlcnZpY2Uu", 
            "UmVzdWx0U3RhdHVzEiQKCXRodW1ibmFpbBgNIAEoCzIRLkJpb1NlcnZpY2Uu", 
            "UGhvdG8SIQoGcGhvdG9zGA4gAygLMhEuQmlvU2VydmljZS5QaG90bxIfCgVj", 
            "YXJkcxgPIAMoCzIQLkJpb1NlcnZpY2UuQ2FyZBItCgxlbnRpdHlfc3RhdGUY", 
            "ECABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlIigKBkdlbmRlchIICgRO", 
            "b25lEAASCAoETWFsZRABEgoKBkZlbWFsZRACIjMKBlJpZ2h0cxIMCghPcGVy", 
            "YXRvchAAEgsKB01hbmFnZXIQARIOCgpTdXBlcnZpc29yEAIilQIKDEFjY2Vz", 
            "c0RldmljZRIKCgJpZBgBIAEoAxISCgpsb2NhdGlvbmlkGAIgASgDEhAKCHBv", 
            "cnRuYW1lGAMgASgJEjcKBHR5cGUYBCABKA4yKS5CaW9TZXJ2aWNlLkFjY2Vz", 
            "c0RldmljZS5BY2Nlc3NEZXZpY2VUeXBlEioKCGRicmVzdWx0GAUgASgOMhgu", 
            "QmlvU2VydmljZS5SZXN1bHRTdGF0dXMSLQoMZW50aXR5X3N0YXRlGAYgASgO", 
            "MhcuQmlvU2VydmljZS5FbnRpdHlTdGF0ZSI/ChBBY2Nlc3NEZXZpY2VUeXBl", 
            "Eg4KCkRldmljZU5vbmUQABIMCghEZXZpY2VJbhABEg0KCURldmljZU91dBAC", 
            "Ip4BCg1DYXB0dXJlRGV2aWNlEgoKAmlkGAEgASgDEhIKCmxvY2F0aW9uaWQY", 
            "AiABKAMSEgoKZGV2aWNlbmFtZRgDIAEoCRItCgxlbnRpdHlfc3RhdGUYBCAB", 
            "KA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEioKCGRicmVzdWx0GAUgASgO", 
            "MhguQmlvU2VydmljZS5SZXN1bHRTdGF0dXMilgEKBENhcmQSCgoCaWQYASAB", 
            "KAMSEAoIcGVyc29uaWQYAiABKAMSFQoNdW5pcXVlX251bWJlchgDIAEoCRIt", 
            "CgxlbnRpdHlfc3RhdGUYBCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRl", 
            "EioKCGRicmVzdWx0GAUgASgOMhguQmlvU2VydmljZS5SZXN1bHRTdGF0dXMi", 
            "gQIKCExvY2F0aW9uEgoKAmlkGAEgASgDEhUKDWxvY2F0aW9uX25hbWUYAiAB", 
            "KAkSEwoLZGVzY3JpcHRpb24YAyABKAkSLQoMZW50aXR5X3N0YXRlGAQgASgO", 
            "MhcuQmlvU2VydmljZS5FbnRpdHlTdGF0ZRIqCghkYnJlc3VsdBgFIAEoDjIY", 
            "LkJpb1NlcnZpY2UuUmVzdWx0U3RhdHVzEjEKDmNhcHR1cmVEZXZpY2VzGAYg", 
            "AygLMhkuQmlvU2VydmljZS5DYXB0dXJlRGV2aWNlEi8KDWFjY2Vzc0Rldmlj", 
            "ZXMYByADKAsyGC5CaW9TZXJ2aWNlLkFjY2Vzc0RldmljZSKvAgoFUGhvdG8S", 
            "CgoCaWQYASABKAMSEAoIcGVyc29uaWQYAiABKAMSLAoJc2l6ZV90eXBlGAMg", 
            "ASgOMhkuQmlvU2VydmljZS5QaG90b1NpemVUeXBlEhQKDGZpcl9sb2NhdGlv", 
            "bhgEIAEoCRIVCg1maWxlX2xvY2F0aW9uGAUgASgJEhMKC2Rlc2NyaXB0aW9u", 
            "GAYgASgMEgsKA2ZpchgHIAEoDBItCgxlbnRpdHlfc3RhdGUYCCABKA4yFy5C", 
            "aW9TZXJ2aWNlLkVudGl0eVN0YXRlEjAKC29yaWdpbl90eXBlGAkgASgOMhsu", 
            "QmlvU2VydmljZS5QaG90b09yaWdpblR5cGUSKgoIZGJyZXN1bHQYCiABKA4y", 
            "GC5CaW9TZXJ2aWNlLlJlc3VsdFN0YXR1cyKWAgoHVmlzaXRvchIKCgJpZBgB", 
            "IAEoAxIQCghwZXJzb25pZBgCIAEoAxIPCgdwaG90b2lkGAMgASgDEhIKCmxv", 
            "Y2F0aW9uaWQYBCABKAMSDAoEdGltZRgFIAEoAxITCgtjYXJkX251bWJlchgG", 
            "IAEoCRIoCgZzdGF0dXMYByABKA4yGC5CaW9TZXJ2aWNlLlJlc3VsdFN0YXR1", 
            "cxItCgxlbnRpdHlfc3RhdGUYCCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0", 
            "YXRlEioKCGRicmVzdWx0GAkgASgOMhguQmlvU2VydmljZS5SZXN1bHRTdGF0", 
            "dXMSIAoFcGhvdG8YCiABKAsyES5CaW9TZXJ2aWNlLlBob3RvIjQKC1Zpc2l0", 
            "b3JMaXN0EiUKCHZpc2l0b3JzGAEgAygLMhMuQmlvU2VydmljZS5WaXNpdG9y", 
            "IjcKDExvY2F0aW9uTGlzdBInCglsb2NhdGlvbnMYASADKAsyFC5CaW9TZXJ2", 
            "aWNlLkxvY2F0aW9uIjEKClBlcnNvbkxpc3QSIwoHcGVyc29ucxgBIAMoCzIS", 
            "LkJpb1NlcnZpY2UuUGVyc29uIi4KCVBob3RvTGlzdBIhCgZwaG90b3MYASAD", 
            "KAsyES5CaW9TZXJ2aWNlLlBob3RvIjIKCFJlc3BvbnNlEiYKBGdvb2QYASAB", 
            "KA4yGC5CaW9TZXJ2aWNlLlJlc3VsdFN0YXR1cyJHChBWZXJpZmljYXRpb25E", 
            "YXRhEiEKBmltYWdlcxgBIAMoCzIRLkJpb1NlcnZpY2UuUGhvdG8SEAoIcGVy", 
            "c29uaWQYAiABKAMiRQoORW5yb2xsbWVudERhdGESIQoGaW1hZ2VzGAEgAygL", 
            "MhEuQmlvU2VydmljZS5QaG90bxIQCghwZXJzb25pZBgCIAEoAyJsChJFbnJv", 
            "bGxtZW50RmVlZGJhY2sSEAoIcHJvZ3Jlc3MYASABKA8SEQoJZXllc2ZvdW5k", 
            "GAIgASgIEg8KB3N1Y2Nlc3MYAyABKAgSIAoFcGhvdG8YBCABKAsyES5CaW9T", 
            "ZXJ2aWNlLlBob3RvImIKFFZlcmlmaWNhdGlvbkZlZWRiYWNrEjsKE2Vucm9s", 
            "bG1lbnRfZmVlZGJhY2sYASABKAsyHi5CaW9TZXJ2aWNlLkVucm9sbG1lbnRG", 
            "ZWVkYmFjaxINCgVtYXRjaBgCIAEoAiKaAQoMQ29tbWFuZFBob3RvEgsKA2Zp", 
            "chgBIAEoCBITCgtkZXNjcmlwdGlvbhgCIAEoCBIpCg10YXJnZXRfcGVyc29u", 
            "GAMgAygLMhIuQmlvU2VydmljZS5QZXJzb24SFAoMcmVzdWx0X2NvdW50GAQg", 
            "ASgDEicKDHRhcmdldF9waG90bxgFIAMoCzIRLkJpb1NlcnZpY2UuUGhvdG8i", 
            "HQoOQ29tbWFuZFBlcnNvbnMSCwoDYWxsGAEgASgIIh8KEENvbW1hbmRMb2Nh", 
            "dGlvbnMSCwoDYWxsGAEgASgIIh4KD0NvbW1hbmRWaXNpdG9ycxILCgNhbGwY", 
            "ASABKAgiJgoTU29ja2V0Q29uZmlndXJhdGlvbhIPCgdhZGRyZXNzGAEgASgJ", 
            "KkIKC0VudGl0eVN0YXRlEg0KCVVuY2hhbmdlZBAAEgkKBUFkZGVkEAESDAoI", 
            "TW9kaWZpZWQQAhILCgdEZWxldGVkEAMqJwoMUmVzdWx0U3RhdHVzEgsKB1N1", 
            "Y2Nlc3MQABIKCgZGYWlsZWQQASolCg1QaG90b1NpemVUeXBlEggKBEZ1bGwQ", 
            "ABIKCgZDcm9wZWQQASorCg9QaG90b09yaWdpblR5cGUSCgoGTG9hZGVkEAAS", 
            "DAoIRGV0ZWN0ZWQQATL9AQoVQmlvbWV0cmljRmFjaWFsU2V2aWNlEkQKCUFk", 
            "ZFNvY2tldBIfLkJpb1NlcnZpY2UuU29ja2V0Q29uZmlndXJhdGlvbhoULkJp", 
            "b1NlcnZpY2UuUmVzcG9uc2UiABJMCgpFbnJvbGxGYWNlEhouQmlvU2Vydmlj", 
            "ZS5FbnJvbGxtZW50RGF0YRoeLkJpb1NlcnZpY2UuRW5yb2xsbWVudEZlZWRi", 
            "YWNrIgAwARJQCgpWZXJpZnlGYWNlEhwuQmlvU2VydmljZS5WZXJpZmljYXRp", 
            "b25EYXRhGiAuQmlvU2VydmljZS5WZXJpZmljYXRpb25GZWVkYmFjayIAMAEy", 
            "ywQKF0Jpb21ldHJpY0RhdGFiYXNlU2V2aWNlEkQKCUFkZFNvY2tldBIfLkJp", 
            "b1NlcnZpY2UuU29ja2V0Q29uZmlndXJhdGlvbhoULkJpb1NlcnZpY2UuUmVz", 
            "cG9uc2UiABJECgxQZXJzb25TZWxlY3QSGi5CaW9TZXJ2aWNlLkNvbW1hbmRQ", 
            "ZXJzb25zGhYuQmlvU2VydmljZS5QZXJzb25MaXN0IgASRwoNVmlzaXRvclNl", 
            "bGVjdBIbLkJpb1NlcnZpY2UuQ29tbWFuZFZpc2l0b3JzGhcuQmlvU2Vydmlj", 
            "ZS5WaXNpdG9yTGlzdCIAEkoKDkxvY2F0aW9uU2VsZWN0EhwuQmlvU2Vydmlj", 
            "ZS5Db21tYW5kTG9jYXRpb25zGhguQmlvU2VydmljZS5Mb2NhdGlvbkxpc3Qi", 
            "ABJACgtQaG90b1NlbGVjdBIYLkJpb1NlcnZpY2UuQ29tbWFuZFBob3RvGhUu", 
            "QmlvU2VydmljZS5QaG90b0xpc3QiABJACgxQZXJzb25VcGRhdGUSFi5CaW9T", 
            "ZXJ2aWNlLlBlcnNvbkxpc3QaFi5CaW9TZXJ2aWNlLlBlcnNvbkxpc3QiABJD", 
            "Cg1WaXNpdG9yVXBkYXRlEhcuQmlvU2VydmljZS5WaXNpdG9yTGlzdBoXLkJp", 
            "b1NlcnZpY2UuVmlzaXRvckxpc3QiABJGCg5Mb2NhdGlvblVwZGF0ZRIYLkJp", 
            "b1NlcnZpY2UuTG9jYXRpb25MaXN0GhguQmlvU2VydmljZS5Mb2NhdGlvbkxp", 
            "c3QiAEIPCgdleC5ncnBjogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::BioService.EntityState), typeof(global::BioService.ResultStatus), typeof(global::BioService.PhotoSizeType), typeof(global::BioService.PhotoOriginType), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Person), new[]{ "Id", "Firstname", "Lastname", "Dateofbirth", "Gender", "Country", "City", "Thumbnailid", "Comments", "Rights", "Email", "Dbresult", "Thumbnail", "Photos", "Cards", "EntityState" }, null, new[]{ typeof(global::BioService.Person.Types.Gender), typeof(global::BioService.Person.Types.Rights) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.AccessDevice), new[]{ "Id", "Locationid", "Portname", "Type", "Dbresult", "EntityState" }, null, new[]{ typeof(global::BioService.AccessDevice.Types.AccessDeviceType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CaptureDevice), new[]{ "Id", "Locationid", "Devicename", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Card), new[]{ "Id", "Personid", "UniqueNumber", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Location), new[]{ "Id", "LocationName", "Description", "EntityState", "Dbresult", "CaptureDevices", "AccessDevices" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Photo), new[]{ "Id", "Personid", "SizeType", "FirLocation", "FileLocation", "Description", "Fir", "EntityState", "OriginType", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Visitor), new[]{ "Id", "Personid", "Photoid", "Locationid", "Time", "CardNumber", "Status", "EntityState", "Dbresult", "Photo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VisitorList), new[]{ "Visitors" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.LocationList), new[]{ "Locations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PersonList), new[]{ "Persons" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PhotoList), new[]{ "Photos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Response), new[]{ "Good" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationData), new[]{ "Images", "Personid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentData), new[]{ "Images", "Personid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentFeedback), new[]{ "Progress", "Eyesfound", "Success", "Photo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationFeedback), new[]{ "EnrollmentFeedback", "Match" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandPhoto), new[]{ "Fir", "Description", "TargetPerson", "ResultCount", "TargetPhoto" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandPersons), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandLocations), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandVisitors), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.SocketConfiguration), new[]{ "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EntityState {
    Unchanged = 0,
    Added = 1,
    Modified = 2,
    Deleted = 3,
  }

  public enum ResultStatus {
    Success = 0,
    Failed = 1,
  }

  public enum PhotoSizeType {
    Full = 0,
    Croped = 1,
  }

  public enum PhotoOriginType {
    Loaded = 0,
    Detected = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Person(Person other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      dateofbirth_ = other.dateofbirth_;
      gender_ = other.gender_;
      country_ = other.country_;
      city_ = other.city_;
      thumbnailid_ = other.thumbnailid_;
      comments_ = other.comments_;
      rights_ = other.rights_;
      email_ = other.email_;
      dbresult_ = other.dbresult_;
      Thumbnail = other.thumbnail_ != null ? other.Thumbnail.Clone() : null;
      photos_ = other.photos_.Clone();
      cards_ = other.cards_.Clone();
      entityState_ = other.entityState_;
    }

    public Person Clone() {
      return new Person(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DateofbirthFieldNumber = 4;
    private long dateofbirth_;
    public long Dateofbirth {
      get { return dateofbirth_; }
      set {
        dateofbirth_ = value;
      }
    }

    public const int GenderFieldNumber = 5;
    private global::BioService.Person.Types.Gender gender_ = global::BioService.Person.Types.Gender.None;
    public global::BioService.Person.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    public const int CountryFieldNumber = 6;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CityFieldNumber = 7;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ThumbnailidFieldNumber = 8;
    private long thumbnailid_;
    public long Thumbnailid {
      get { return thumbnailid_; }
      set {
        thumbnailid_ = value;
      }
    }

    public const int CommentsFieldNumber = 9;
    private string comments_ = "";
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RightsFieldNumber = 10;
    private global::BioService.Person.Types.Rights rights_ = global::BioService.Person.Types.Rights.Operator;
    public global::BioService.Person.Types.Rights Rights {
      get { return rights_; }
      set {
        rights_ = value;
      }
    }

    public const int EmailFieldNumber = 11;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbresultFieldNumber = 12;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public const int ThumbnailFieldNumber = 13;
    private global::BioService.Photo thumbnail_;
    public global::BioService.Photo Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = value;
      }
    }

    public const int PhotosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(114, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> photos_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Photos {
      get { return photos_; }
    }

    public const int CardsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::BioService.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(122, global::BioService.Card.Parser);
    private readonly pbc::RepeatedField<global::BioService.Card> cards_ = new pbc::RepeatedField<global::BioService.Card>();
    public pbc::RepeatedField<global::BioService.Card> Cards {
      get { return cards_; }
    }

    public const int EntityStateFieldNumber = 16;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Dateofbirth != other.Dateofbirth) return false;
      if (Gender != other.Gender) return false;
      if (Country != other.Country) return false;
      if (City != other.City) return false;
      if (Thumbnailid != other.Thumbnailid) return false;
      if (Comments != other.Comments) return false;
      if (Rights != other.Rights) return false;
      if (Email != other.Email) return false;
      if (Dbresult != other.Dbresult) return false;
      if (!object.Equals(Thumbnail, other.Thumbnail)) return false;
      if(!photos_.Equals(other.photos_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (EntityState != other.EntityState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Dateofbirth != 0L) hash ^= Dateofbirth.GetHashCode();
      if (Gender != global::BioService.Person.Types.Gender.None) hash ^= Gender.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Thumbnailid != 0L) hash ^= Thumbnailid.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Rights != global::BioService.Person.Types.Rights.Operator) hash ^= Rights.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      if (thumbnail_ != null) hash ^= Thumbnail.GetHashCode();
      hash ^= photos_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Dateofbirth != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Dateofbirth);
      }
      if (Gender != global::BioService.Person.Types.Gender.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Gender);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (City.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(City);
      }
      if (Thumbnailid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Thumbnailid);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Comments);
      }
      if (Rights != global::BioService.Person.Types.Rights.Operator) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Rights);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Dbresult);
      }
      if (thumbnail_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Thumbnail);
      }
      photos_.WriteTo(output, _repeated_photos_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) EntityState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Dateofbirth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dateofbirth);
      }
      if (Gender != global::BioService.Person.Types.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Thumbnailid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Thumbnailid);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Rights != global::BioService.Person.Types.Rights.Operator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rights);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      if (thumbnail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thumbnail);
      }
      size += photos_.CalculateSize(_repeated_photos_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      return size;
    }

    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Dateofbirth != 0L) {
        Dateofbirth = other.Dateofbirth;
      }
      if (other.Gender != global::BioService.Person.Types.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Thumbnailid != 0L) {
        Thumbnailid = other.Thumbnailid;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Rights != global::BioService.Person.Types.Rights.Operator) {
        Rights = other.Rights;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
      if (other.thumbnail_ != null) {
        if (thumbnail_ == null) {
          thumbnail_ = new global::BioService.Photo();
        }
        Thumbnail.MergeFrom(other.Thumbnail);
      }
      photos_.Add(other.photos_);
      cards_.Add(other.cards_);
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 32: {
            Dateofbirth = input.ReadInt64();
            break;
          }
          case 40: {
            gender_ = (global::BioService.Person.Types.Gender) input.ReadEnum();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
          case 58: {
            City = input.ReadString();
            break;
          }
          case 64: {
            Thumbnailid = input.ReadInt64();
            break;
          }
          case 74: {
            Comments = input.ReadString();
            break;
          }
          case 80: {
            rights_ = (global::BioService.Person.Types.Rights) input.ReadEnum();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 96: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 106: {
            if (thumbnail_ == null) {
              thumbnail_ = new global::BioService.Photo();
            }
            input.ReadMessage(thumbnail_);
            break;
          }
          case 114: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
          case 122: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 128: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Gender {
        None = 0,
        Male = 1,
        Female = 2,
      }

      public enum Rights {
        Operator = 0,
        Manager = 1,
        Supervisor = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDevice : pb::IMessage<AccessDevice> {
    private static readonly pb::MessageParser<AccessDevice> _parser = new pb::MessageParser<AccessDevice>(() => new AccessDevice());
    public static pb::MessageParser<AccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDevice(AccessDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      portname_ = other.portname_;
      type_ = other.type_;
      dbresult_ = other.dbresult_;
      entityState_ = other.entityState_;
    }

    public AccessDevice Clone() {
      return new AccessDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int PortnameFieldNumber = 3;
    private string portname_ = "";
    public string Portname {
      get { return portname_; }
      set {
        portname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TypeFieldNumber = 4;
    private global::BioService.AccessDevice.Types.AccessDeviceType type_ = global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone;
    public global::BioService.AccessDevice.Types.AccessDeviceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public const int EntityStateFieldNumber = 6;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDevice);
    }

    public bool Equals(AccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Portname != other.Portname) return false;
      if (Type != other.Type) return false;
      if (Dbresult != other.Dbresult) return false;
      if (EntityState != other.EntityState) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Portname.Length != 0) hash ^= Portname.GetHashCode();
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) hash ^= Type.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Portname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Portname);
      }
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(48);
        output.WriteEnum((int) EntityState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Portname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Portname);
      }
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      return size;
    }

    public void MergeFrom(AccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Portname.Length != 0) {
        Portname = other.Portname;
      }
      if (other.Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        Type = other.Type;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Portname = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::BioService.AccessDevice.Types.AccessDeviceType) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 48: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AccessDeviceType {
        DeviceNone = 0,
        DeviceIn = 1,
        DeviceOut = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDevice : pb::IMessage<CaptureDevice> {
    private static readonly pb::MessageParser<CaptureDevice> _parser = new pb::MessageParser<CaptureDevice>(() => new CaptureDevice());
    public static pb::MessageParser<CaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDevice(CaptureDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      devicename_ = other.devicename_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public CaptureDevice Clone() {
      return new CaptureDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int DevicenameFieldNumber = 3;
    private string devicename_ = "";
    public string Devicename {
      get { return devicename_; }
      set {
        devicename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDevice);
    }

    public bool Equals(CaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Devicename != other.Devicename) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Devicename.Length != 0) hash ^= Devicename.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Devicename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Devicename);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Devicename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Devicename);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(CaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Devicename.Length != 0) {
        Devicename = other.Devicename;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Devicename = input.ReadString();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Card(Card other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      uniqueNumber_ = other.uniqueNumber_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Card Clone() {
      return new Card(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int UniqueNumberFieldNumber = 3;
    private string uniqueNumber_ = "";
    public string UniqueNumber {
      get { return uniqueNumber_; }
      set {
        uniqueNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (UniqueNumber != other.UniqueNumber) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (UniqueNumber.Length != 0) hash ^= UniqueNumber.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (UniqueNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (UniqueNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.UniqueNumber.Length != 0) {
        UniqueNumber = other.UniqueNumber;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 26: {
            UniqueNumber = input.ReadString();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Location(Location other) : this() {
      id_ = other.id_;
      locationName_ = other.locationName_;
      description_ = other.description_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
      captureDevices_ = other.captureDevices_.Clone();
      accessDevices_ = other.accessDevices_.Clone();
    }

    public Location Clone() {
      return new Location(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationNameFieldNumber = 2;
    private string locationName_ = "";
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public const int CaptureDevicesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::BioService.CaptureDevice> _repeated_captureDevices_codec
        = pb::FieldCodec.ForMessage(50, global::BioService.CaptureDevice.Parser);
    private readonly pbc::RepeatedField<global::BioService.CaptureDevice> captureDevices_ = new pbc::RepeatedField<global::BioService.CaptureDevice>();
    public pbc::RepeatedField<global::BioService.CaptureDevice> CaptureDevices {
      get { return captureDevices_; }
    }

    public const int AccessDevicesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::BioService.AccessDevice> _repeated_accessDevices_codec
        = pb::FieldCodec.ForMessage(58, global::BioService.AccessDevice.Parser);
    private readonly pbc::RepeatedField<global::BioService.AccessDevice> accessDevices_ = new pbc::RepeatedField<global::BioService.AccessDevice>();
    public pbc::RepeatedField<global::BioService.AccessDevice> AccessDevices {
      get { return accessDevices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LocationName != other.LocationName) return false;
      if (Description != other.Description) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      if(!captureDevices_.Equals(other.captureDevices_)) return false;
      if(!accessDevices_.Equals(other.accessDevices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      hash ^= captureDevices_.GetHashCode();
      hash ^= accessDevices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocationName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
      captureDevices_.WriteTo(output, _repeated_captureDevices_codec);
      accessDevices_.WriteTo(output, _repeated_accessDevices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      size += captureDevices_.CalculateSize(_repeated_captureDevices_codec);
      size += accessDevices_.CalculateSize(_repeated_accessDevices_codec);
      return size;
    }

    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
      captureDevices_.Add(other.captureDevices_);
      accessDevices_.Add(other.accessDevices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            LocationName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 50: {
            captureDevices_.AddEntriesFrom(input, _repeated_captureDevices_codec);
            break;
          }
          case 58: {
            accessDevices_.AddEntriesFrom(input, _repeated_accessDevices_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photo : pb::IMessage<Photo> {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photo(Photo other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      sizeType_ = other.sizeType_;
      firLocation_ = other.firLocation_;
      fileLocation_ = other.fileLocation_;
      description_ = other.description_;
      fir_ = other.fir_;
      entityState_ = other.entityState_;
      originType_ = other.originType_;
      dbresult_ = other.dbresult_;
    }

    public Photo Clone() {
      return new Photo(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int SizeTypeFieldNumber = 3;
    private global::BioService.PhotoSizeType sizeType_ = global::BioService.PhotoSizeType.Full;
    public global::BioService.PhotoSizeType SizeType {
      get { return sizeType_; }
      set {
        sizeType_ = value;
      }
    }

    public const int FirLocationFieldNumber = 4;
    private string firLocation_ = "";
    public string FirLocation {
      get { return firLocation_; }
      set {
        firLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FileLocationFieldNumber = 5;
    private string fileLocation_ = "";
    public string FileLocation {
      get { return fileLocation_; }
      set {
        fileLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 6;
    private pb::ByteString description_ = pb::ByteString.Empty;
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FirFieldNumber = 7;
    private pb::ByteString fir_ = pb::ByteString.Empty;
    public pb::ByteString Fir {
      get { return fir_; }
      set {
        fir_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 8;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int OriginTypeFieldNumber = 9;
    private global::BioService.PhotoOriginType originType_ = global::BioService.PhotoOriginType.Loaded;
    public global::BioService.PhotoOriginType OriginType {
      get { return originType_; }
      set {
        originType_ = value;
      }
    }

    public const int DbresultFieldNumber = 10;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (SizeType != other.SizeType) return false;
      if (FirLocation != other.FirLocation) return false;
      if (FileLocation != other.FileLocation) return false;
      if (Description != other.Description) return false;
      if (Fir != other.Fir) return false;
      if (EntityState != other.EntityState) return false;
      if (OriginType != other.OriginType) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (SizeType != global::BioService.PhotoSizeType.Full) hash ^= SizeType.GetHashCode();
      if (FirLocation.Length != 0) hash ^= FirLocation.GetHashCode();
      if (FileLocation.Length != 0) hash ^= FileLocation.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Fir.Length != 0) hash ^= Fir.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (OriginType != global::BioService.PhotoOriginType.Loaded) hash ^= OriginType.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (SizeType != global::BioService.PhotoSizeType.Full) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SizeType);
      }
      if (FirLocation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirLocation);
      }
      if (FileLocation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FileLocation);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Description);
      }
      if (Fir.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Fir);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EntityState);
      }
      if (OriginType != global::BioService.PhotoOriginType.Loaded) {
        output.WriteRawTag(72);
        output.WriteEnum((int) OriginType);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (SizeType != global::BioService.PhotoSizeType.Full) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SizeType);
      }
      if (FirLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirLocation);
      }
      if (FileLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileLocation);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (Fir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Fir);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (OriginType != global::BioService.PhotoOriginType.Loaded) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OriginType);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.SizeType != global::BioService.PhotoSizeType.Full) {
        SizeType = other.SizeType;
      }
      if (other.FirLocation.Length != 0) {
        FirLocation = other.FirLocation;
      }
      if (other.FileLocation.Length != 0) {
        FileLocation = other.FileLocation;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Fir.Length != 0) {
        Fir = other.Fir;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.OriginType != global::BioService.PhotoOriginType.Loaded) {
        OriginType = other.OriginType;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            sizeType_ = (global::BioService.PhotoSizeType) input.ReadEnum();
            break;
          }
          case 34: {
            FirLocation = input.ReadString();
            break;
          }
          case 42: {
            FileLocation = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadBytes();
            break;
          }
          case 58: {
            Fir = input.ReadBytes();
            break;
          }
          case 64: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 72: {
            originType_ = (global::BioService.PhotoOriginType) input.ReadEnum();
            break;
          }
          case 80: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Visitor : pb::IMessage<Visitor> {
    private static readonly pb::MessageParser<Visitor> _parser = new pb::MessageParser<Visitor>(() => new Visitor());
    public static pb::MessageParser<Visitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Visitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Visitor(Visitor other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      photoid_ = other.photoid_;
      locationid_ = other.locationid_;
      time_ = other.time_;
      cardNumber_ = other.cardNumber_;
      status_ = other.status_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
    }

    public Visitor Clone() {
      return new Visitor(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int PhotoidFieldNumber = 3;
    private long photoid_;
    public long Photoid {
      get { return photoid_; }
      set {
        photoid_ = value;
      }
    }

    public const int LocationidFieldNumber = 4;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int TimeFieldNumber = 5;
    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public const int CardNumberFieldNumber = 6;
    private string cardNumber_ = "";
    public string CardNumber {
      get { return cardNumber_; }
      set {
        cardNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatusFieldNumber = 7;
    private global::BioService.ResultStatus status_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public const int EntityStateFieldNumber = 8;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 9;
    private global::BioService.ResultStatus dbresult_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public const int PhotoFieldNumber = 10;
    private global::BioService.Photo photo_;
    public global::BioService.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Visitor);
    }

    public bool Equals(Visitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Photoid != other.Photoid) return false;
      if (Locationid != other.Locationid) return false;
      if (Time != other.Time) return false;
      if (CardNumber != other.CardNumber) return false;
      if (Status != other.Status) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Photoid != 0L) hash ^= Photoid.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (CardNumber.Length != 0) hash ^= CardNumber.GetHashCode();
      if (Status != global::BioService.ResultStatus.Success) hash ^= Status.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.ResultStatus.Success) hash ^= Dbresult.GetHashCode();
      if (photo_ != null) hash ^= Photo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Photoid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Photoid);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Locationid);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (CardNumber.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CardNumber);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Dbresult);
      }
      if (photo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Photoid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Photoid);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (CardNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardNumber);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      return size;
    }

    public void MergeFrom(Visitor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Photoid != 0L) {
        Photoid = other.Photoid;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.CardNumber.Length != 0) {
        CardNumber = other.CardNumber;
      }
      if (other.Status != global::BioService.ResultStatus.Success) {
        Status = other.Status;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.ResultStatus.Success) {
        Dbresult = other.Dbresult;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::BioService.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            Photoid = input.ReadInt64();
            break;
          }
          case 32: {
            Locationid = input.ReadInt64();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 50: {
            CardNumber = input.ReadString();
            break;
          }
          case 56: {
            status_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 64: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 72: {
            dbresult_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 82: {
            if (photo_ == null) {
              photo_ = new global::BioService.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VisitorList : pb::IMessage<VisitorList> {
    private static readonly pb::MessageParser<VisitorList> _parser = new pb::MessageParser<VisitorList>(() => new VisitorList());
    public static pb::MessageParser<VisitorList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VisitorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VisitorList(VisitorList other) : this() {
      visitors_ = other.visitors_.Clone();
    }

    public VisitorList Clone() {
      return new VisitorList(this);
    }

    public const int VisitorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Visitor> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Visitor.Parser);
    private readonly pbc::RepeatedField<global::BioService.Visitor> visitors_ = new pbc::RepeatedField<global::BioService.Visitor>();
    public pbc::RepeatedField<global::BioService.Visitor> Visitors {
      get { return visitors_; }
    }

    public override bool Equals(object other) {
      return Equals(other as VisitorList);
    }

    public bool Equals(VisitorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visitors_.Equals(other.visitors_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= visitors_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      visitors_.WriteTo(output, _repeated_visitors_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      return size;
    }

    public void MergeFrom(VisitorList other) {
      if (other == null) {
        return;
      }
      visitors_.Add(other.visitors_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LocationList : pb::IMessage<LocationList> {
    private static readonly pb::MessageParser<LocationList> _parser = new pb::MessageParser<LocationList>(() => new LocationList());
    public static pb::MessageParser<LocationList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LocationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LocationList(LocationList other) : this() {
      locations_ = other.locations_.Clone();
    }

    public LocationList Clone() {
      return new LocationList(this);
    }

    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Location> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Location.Parser);
    private readonly pbc::RepeatedField<global::BioService.Location> locations_ = new pbc::RepeatedField<global::BioService.Location>();
    public pbc::RepeatedField<global::BioService.Location> Locations {
      get { return locations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LocationList);
    }

    public bool Equals(LocationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    public void MergeFrom(LocationList other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonList : pb::IMessage<PersonList> {
    private static readonly pb::MessageParser<PersonList> _parser = new pb::MessageParser<PersonList>(() => new PersonList());
    public static pb::MessageParser<PersonList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PersonList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PersonList(PersonList other) : this() {
      persons_ = other.persons_.Clone();
    }

    public PersonList Clone() {
      return new PersonList(this);
    }

    public const int PersonsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> persons_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> Persons {
      get { return persons_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PersonList);
    }

    public bool Equals(PersonList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!persons_.Equals(other.persons_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= persons_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      persons_.WriteTo(output, _repeated_persons_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += persons_.CalculateSize(_repeated_persons_codec);
      return size;
    }

    public void MergeFrom(PersonList other) {
      if (other == null) {
        return;
      }
      persons_.Add(other.persons_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhotoList : pb::IMessage<PhotoList> {
    private static readonly pb::MessageParser<PhotoList> _parser = new pb::MessageParser<PhotoList>(() => new PhotoList());
    public static pb::MessageParser<PhotoList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PhotoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PhotoList(PhotoList other) : this() {
      photos_ = other.photos_.Clone();
    }

    public PhotoList Clone() {
      return new PhotoList(this);
    }

    public const int PhotosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> photos_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Photos {
      get { return photos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PhotoList);
    }

    public bool Equals(PhotoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!photos_.Equals(other.photos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= photos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      photos_.WriteTo(output, _repeated_photos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += photos_.CalculateSize(_repeated_photos_codec);
      return size;
    }

    public void MergeFrom(PhotoList other) {
      if (other == null) {
        return;
      }
      photos_.Add(other.photos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      good_ = other.good_;
    }

    public Response Clone() {
      return new Response(this);
    }

    public const int GoodFieldNumber = 1;
    private global::BioService.ResultStatus good_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Good {
      get { return good_; }
      set {
        good_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Good != other.Good) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Good != global::BioService.ResultStatus.Success) hash ^= Good.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Good != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Good);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Good != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Good);
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Good != global::BioService.ResultStatus.Success) {
        Good = other.Good;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            good_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationData : pb::IMessage<VerificationData> {
    private static readonly pb::MessageParser<VerificationData> _parser = new pb::MessageParser<VerificationData>(() => new VerificationData());
    public static pb::MessageParser<VerificationData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationData(VerificationData other) : this() {
      images_ = other.images_.Clone();
      personid_ = other.personid_;
    }

    public VerificationData Clone() {
      return new VerificationData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationData);
    }

    public bool Equals(VerificationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (Personid != other.Personid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      return size;
    }

    public void MergeFrom(VerificationData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentData : pb::IMessage<EnrollmentData> {
    private static readonly pb::MessageParser<EnrollmentData> _parser = new pb::MessageParser<EnrollmentData>(() => new EnrollmentData());
    public static pb::MessageParser<EnrollmentData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentData(EnrollmentData other) : this() {
      images_ = other.images_.Clone();
      personid_ = other.personid_;
    }

    public EnrollmentData Clone() {
      return new EnrollmentData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentData);
    }

    public bool Equals(EnrollmentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (Personid != other.Personid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      return size;
    }

    public void MergeFrom(EnrollmentData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentFeedback : pb::IMessage<EnrollmentFeedback> {
    private static readonly pb::MessageParser<EnrollmentFeedback> _parser = new pb::MessageParser<EnrollmentFeedback>(() => new EnrollmentFeedback());
    public static pb::MessageParser<EnrollmentFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentFeedback(EnrollmentFeedback other) : this() {
      progress_ = other.progress_;
      eyesfound_ = other.eyesfound_;
      success_ = other.success_;
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
    }

    public EnrollmentFeedback Clone() {
      return new EnrollmentFeedback(this);
    }

    public const int ProgressFieldNumber = 1;
    private int progress_;
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public const int EyesfoundFieldNumber = 2;
    private bool eyesfound_;
    public bool Eyesfound {
      get { return eyesfound_; }
      set {
        eyesfound_ = value;
      }
    }

    public const int SuccessFieldNumber = 3;
    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public const int PhotoFieldNumber = 4;
    private global::BioService.Photo photo_;
    public global::BioService.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentFeedback);
    }

    public bool Equals(EnrollmentFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      if (Eyesfound != other.Eyesfound) return false;
      if (Success != other.Success) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Eyesfound != false) hash ^= Eyesfound.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (photo_ != null) hash ^= Photo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Progress);
      }
      if (Eyesfound != false) {
        output.WriteRawTag(16);
        output.WriteBool(Eyesfound);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (photo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + 4;
      }
      if (Eyesfound != false) {
        size += 1 + 1;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      return size;
    }

    public void MergeFrom(EnrollmentFeedback other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Eyesfound != false) {
        Eyesfound = other.Eyesfound;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::BioService.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Progress = input.ReadSFixed32();
            break;
          }
          case 16: {
            Eyesfound = input.ReadBool();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 34: {
            if (photo_ == null) {
              photo_ = new global::BioService.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationFeedback : pb::IMessage<VerificationFeedback> {
    private static readonly pb::MessageParser<VerificationFeedback> _parser = new pb::MessageParser<VerificationFeedback>(() => new VerificationFeedback());
    public static pb::MessageParser<VerificationFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationFeedback(VerificationFeedback other) : this() {
      EnrollmentFeedback = other.enrollmentFeedback_ != null ? other.EnrollmentFeedback.Clone() : null;
      match_ = other.match_;
    }

    public VerificationFeedback Clone() {
      return new VerificationFeedback(this);
    }

    public const int EnrollmentFeedbackFieldNumber = 1;
    private global::BioService.EnrollmentFeedback enrollmentFeedback_;
    public global::BioService.EnrollmentFeedback EnrollmentFeedback {
      get { return enrollmentFeedback_; }
      set {
        enrollmentFeedback_ = value;
      }
    }

    public const int MatchFieldNumber = 2;
    private float match_;
    public float Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationFeedback);
    }

    public bool Equals(VerificationFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnrollmentFeedback, other.EnrollmentFeedback)) return false;
      if (Match != other.Match) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (enrollmentFeedback_ != null) hash ^= EnrollmentFeedback.GetHashCode();
      if (Match != 0F) hash ^= Match.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enrollmentFeedback_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EnrollmentFeedback);
      }
      if (Match != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Match);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (enrollmentFeedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnrollmentFeedback);
      }
      if (Match != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(VerificationFeedback other) {
      if (other == null) {
        return;
      }
      if (other.enrollmentFeedback_ != null) {
        if (enrollmentFeedback_ == null) {
          enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
        }
        EnrollmentFeedback.MergeFrom(other.EnrollmentFeedback);
      }
      if (other.Match != 0F) {
        Match = other.Match;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enrollmentFeedback_ == null) {
              enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
            }
            input.ReadMessage(enrollmentFeedback_);
            break;
          }
          case 21: {
            Match = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPhoto : pb::IMessage<CommandPhoto> {
    private static readonly pb::MessageParser<CommandPhoto> _parser = new pb::MessageParser<CommandPhoto>(() => new CommandPhoto());
    public static pb::MessageParser<CommandPhoto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPhoto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPhoto(CommandPhoto other) : this() {
      fir_ = other.fir_;
      description_ = other.description_;
      targetPerson_ = other.targetPerson_.Clone();
      resultCount_ = other.resultCount_;
      targetPhoto_ = other.targetPhoto_.Clone();
    }

    public CommandPhoto Clone() {
      return new CommandPhoto(this);
    }

    public const int FirFieldNumber = 1;
    private bool fir_;
    public bool Fir {
      get { return fir_; }
      set {
        fir_ = value;
      }
    }

    public const int DescriptionFieldNumber = 2;
    private bool description_;
    public bool Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    public const int TargetPersonFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_targetPerson_codec
        = pb::FieldCodec.ForMessage(26, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> targetPerson_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> TargetPerson {
      get { return targetPerson_; }
    }

    public const int ResultCountFieldNumber = 4;
    private long resultCount_;
    public long ResultCount {
      get { return resultCount_; }
      set {
        resultCount_ = value;
      }
    }

    public const int TargetPhotoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_targetPhoto_codec
        = pb::FieldCodec.ForMessage(42, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> targetPhoto_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> TargetPhoto {
      get { return targetPhoto_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPhoto);
    }

    public bool Equals(CommandPhoto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fir != other.Fir) return false;
      if (Description != other.Description) return false;
      if(!targetPerson_.Equals(other.targetPerson_)) return false;
      if (ResultCount != other.ResultCount) return false;
      if(!targetPhoto_.Equals(other.targetPhoto_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Fir != false) hash ^= Fir.GetHashCode();
      if (Description != false) hash ^= Description.GetHashCode();
      hash ^= targetPerson_.GetHashCode();
      if (ResultCount != 0L) hash ^= ResultCount.GetHashCode();
      hash ^= targetPhoto_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fir != false) {
        output.WriteRawTag(8);
        output.WriteBool(Fir);
      }
      if (Description != false) {
        output.WriteRawTag(16);
        output.WriteBool(Description);
      }
      targetPerson_.WriteTo(output, _repeated_targetPerson_codec);
      if (ResultCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ResultCount);
      }
      targetPhoto_.WriteTo(output, _repeated_targetPhoto_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Fir != false) {
        size += 1 + 1;
      }
      if (Description != false) {
        size += 1 + 1;
      }
      size += targetPerson_.CalculateSize(_repeated_targetPerson_codec);
      if (ResultCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResultCount);
      }
      size += targetPhoto_.CalculateSize(_repeated_targetPhoto_codec);
      return size;
    }

    public void MergeFrom(CommandPhoto other) {
      if (other == null) {
        return;
      }
      if (other.Fir != false) {
        Fir = other.Fir;
      }
      if (other.Description != false) {
        Description = other.Description;
      }
      targetPerson_.Add(other.targetPerson_);
      if (other.ResultCount != 0L) {
        ResultCount = other.ResultCount;
      }
      targetPhoto_.Add(other.targetPhoto_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fir = input.ReadBool();
            break;
          }
          case 16: {
            Description = input.ReadBool();
            break;
          }
          case 26: {
            targetPerson_.AddEntriesFrom(input, _repeated_targetPerson_codec);
            break;
          }
          case 32: {
            ResultCount = input.ReadInt64();
            break;
          }
          case 42: {
            targetPhoto_.AddEntriesFrom(input, _repeated_targetPhoto_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPersons : pb::IMessage<CommandPersons> {
    private static readonly pb::MessageParser<CommandPersons> _parser = new pb::MessageParser<CommandPersons>(() => new CommandPersons());
    public static pb::MessageParser<CommandPersons> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPersons() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPersons(CommandPersons other) : this() {
      all_ = other.all_;
    }

    public CommandPersons Clone() {
      return new CommandPersons(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPersons);
    }

    public bool Equals(CommandPersons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandPersons other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandLocations : pb::IMessage<CommandLocations> {
    private static readonly pb::MessageParser<CommandLocations> _parser = new pb::MessageParser<CommandLocations>(() => new CommandLocations());
    public static pb::MessageParser<CommandLocations> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandLocations() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandLocations(CommandLocations other) : this() {
      all_ = other.all_;
    }

    public CommandLocations Clone() {
      return new CommandLocations(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandLocations);
    }

    public bool Equals(CommandLocations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandLocations other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandVisitors : pb::IMessage<CommandVisitors> {
    private static readonly pb::MessageParser<CommandVisitors> _parser = new pb::MessageParser<CommandVisitors>(() => new CommandVisitors());
    public static pb::MessageParser<CommandVisitors> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandVisitors() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandVisitors(CommandVisitors other) : this() {
      all_ = other.all_;
    }

    public CommandVisitors Clone() {
      return new CommandVisitors(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandVisitors);
    }

    public bool Equals(CommandVisitors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandVisitors other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SocketConfiguration : pb::IMessage<SocketConfiguration> {
    private static readonly pb::MessageParser<SocketConfiguration> _parser = new pb::MessageParser<SocketConfiguration>(() => new SocketConfiguration());
    public static pb::MessageParser<SocketConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SocketConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SocketConfiguration(SocketConfiguration other) : this() {
      address_ = other.address_;
    }

    public SocketConfiguration Clone() {
      return new SocketConfiguration(this);
    }

    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SocketConfiguration);
    }

    public bool Equals(SocketConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    public void MergeFrom(SocketConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
