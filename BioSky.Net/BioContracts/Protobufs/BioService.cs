// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioService {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BioService {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BioService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFiaW9fc2VydmljZS5wcm90bxIKQmlvU2VydmljZSIdCgpSYXdJbmRleGVz", 
            "Eg8KB2luZGV4ZXMYASADKAMiOgoIQ3JpbWluYWwSCgoCaWQYASABKAMSEwoL", 
            "ZGVzY3JpcHRpb24YAiABKAkSDQoFYWxlcnQYAyABKAkikQEKD0Z1bGxWaXNp", 
            "dG9yRGF0YRIkCgd2aXNpdG9yGAEgASgLMhMuQmlvU2VydmljZS5WaXNpdG9y", 
            "EiUKBGZhY2UYAiABKAsyFy5CaW9TZXJ2aWNlLkZhY2lhbEltYWdlEjEKC2Zp", 
            "bmdlcnByaW50GAMgASgLMhwuQmlvU2VydmljZS5GaW5nZXJwcmludEltYWdl", 
            "IoUECgZQZXJzb24SCgoCaWQYASABKAMSEQoJZmlyc3RuYW1lGAIgASgJEhAK", 
            "CGxhc3RuYW1lGAMgASgJEhMKC2RhdGVvZmJpcnRoGAQgASgDEiIKBmdlbmRl", 
            "chgFIAEoDjISLkJpb1NlcnZpY2UuR2VuZGVyEg8KB2NvdW50cnkYBiABKAkS", 
            "DAoEY2l0eRgHIAEoCRIQCghjb21tZW50cxgIIAEoCRIiCgZyaWdodHMYCSAB", 
            "KA4yEi5CaW9TZXJ2aWNlLlJpZ2h0cxINCgVlbWFpbBgKIAEoCRITCgt0aHVt", 
            "Ym5haWxpZBgLIAEoAxImCghjcmltaW5hbBgMIAEoCzIULkJpb1NlcnZpY2Uu", 
            "Q3JpbWluYWwSHwoFY2FyZHMYDSADKAsyEC5CaW9TZXJ2aWNlLkNhcmQSIQoG", 
            "cGhvdG9zGA4gAygLMhEuQmlvU2VydmljZS5QaG90bxIkCglUaHVtYm5haWwY", 
            "DyABKAsyES5CaW9TZXJ2aWNlLlBob3RvEjEKDmJpb21ldHJpY19kYXRhGBAg", 
            "ASgLMhkuQmlvU2VydmljZS5CaW9tZXRyaWNEYXRhEi0KDGVudGl0eV9zdGF0", 
            "ZRgRIAEoDjIXLkJpb1NlcnZpY2UuRW50aXR5U3RhdGUSJAoIZGJyZXN1bHQY", 
            "EiABKA4yEi5CaW9TZXJ2aWNlLlJlc3VsdCKVAQoMQWNjZXNzRGV2aWNlEgoK", 
            "AmlkGAEgASgDEhIKCmxvY2F0aW9uaWQYAiABKAMSEAoIcG9ydG5hbWUYAyAB", 
            "KAkSLQoMZW50aXR5X3N0YXRlGAUgASgOMhcuQmlvU2VydmljZS5FbnRpdHlT", 
            "dGF0ZRIkCghkYnJlc3VsdBgGIAEoDjISLkJpb1NlcnZpY2UuUmVzdWx0IpgB", 
            "Cg1DYXB0dXJlRGV2aWNlEgoKAmlkGAEgASgDEhIKCmxvY2F0aW9uaWQYAiAB", 
            "KAMSEgoKZGV2aWNlbmFtZRgDIAEoCRItCgxlbnRpdHlfc3RhdGUYBCABKA4y", 
            "Fy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEiQKCGRicmVzdWx0GAUgASgOMhIu", 
            "QmlvU2VydmljZS5SZXN1bHQiswEKEUZpbmdlcnByaW50RGV2aWNlEgoKAmlk", 
            "GAEgASgDEhIKCmxvY2F0aW9uaWQYAiABKAMSEgoKZGV2aWNlbmFtZRgDIAEo", 
            "CRIVCg1zZXJpYWxfbnVtYmVyGAQgASgJEi0KDGVudGl0eV9zdGF0ZRgFIAEo", 
            "DjIXLkJpb1NlcnZpY2UuRW50aXR5U3RhdGUSJAoIZGJyZXN1bHQYBiABKA4y", 
            "Ei5CaW9TZXJ2aWNlLlJlc3VsdCKQAQoEQ2FyZBIKCgJpZBgBIAEoAxIQCghw", 
            "ZXJzb25pZBgCIAEoAxIVCg11bmlxdWVfbnVtYmVyGAMgASgJEi0KDGVudGl0", 
            "eV9zdGF0ZRgEIAEoDjIXLkJpb1NlcnZpY2UuRW50aXR5U3RhdGUSJAoIZGJy", 
            "ZXN1bHQYBSABKA4yEi5CaW9TZXJ2aWNlLlJlc3VsdCLQAwoITG9jYXRpb24S", 
            "CgoCaWQYASABKAMSFQoNbG9jYXRpb25fbmFtZRgCIAEoCRITCgtkZXNjcmlw", 
            "dGlvbhgDIAEoCRITCgttYWNfYWRkcmVzcxgEIAEoCRI0CgthY2Nlc3NfdHlw", 
            "ZRgFIAEoDjIfLkJpb1NlcnZpY2UuTG9jYXRpb24uQWNjZXNzVHlwZRIwCg1j", 
            "YXB0dXJlRGV2aWNlGAYgASgLMhkuQmlvU2VydmljZS5DYXB0dXJlRGV2aWNl", 
            "Ei4KDGFjY2Vzc0RldmljZRgHIAEoCzIYLkJpb1NlcnZpY2UuQWNjZXNzRGV2", 
            "aWNlEjgKEWZpbmdlcnByaW50RGV2aWNlGAggASgLMh0uQmlvU2VydmljZS5G", 
            "aW5nZXJwcmludERldmljZRIjCgdwZXJzb25zGAkgAygLMhIuQmlvU2Vydmlj", 
            "ZS5QZXJzb24SLQoMZW50aXR5X3N0YXRlGAogASgOMhcuQmlvU2VydmljZS5F", 
            "bnRpdHlTdGF0ZRIkCghkYnJlc3VsdBgLIAEoDjISLkJpb1NlcnZpY2UuUmVz", 
            "dWx0IisKCkFjY2Vzc1R5cGUSCAoETm9uZRAAEgcKA0FsbBABEgoKBkN1c3Rv", 
            "bRACIr0BCglMb2dSZWNvcmQSLQoMbWVzc2FnZV90eXBlGAEgASgOMhcuQmlv", 
            "U2VydmljZS5NZXNzYWdlVHlwZRIVCg1kZXRlY3RlZF90aW1lGAIgASgDEhkK", 
            "EWV4Y2VwdGlvbl9tZXNzYWdlGAMgASgJEhIKCmNsYXNzX25hbWUYBCABKAkS", 
            "FQoNZnVuY3Rpb25fbmFtZRgFIAEoCRITCgtsaW5lX251bWJlchgGIAEoAxIP", 
            "Cgdjb21tZW50GAcgASgJIpgBChFCaW9tZXRyaWNMb2NhdGlvbhIMCgR4cG9z", 
            "GAEgASgCEgwKBHlwb3MYAiABKAISEgoKY29uZmlkZW5jZRgDIAEoAhItCgxl", 
            "bnRpdHlfc3RhdGUYBCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEiQK", 
            "CGRicmVzdWx0GAUgASgOMhIuQmlvU2VydmljZS5SZXN1bHQi2AEKEkV5ZXND", 
            "aGFyYWN0ZXJpc3RpYxIKCgJpZBgBIAEoAxIvCghsZWZ0X2V5ZRgCIAEoCzId", 
            "LkJpb1NlcnZpY2UuQmlvbWV0cmljTG9jYXRpb24SMAoJcmlnaHRfZXllGAMg", 
            "ASgLMh0uQmlvU2VydmljZS5CaW9tZXRyaWNMb2NhdGlvbhItCgxlbnRpdHlf", 
            "c3RhdGUYBCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEiQKCGRicmVz", 
            "dWx0GAUgASgOMhIuQmlvU2VydmljZS5SZXN1bHQiRwoWUG9ydHJhaXRDaGFy", 
            "YWN0ZXJpc3RpYxItCgVmYWNlcxgBIAMoCzIeLkJpb1NlcnZpY2UuRmFjZUNo", 
            "YXJhY3RlcmlzdGljIu4CChJGYWNlQ2hhcmFjdGVyaXN0aWMSCgoCaWQYASAB", 
            "KAMSDQoFd2lkdGgYAiABKAISCwoDYWdlGAMgASgPEiIKBmdlbmRlchgEIAEo", 
            "DjISLkJpb1NlcnZpY2UuR2VuZGVyEi8KCGxvY2F0aW9uGAUgASgLMh0uQmlv", 
            "U2VydmljZS5CaW9tZXRyaWNMb2NhdGlvbhIsCgRleWVzGAYgASgLMh4uQmlv", 
            "U2VydmljZS5FeWVzQ2hhcmFjdGVyaXN0aWMSNQoIdGVtcGxhdGUYByABKAsy", 
            "Iy5CaW9TZXJ2aWNlLkJpb0lkZW50aWZpY2F0aW9uUmVjb3JkEhAKCHBlcnNv", 
            "bmlkGAggASgDEg8KB3Bob3RvaWQYCSABKAMSLQoMZW50aXR5X3N0YXRlGAog", 
            "ASgOMhcuQmlvU2VydmljZS5FbnRpdHlTdGF0ZRIkCghkYnJlc3VsdBgLIAEo", 
            "DjISLkJpb1NlcnZpY2UuUmVzdWx0IvwBChlGaW5nZXJwcmludENoYXJhY3Rl", 
            "cmlzdGljEgoKAmlkGAEgASgDEiQKCHBvc2l0aW9uGAIgASgOMhIuQmlvU2Vy", 
            "dmljZS5GaW5nZXISNQoIdGVtcGxhdGUYAyABKAsyIy5CaW9TZXJ2aWNlLkJp", 
            "b0lkZW50aWZpY2F0aW9uUmVjb3JkEhAKCHBlcnNvbmlkGAQgASgDEg8KB3Bo", 
            "b3RvaWQYBSABKAMSLQoMZW50aXR5X3N0YXRlGAYgASgOMhcuQmlvU2Vydmlj", 
            "ZS5FbnRpdHlTdGF0ZRIkCghkYnJlc3VsdBgHIAEoDjISLkJpb1NlcnZpY2Uu", 
            "UmVzdWx0IkIKF0Jpb0lkZW50aWZpY2F0aW9uUmVjb3JkEg8KB2Jpcl91cmwY", 
            "ASABKAkSFgoOYmlyX2J5dGVzdHJpbmcYAiABKAwikQEKDUJpb1BlcnNvbkRh", 
            "dGESEQoJcGVyc29uX2lkGAEgASgDEjIKBWZhY2VzGAIgAygLMiMuQmlvU2Vy", 
            "dmljZS5CaW9JZGVudGlmaWNhdGlvblJlY29yZBI5CgxmaW5nZXJwcmludHMY", 
            "AyADKAsyIy5CaW9TZXJ2aWNlLkJpb0lkZW50aWZpY2F0aW9uUmVjb3JkIocB", 
            "Cg1CaW9tZXRyaWNEYXRhEgoKAmlkGAEgASgDEi0KBWZhY2VzGAIgAygLMh4u", 
            "QmlvU2VydmljZS5GYWNlQ2hhcmFjdGVyaXN0aWMSOwoMZmluZ2VycHJpbnRz", 
            "GAMgAygLMiUuQmlvU2VydmljZS5GaW5nZXJwcmludENoYXJhY3RlcmlzdGlj", 
            "ItQBCgtGYWNpYWxJbWFnZRIfChdvd25lcl9iaW9tZXRyaWNfZGF0YV9pZBgB", 
            "IAEoAxIgCgVpbWFnZRgCIAEoCzIRLkJpb1NlcnZpY2UuUGhvdG8SLQoFZmFj", 
            "ZXMYAyADKAsyHi5CaW9TZXJ2aWNlLkZhY2VDaGFyYWN0ZXJpc3RpYxItCgxl", 
            "bnRpdHlfc3RhdGUYBCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEiQK", 
            "CGRicmVzdWx0GAUgASgOMhIuQmlvU2VydmljZS5SZXN1bHQi5gEKEEZpbmdl", 
            "cnByaW50SW1hZ2USHwoXb3duZXJfYmlvbWV0cmljX2RhdGFfaWQYASABKAMS", 
            "IAoFaW1hZ2UYAiABKAsyES5CaW9TZXJ2aWNlLlBob3RvEjoKC2ZpbmdlcnBy", 
            "aW50GAMgASgLMiUuQmlvU2VydmljZS5GaW5nZXJwcmludENoYXJhY3Rlcmlz", 
            "dGljEi0KDGVudGl0eV9zdGF0ZRgEIAEoDjIXLkJpb1NlcnZpY2UuRW50aXR5", 
            "U3RhdGUSJAoIZGJyZXN1bHQYBSABKA4yEi5CaW9TZXJ2aWNlLlJlc3VsdCKy", 
            "AgoFUGhvdG8SCgoCaWQYASABKAMSEAoIZGF0ZXRpbWUYAyABKAMSEQoJcGhv", 
            "dG9fdXJsGAQgASgJEhIKCmJ5dGVzdHJpbmcYBSABKAwSDQoFd2lkdGgYBiAB", 
            "KAMSDgoGaGVpZ2h0GAcgASgDEjAKC29yaWdpbl90eXBlGAggASgOMhsuQmlv", 
            "U2VydmljZS5QaG90b09yaWdpblR5cGUSLAoJc2l6ZV90eXBlGAkgASgOMhku", 
            "QmlvU2VydmljZS5QaG90b1NpemVUeXBlEhAKCG93bmVyX2lkGAogASgDEi0K", 
            "DGVudGl0eV9zdGF0ZRgLIAEoDjIXLkJpb1NlcnZpY2UuRW50aXR5U3RhdGUS", 
            "JAoIZGJyZXN1bHQYDCABKA4yEi5CaW9TZXJ2aWNlLlJlc3VsdCKJAgoHVmlz", 
            "aXRvchIKCgJpZBgBIAEoAxIQCghwZXJzb25pZBgCIAEoAxISCgpsb2NhdGlv", 
            "bmlkGAMgASgDEgwKBHRpbWUYBCABKAMSEwoLY2FyZF9udW1iZXIYBSABKAkS", 
            "IgoGc3RhdHVzGAYgASgOMhIuQmlvU2VydmljZS5SZXN1bHQSMAoNYmlvbWV0", 
            "cmljRGF0YRgHIAEoCzIZLkJpb1NlcnZpY2UuQmlvbWV0cmljRGF0YRItCgxl", 
            "bnRpdHlfc3RhdGUYCCABKA4yFy5CaW9TZXJ2aWNlLkVudGl0eVN0YXRlEiQK", 
            "CGRicmVzdWx0GAkgASgOMhIuQmlvU2VydmljZS5SZXN1bHQiNAoLVmlzaXRv", 
            "ckxpc3QSJQoIdmlzaXRvcnMYASADKAsyEy5CaW9TZXJ2aWNlLlZpc2l0b3Ii", 
            "NwoMTG9jYXRpb25MaXN0EicKCWxvY2F0aW9ucxgBIAMoCzIULkJpb1NlcnZp", 
            "Y2UuTG9jYXRpb24iMQoKUGVyc29uTGlzdBIjCgdwZXJzb25zGAEgAygLMhIu", 
            "QmlvU2VydmljZS5QZXJzb24iLgoJUGhvdG9MaXN0EiEKBnBob3RvcxgBIAMo", 
            "CzIRLkJpb1NlcnZpY2UuUGhvdG8iPAoRQmlvbWV0cmljRGF0YUxpc3QSJwoE", 
            "ZGF0YRgBIAMoCzIZLkJpb1NlcnZpY2UuQmlvbWV0cmljRGF0YSIsCghSZXNw", 
            "b25zZRIgCgRnb29kGAEgASgOMhIuQmlvU2VydmljZS5SZXN1bHQiXwoSSWRl", 
            "bnRpZmljYXRpb25EYXRhEiEKBmltYWdlcxgBIAMoCzIRLkJpb1NlcnZpY2Uu", 
            "UGhvdG8SJgoKcG9wdWxhdGlvbhgCIAMoCzISLkJpb1NlcnZpY2UuUGVyc29u", 
            "IlkKEFZlcmlmaWNhdGlvbkRhdGESIQoGaW1hZ2VzGAEgAygLMhEuQmlvU2Vy", 
            "dmljZS5QaG90bxIiCgZwZXJzb24YAiABKAsyEi5CaW9TZXJ2aWNlLlBlcnNv", 
            "biJXCg5FbnJvbGxtZW50RGF0YRIhCgZpbWFnZXMYASADKAsyES5CaW9TZXJ2", 
            "aWNlLlBob3RvEiIKBnBlcnNvbhgCIAEoCzISLkJpb1NlcnZpY2UuUGVyc29u", 
            "ImAKEkVucm9sbG1lbnRGZWVkYmFjaxIQCghwcm9ncmVzcxgBIAEoDxIPCgdz", 
            "dWNjZXNzGAIgASgIEicKBGRhdGEYAyABKAsyGS5CaW9TZXJ2aWNlLkJpb21l", 
            "dHJpY0RhdGEiYgoUVmVyaWZpY2F0aW9uRmVlZGJhY2sSOwoTZW5yb2xsbWVu", 
            "dF9mZWVkYmFjaxgBIAEoCzIeLkJpb1NlcnZpY2UuRW5yb2xsbWVudEZlZWRi", 
            "YWNrEg0KBW1hdGNoGAIgASgCIpcBCgpRdWVyeVBob3RvEg4KBmZpZWxkcxgB", 
            "IAEoAxIPCgdwZXJzb25zGAIgAygDEg4KBnBob3RvcxgDIAMoAxIWCg5pdGVt", 
            "c19wZXJfcGFnZRgEIAEoAyJAChFUYXJnZXRQaG90b0ZpZWxkcxIHCgNBbGwQ", 
            "ABIJCgVPdGhlchABEg4KCkJ5dGVzdHJpbmcQAhIHCgNGaXIQBCIdCgxRdWVy", 
            "eVBlcnNvbnMSDQoFY291bnQYASABKAMiHwoOUXVlcnlMb2NhdGlvbnMSDQoF", 
            "Y291bnQYASABKAMiigEKDVF1ZXJ5VmlzaXRvcnMSEQoJY291bnRyaWVzGAIg", 
            "AygJEhEKCWxvY2F0aW9ucxgDIAMoAxIPCgdwZXJzb25zGAQgAygDEhUKDWRh", 
            "dGV0aW1lX2Zyb20YBSABKAMSEwoLZGF0ZXRpbWVfdG8YBiABKAMSFgoOaXRl", 
            "bXNfcGVyX3BhZ2UYByABKAMiJgoTU29ja2V0Q29uZmlndXJhdGlvbhIPCgdh", 
            "ZGRyZXNzGAEgASgJIkkKCUJpb0NsaWVudBISCgppcF9hZGRyZXNzGAEgASgJ", 
            "EhMKC3BvcnRfbnVtYmVyGAIgASgDEhMKC21hY19hZGRyZXNzGAMgASgJKkIK", 
            "C0VudGl0eVN0YXRlEg0KCVVuY2hhbmdlZBAAEgkKBUFkZGVkEAESDAoITW9k", 
            "aWZpZWQQAhILCgdEZWxldGVkEAMqnwEKBkZpbmdlchIHCgNBbnkQABIOCgpS", 
            "aWdodFRodW1iEAESDgoKUmlnaHRJbmRleBADEg0KCUxlZnRJbmRleBAEEg8K", 
            "C1JpZ2h0TWlkZGxlEAUSDgoKTGVmdE1pZGRsZRAGEg0KCVJpZ2h0UmluZxAH", 
            "EgwKCExlZnRSaW5nEAgSDwoLUmlnaHRMaXR0bGUQCRIOCgpMZWZ0TGl0dGxl", 
            "EAoqIQoGUmVzdWx0EgsKB1N1Y2Nlc3MQABIKCgZGYWlsZWQQASooCgZHZW5k", 
            "ZXISCAoETm9uZRAAEggKBE1hbGUQARIKCgZGZW1hbGUQAio/CgZSaWdodHMS", 
            "CgoGQ3VzdG9tEAASDAoIT3BlcmF0b3IQARILCgdNYW5hZ2VyEAISDgoKU3Vw", 
            "ZXJ2aXNvchADKjYKC01lc3NhZ2VUeXBlEg8KC0luZm9ybWF0aW9uEAASCQoF", 
            "RXJyb3IQARILCgdXYXJuaW5nEAIqJQoNUGhvdG9TaXplVHlwZRIICgRGdWxs", 
            "EAASCgoGQ3JvcGVkEAEqPAoPUGhvdG9PcmlnaW5UeXBlEgwKCEVucm9sbGVk", 
            "EAASDAoIVmVyaWZpZWQQARINCglUaHVtYm5haWwQAjLEAgoVQmlvbWV0cmlj", 
            "RmFjaWFsU2V2aWNlEkQKCUFkZFNvY2tldBIfLkJpb1NlcnZpY2UuU29ja2V0", 
            "Q29uZmlndXJhdGlvbhoULkJpb1NlcnZpY2UuUmVzcG9uc2UiABJFCgpEZXRl", 
            "Y3RGYWNlEhEuQmlvU2VydmljZS5QaG90bxoiLkJpb1NlcnZpY2UuUG9ydHJh", 
            "aXRDaGFyYWN0ZXJpc3RpYyIAEkwKCkVucm9sbEZhY2USGi5CaW9TZXJ2aWNl", 
            "LkVucm9sbG1lbnREYXRhGh4uQmlvU2VydmljZS5FbnJvbGxtZW50RmVlZGJh", 
            "Y2siADABElAKClZlcmlmeUZhY2USHC5CaW9TZXJ2aWNlLlZlcmlmaWNhdGlv", 
            "bkRhdGEaIC5CaW9TZXJ2aWNlLlZlcmlmaWNhdGlvbkZlZWRiYWNrIgAwATLK", 
            "AQoaQmlvbWV0cmljRmluZ2VycHJpbnRTZXZpY2USUwoRRW5yb2xsRmluZ2Vy", 
            "cHJpbnQSGi5CaW9TZXJ2aWNlLkVucm9sbG1lbnREYXRhGh4uQmlvU2Vydmlj", 
            "ZS5FbnJvbGxtZW50RmVlZGJhY2siADABElcKEVZlcmlmeUZpbmdlcnByaW50", 
            "EhwuQmlvU2VydmljZS5WZXJpZmljYXRpb25EYXRhGiAuQmlvU2VydmljZS5W", 
            "ZXJpZmljYXRpb25GZWVkYmFjayIAMAEyvA0KF0Jpb21ldHJpY0RhdGFiYXNl", 
            "U2V2aWNlEkIKDFBlcnNvblNlbGVjdBIYLkJpb1NlcnZpY2UuUXVlcnlQZXJz", 
            "b25zGhYuQmlvU2VydmljZS5QZXJzb25MaXN0IgASNQoJQWRkUGVyc29uEhIu", 
            "QmlvU2VydmljZS5QZXJzb24aEi5CaW9TZXJ2aWNlLlBlcnNvbiIAEjgKDFVw", 
            "ZGF0ZVBlcnNvbhISLkJpb1NlcnZpY2UuUGVyc29uGhIuQmlvU2VydmljZS5Q", 
            "ZXJzb24iABI4CgxSZW1vdmVQZXJzb24SEi5CaW9TZXJ2aWNlLlBlcnNvbhoS", 
            "LkJpb1NlcnZpY2UuUGVyc29uIgASOQoMU2V0VGh1bWJuYWlsEhEuQmlvU2Vy", 
            "dmljZS5QaG90bxoULkJpb1NlcnZpY2UuUmVzcG9uc2UiABIvCgdBZGRDYXJk", 
            "EhAuQmlvU2VydmljZS5DYXJkGhAuQmlvU2VydmljZS5DYXJkIgASPwoLUmVt", 
            "b3ZlQ2FyZHMSFi5CaW9TZXJ2aWNlLlJhd0luZGV4ZXMaFi5CaW9TZXJ2aWNl", 
            "LlJhd0luZGV4ZXMiABI/CgxTZWxlY3RQaG90b3MSFi5CaW9TZXJ2aWNlLlF1", 
            "ZXJ5UGhvdG8aFS5CaW9TZXJ2aWNlLlBob3RvTGlzdCIAEjIKCEFkZFBob3Rv", 
            "EhEuQmlvU2VydmljZS5QaG90bxoRLkJpb1NlcnZpY2UuUGhvdG8iABJACgxS", 
            "ZW1vdmVQaG90b3MSFi5CaW9TZXJ2aWNlLlJhd0luZGV4ZXMaFi5CaW9TZXJ2", 
            "aWNlLlJhd0luZGV4ZXMiABJGCg5TZWxlY3RWaXNpdG9ycxIZLkJpb1NlcnZp", 
            "Y2UuUXVlcnlWaXNpdG9ycxoXLkJpb1NlcnZpY2UuVmlzaXRvckxpc3QiABJE", 
            "ChVBdHRhY2hWaXNpdG9yVG9QZXJzb24SEy5CaW9TZXJ2aWNlLlZpc2l0b3Ia", 
            "FC5CaW9TZXJ2aWNlLlJlc3BvbnNlIgASQgoOUmVtb3ZlVmlzaXRvcnMSFi5C", 
            "aW9TZXJ2aWNlLlJhd0luZGV4ZXMaFi5CaW9TZXJ2aWNlLlJhd0luZGV4ZXMi", 
            "ABJACgpBZGRWaXNpdG9yEhsuQmlvU2VydmljZS5GdWxsVmlzaXRvckRhdGEa", 
            "Ey5CaW9TZXJ2aWNlLlZpc2l0b3IiABJJCg9TZWxlY3RMb2NhdGlvbnMSGi5C", 
            "aW9TZXJ2aWNlLlF1ZXJ5TG9jYXRpb25zGhguQmlvU2VydmljZS5Mb2NhdGlv", 
            "bkxpc3QiABI7CgtBZGRMb2NhdGlvbhIULkJpb1NlcnZpY2UuTG9jYXRpb24a", 
            "FC5CaW9TZXJ2aWNlLkxvY2F0aW9uIgASPgoOVXBkYXRlTG9jYXRpb24SFC5C", 
            "aW9TZXJ2aWNlLkxvY2F0aW9uGhQuQmlvU2VydmljZS5Mb2NhdGlvbiIAEj4K", 
            "DlJlbW92ZUxvY2F0aW9uEhQuQmlvU2VydmljZS5Mb2NhdGlvbhoULkJpb1Nl", 
            "cnZpY2UuTG9jYXRpb24iABI9CgdBZGRGYWNlEhcuQmlvU2VydmljZS5GYWNp", 
            "YWxJbWFnZRoXLkJpb1NlcnZpY2UuRmFjaWFsSW1hZ2UiABJACgpSZW1vdmVG", 
            "YWNlEhcuQmlvU2VydmljZS5GYWNpYWxJbWFnZRoXLkJpb1NlcnZpY2UuRmFj", 
            "aWFsSW1hZ2UiABJACgpVcGRhdGVGYWNlEhcuQmlvU2VydmljZS5GYWNpYWxJ", 
            "bWFnZRoXLkJpb1NlcnZpY2UuRmFjaWFsSW1hZ2UiABJOCg5BZGRGaW5nZXJw", 
            "cmludBIcLkJpb1NlcnZpY2UuRmluZ2VycHJpbnRJbWFnZRocLkJpb1NlcnZp", 
            "Y2UuRmluZ2VycHJpbnRJbWFnZSIAElEKEVJlbW92ZUZpbmdlcnByaW50Ehwu", 
            "QmlvU2VydmljZS5GaW5nZXJwcmludEltYWdlGhwuQmlvU2VydmljZS5GaW5n", 
            "ZXJwcmludEltYWdlIgASUQoRVXBkYXRlRmluZ2VycHJpbnQSHC5CaW9TZXJ2", 
            "aWNlLkZpbmdlcnByaW50SW1hZ2UaHC5CaW9TZXJ2aWNlLkZpbmdlcnByaW50", 
            "SW1hZ2UiABI6CglBZGRDbGllbnQSFS5CaW9TZXJ2aWNlLkJpb0NsaWVudBoU", 
            "LkJpb1NlcnZpY2UuUmVzcG9uc2UiABI9CgxSZW1vdmVDbGllbnQSFS5CaW9T", 
            "ZXJ2aWNlLkJpb0NsaWVudBoULkJpb1NlcnZpY2UuUmVzcG9uc2UiAEIPCgdl", 
            "eC5ncnBjogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::BioService.EntityState), typeof(global::BioService.Finger), typeof(global::BioService.Result), typeof(global::BioService.Gender), typeof(global::BioService.Rights), typeof(global::BioService.MessageType), typeof(global::BioService.PhotoSizeType), typeof(global::BioService.PhotoOriginType), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioService.RawIndexes), new[]{ "Indexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Criminal), new[]{ "Id", "Description", "Alert" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FullVisitorData), new[]{ "Visitor", "Face", "Fingerprint" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Person), new[]{ "Id", "Firstname", "Lastname", "Dateofbirth", "Gender", "Country", "City", "Comments", "Rights", "Email", "Thumbnailid", "Criminal", "Cards", "Photos", "Thumbnail", "BiometricData", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.AccessDevice), new[]{ "Id", "Locationid", "Portname", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CaptureDevice), new[]{ "Id", "Locationid", "Devicename", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FingerprintDevice), new[]{ "Id", "Locationid", "Devicename", "SerialNumber", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Card), new[]{ "Id", "Personid", "UniqueNumber", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Location), new[]{ "Id", "LocationName", "Description", "MacAddress", "AccessType", "CaptureDevice", "AccessDevice", "FingerprintDevice", "Persons", "EntityState", "Dbresult" }, null, new[]{ typeof(global::BioService.Location.Types.AccessType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.LogRecord), new[]{ "MessageType", "DetectedTime", "ExceptionMessage", "ClassName", "FunctionName", "LineNumber", "Comment" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BiometricLocation), new[]{ "Xpos", "Ypos", "Confidence", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EyesCharacteristic), new[]{ "Id", "LeftEye", "RightEye", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PortraitCharacteristic), new[]{ "Faces" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FaceCharacteristic), new[]{ "Id", "Width", "Age", "Gender", "Location", "Eyes", "Template", "Personid", "Photoid", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FingerprintCharacteristic), new[]{ "Id", "Position", "Template", "Personid", "Photoid", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BioIdentificationRecord), new[]{ "BirUrl", "BirBytestring" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BioPersonData), new[]{ "PersonId", "Faces", "Fingerprints" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BiometricData), new[]{ "Id", "Faces", "Fingerprints" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FacialImage), new[]{ "OwnerBiometricDataId", "Image", "Faces", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.FingerprintImage), new[]{ "OwnerBiometricDataId", "Image", "Fingerprint", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Photo), new[]{ "Id", "Datetime", "PhotoUrl", "Bytestring", "Width", "Height", "OriginType", "SizeType", "OwnerId", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Visitor), new[]{ "Id", "Personid", "Locationid", "Time", "CardNumber", "Status", "BiometricData", "EntityState", "Dbresult" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VisitorList), new[]{ "Visitors" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.LocationList), new[]{ "Locations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PersonList), new[]{ "Persons" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PhotoList), new[]{ "Photos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BiometricDataList), new[]{ "Data" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Response), new[]{ "Good" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.IdentificationData), new[]{ "Images", "Population" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationData), new[]{ "Images", "Person" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentData), new[]{ "Images", "Person" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentFeedback), new[]{ "Progress", "Success", "Data" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationFeedback), new[]{ "EnrollmentFeedback", "Match" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.QueryPhoto), new[]{ "Fields", "Persons", "Photos", "ItemsPerPage" }, null, new[]{ typeof(global::BioService.QueryPhoto.Types.TargetPhotoFields) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.QueryPersons), new[]{ "Count" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.QueryLocations), new[]{ "Count" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.QueryVisitors), new[]{ "Countries", "Locations", "Persons", "DatetimeFrom", "DatetimeTo", "ItemsPerPage" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.SocketConfiguration), new[]{ "Address" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.BioClient), new[]{ "IpAddress", "PortNumber", "MacAddress" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EntityState {
    Unchanged = 0,
    Added = 1,
    Modified = 2,
    Deleted = 3,
  }

  public enum Finger {
    Any = 0,
    RightThumb = 1,
    RightIndex = 3,
    LeftIndex = 4,
    RightMiddle = 5,
    LeftMiddle = 6,
    RightRing = 7,
    LeftRing = 8,
    RightLittle = 9,
    LeftLittle = 10,
  }

  public enum Result {
    Success = 0,
    Failed = 1,
  }

  public enum Gender {
    None = 0,
    Male = 1,
    Female = 2,
  }

  public enum Rights {
    Custom = 0,
    Operator = 1,
    Manager = 2,
    Supervisor = 3,
  }

  public enum MessageType {
    Information = 0,
    Error = 1,
    Warning = 2,
  }

  public enum PhotoSizeType {
    Full = 0,
    Croped = 1,
  }

  public enum PhotoOriginType {
    Enrolled = 0,
    Verified = 1,
    Thumbnail = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RawIndexes : pb::IMessage<RawIndexes> {
    private static readonly pb::MessageParser<RawIndexes> _parser = new pb::MessageParser<RawIndexes>(() => new RawIndexes());
    public static pb::MessageParser<RawIndexes> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RawIndexes() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RawIndexes(RawIndexes other) : this() {
      indexes_ = other.indexes_.Clone();
    }

    public RawIndexes Clone() {
      return new RawIndexes(this);
    }

    public const int IndexesFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_indexes_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> indexes_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Indexes {
      get { return indexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as RawIndexes);
    }

    public bool Equals(RawIndexes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!indexes_.Equals(other.indexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= indexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      indexes_.WriteTo(output, _repeated_indexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += indexes_.CalculateSize(_repeated_indexes_codec);
      return size;
    }

    public void MergeFrom(RawIndexes other) {
      if (other == null) {
        return;
      }
      indexes_.Add(other.indexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            indexes_.AddEntriesFrom(input, _repeated_indexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Criminal : pb::IMessage<Criminal> {
    private static readonly pb::MessageParser<Criminal> _parser = new pb::MessageParser<Criminal>(() => new Criminal());
    public static pb::MessageParser<Criminal> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Criminal() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Criminal(Criminal other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      alert_ = other.alert_;
    }

    public Criminal Clone() {
      return new Criminal(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AlertFieldNumber = 3;
    private string alert_ = "";
    public string Alert {
      get { return alert_; }
      set {
        alert_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Criminal);
    }

    public bool Equals(Criminal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (Alert != other.Alert) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Alert.Length != 0) hash ^= Alert.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Alert.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alert);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Alert.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alert);
      }
      return size;
    }

    public void MergeFrom(Criminal other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Alert.Length != 0) {
        Alert = other.Alert;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Alert = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FullVisitorData : pb::IMessage<FullVisitorData> {
    private static readonly pb::MessageParser<FullVisitorData> _parser = new pb::MessageParser<FullVisitorData>(() => new FullVisitorData());
    public static pb::MessageParser<FullVisitorData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FullVisitorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FullVisitorData(FullVisitorData other) : this() {
      Visitor = other.visitor_ != null ? other.Visitor.Clone() : null;
      Face = other.face_ != null ? other.Face.Clone() : null;
      Fingerprint = other.fingerprint_ != null ? other.Fingerprint.Clone() : null;
    }

    public FullVisitorData Clone() {
      return new FullVisitorData(this);
    }

    public const int VisitorFieldNumber = 1;
    private global::BioService.Visitor visitor_;
    public global::BioService.Visitor Visitor {
      get { return visitor_; }
      set {
        visitor_ = value;
      }
    }

    public const int FaceFieldNumber = 2;
    private global::BioService.FacialImage face_;
    public global::BioService.FacialImage Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    public const int FingerprintFieldNumber = 3;
    private global::BioService.FingerprintImage fingerprint_;
    public global::BioService.FingerprintImage Fingerprint {
      get { return fingerprint_; }
      set {
        fingerprint_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FullVisitorData);
    }

    public bool Equals(FullVisitorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Visitor, other.Visitor)) return false;
      if (!object.Equals(Face, other.Face)) return false;
      if (!object.Equals(Fingerprint, other.Fingerprint)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (visitor_ != null) hash ^= Visitor.GetHashCode();
      if (face_ != null) hash ^= Face.GetHashCode();
      if (fingerprint_ != null) hash ^= Fingerprint.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (visitor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Visitor);
      }
      if (face_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Face);
      }
      if (fingerprint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Fingerprint);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (visitor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visitor);
      }
      if (face_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Face);
      }
      if (fingerprint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fingerprint);
      }
      return size;
    }

    public void MergeFrom(FullVisitorData other) {
      if (other == null) {
        return;
      }
      if (other.visitor_ != null) {
        if (visitor_ == null) {
          visitor_ = new global::BioService.Visitor();
        }
        Visitor.MergeFrom(other.Visitor);
      }
      if (other.face_ != null) {
        if (face_ == null) {
          face_ = new global::BioService.FacialImage();
        }
        Face.MergeFrom(other.Face);
      }
      if (other.fingerprint_ != null) {
        if (fingerprint_ == null) {
          fingerprint_ = new global::BioService.FingerprintImage();
        }
        Fingerprint.MergeFrom(other.Fingerprint);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (visitor_ == null) {
              visitor_ = new global::BioService.Visitor();
            }
            input.ReadMessage(visitor_);
            break;
          }
          case 18: {
            if (face_ == null) {
              face_ = new global::BioService.FacialImage();
            }
            input.ReadMessage(face_);
            break;
          }
          case 26: {
            if (fingerprint_ == null) {
              fingerprint_ = new global::BioService.FingerprintImage();
            }
            input.ReadMessage(fingerprint_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Person(Person other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      dateofbirth_ = other.dateofbirth_;
      gender_ = other.gender_;
      country_ = other.country_;
      city_ = other.city_;
      comments_ = other.comments_;
      rights_ = other.rights_;
      email_ = other.email_;
      thumbnailid_ = other.thumbnailid_;
      Criminal = other.criminal_ != null ? other.Criminal.Clone() : null;
      cards_ = other.cards_.Clone();
      photos_ = other.photos_.Clone();
      Thumbnail = other.thumbnail_ != null ? other.Thumbnail.Clone() : null;
      BiometricData = other.biometricData_ != null ? other.BiometricData.Clone() : null;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Person Clone() {
      return new Person(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DateofbirthFieldNumber = 4;
    private long dateofbirth_;
    public long Dateofbirth {
      get { return dateofbirth_; }
      set {
        dateofbirth_ = value;
      }
    }

    public const int GenderFieldNumber = 5;
    private global::BioService.Gender gender_ = global::BioService.Gender.None;
    public global::BioService.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    public const int CountryFieldNumber = 6;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CityFieldNumber = 7;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CommentsFieldNumber = 8;
    private string comments_ = "";
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RightsFieldNumber = 9;
    private global::BioService.Rights rights_ = global::BioService.Rights.Custom;
    public global::BioService.Rights Rights {
      get { return rights_; }
      set {
        rights_ = value;
      }
    }

    public const int EmailFieldNumber = 10;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ThumbnailidFieldNumber = 11;
    private long thumbnailid_;
    public long Thumbnailid {
      get { return thumbnailid_; }
      set {
        thumbnailid_ = value;
      }
    }

    public const int CriminalFieldNumber = 12;
    private global::BioService.Criminal criminal_;
    public global::BioService.Criminal Criminal {
      get { return criminal_; }
      set {
        criminal_ = value;
      }
    }

    public const int CardsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::BioService.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(106, global::BioService.Card.Parser);
    private readonly pbc::RepeatedField<global::BioService.Card> cards_ = new pbc::RepeatedField<global::BioService.Card>();
    public pbc::RepeatedField<global::BioService.Card> Cards {
      get { return cards_; }
    }

    public const int PhotosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(114, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> photos_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Photos {
      get { return photos_; }
    }

    public const int ThumbnailFieldNumber = 15;
    private global::BioService.Photo thumbnail_;
    public global::BioService.Photo Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = value;
      }
    }

    public const int BiometricDataFieldNumber = 16;
    private global::BioService.BiometricData biometricData_;
    public global::BioService.BiometricData BiometricData {
      get { return biometricData_; }
      set {
        biometricData_ = value;
      }
    }

    public const int EntityStateFieldNumber = 17;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 18;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Dateofbirth != other.Dateofbirth) return false;
      if (Gender != other.Gender) return false;
      if (Country != other.Country) return false;
      if (City != other.City) return false;
      if (Comments != other.Comments) return false;
      if (Rights != other.Rights) return false;
      if (Email != other.Email) return false;
      if (Thumbnailid != other.Thumbnailid) return false;
      if (!object.Equals(Criminal, other.Criminal)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!photos_.Equals(other.photos_)) return false;
      if (!object.Equals(Thumbnail, other.Thumbnail)) return false;
      if (!object.Equals(BiometricData, other.BiometricData)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Dateofbirth != 0L) hash ^= Dateofbirth.GetHashCode();
      if (Gender != global::BioService.Gender.None) hash ^= Gender.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Rights != global::BioService.Rights.Custom) hash ^= Rights.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Thumbnailid != 0L) hash ^= Thumbnailid.GetHashCode();
      if (criminal_ != null) hash ^= Criminal.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= photos_.GetHashCode();
      if (thumbnail_ != null) hash ^= Thumbnail.GetHashCode();
      if (biometricData_ != null) hash ^= BiometricData.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Dateofbirth != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Dateofbirth);
      }
      if (Gender != global::BioService.Gender.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Gender);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (City.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(City);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Comments);
      }
      if (Rights != global::BioService.Rights.Custom) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Rights);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Email);
      }
      if (Thumbnailid != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Thumbnailid);
      }
      if (criminal_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Criminal);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      photos_.WriteTo(output, _repeated_photos_codec);
      if (thumbnail_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Thumbnail);
      }
      if (biometricData_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BiometricData);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Dateofbirth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dateofbirth);
      }
      if (Gender != global::BioService.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Rights != global::BioService.Rights.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rights);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Thumbnailid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Thumbnailid);
      }
      if (criminal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criminal);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += photos_.CalculateSize(_repeated_photos_codec);
      if (thumbnail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thumbnail);
      }
      if (biometricData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiometricData);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Dateofbirth != 0L) {
        Dateofbirth = other.Dateofbirth;
      }
      if (other.Gender != global::BioService.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Rights != global::BioService.Rights.Custom) {
        Rights = other.Rights;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Thumbnailid != 0L) {
        Thumbnailid = other.Thumbnailid;
      }
      if (other.criminal_ != null) {
        if (criminal_ == null) {
          criminal_ = new global::BioService.Criminal();
        }
        Criminal.MergeFrom(other.Criminal);
      }
      cards_.Add(other.cards_);
      photos_.Add(other.photos_);
      if (other.thumbnail_ != null) {
        if (thumbnail_ == null) {
          thumbnail_ = new global::BioService.Photo();
        }
        Thumbnail.MergeFrom(other.Thumbnail);
      }
      if (other.biometricData_ != null) {
        if (biometricData_ == null) {
          biometricData_ = new global::BioService.BiometricData();
        }
        BiometricData.MergeFrom(other.BiometricData);
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 32: {
            Dateofbirth = input.ReadInt64();
            break;
          }
          case 40: {
            gender_ = (global::BioService.Gender) input.ReadEnum();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
          case 58: {
            City = input.ReadString();
            break;
          }
          case 66: {
            Comments = input.ReadString();
            break;
          }
          case 72: {
            rights_ = (global::BioService.Rights) input.ReadEnum();
            break;
          }
          case 82: {
            Email = input.ReadString();
            break;
          }
          case 88: {
            Thumbnailid = input.ReadInt64();
            break;
          }
          case 98: {
            if (criminal_ == null) {
              criminal_ = new global::BioService.Criminal();
            }
            input.ReadMessage(criminal_);
            break;
          }
          case 106: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 114: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
          case 122: {
            if (thumbnail_ == null) {
              thumbnail_ = new global::BioService.Photo();
            }
            input.ReadMessage(thumbnail_);
            break;
          }
          case 130: {
            if (biometricData_ == null) {
              biometricData_ = new global::BioService.BiometricData();
            }
            input.ReadMessage(biometricData_);
            break;
          }
          case 136: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 144: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDevice : pb::IMessage<AccessDevice> {
    private static readonly pb::MessageParser<AccessDevice> _parser = new pb::MessageParser<AccessDevice>(() => new AccessDevice());
    public static pb::MessageParser<AccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDevice(AccessDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      portname_ = other.portname_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public AccessDevice Clone() {
      return new AccessDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int PortnameFieldNumber = 3;
    private string portname_ = "";
    public string Portname {
      get { return portname_; }
      set {
        portname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 5;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 6;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDevice);
    }

    public bool Equals(AccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Portname != other.Portname) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Portname.Length != 0) hash ^= Portname.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Portname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Portname);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Portname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Portname);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(AccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Portname.Length != 0) {
        Portname = other.Portname;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Portname = input.ReadString();
            break;
          }
          case 40: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 48: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDevice : pb::IMessage<CaptureDevice> {
    private static readonly pb::MessageParser<CaptureDevice> _parser = new pb::MessageParser<CaptureDevice>(() => new CaptureDevice());
    public static pb::MessageParser<CaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDevice(CaptureDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      devicename_ = other.devicename_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public CaptureDevice Clone() {
      return new CaptureDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int DevicenameFieldNumber = 3;
    private string devicename_ = "";
    public string Devicename {
      get { return devicename_; }
      set {
        devicename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDevice);
    }

    public bool Equals(CaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Devicename != other.Devicename) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Devicename.Length != 0) hash ^= Devicename.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Devicename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Devicename);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Devicename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Devicename);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(CaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Devicename.Length != 0) {
        Devicename = other.Devicename;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Devicename = input.ReadString();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FingerprintDevice : pb::IMessage<FingerprintDevice> {
    private static readonly pb::MessageParser<FingerprintDevice> _parser = new pb::MessageParser<FingerprintDevice>(() => new FingerprintDevice());
    public static pb::MessageParser<FingerprintDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FingerprintDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FingerprintDevice(FingerprintDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      devicename_ = other.devicename_;
      serialNumber_ = other.serialNumber_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public FingerprintDevice Clone() {
      return new FingerprintDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int DevicenameFieldNumber = 3;
    private string devicename_ = "";
    public string Devicename {
      get { return devicename_; }
      set {
        devicename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SerialNumberFieldNumber = 4;
    private string serialNumber_ = "";
    public string SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 5;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 6;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FingerprintDevice);
    }

    public bool Equals(FingerprintDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Devicename != other.Devicename) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Devicename.Length != 0) hash ^= Devicename.GetHashCode();
      if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Devicename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Devicename);
      }
      if (SerialNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SerialNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Devicename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Devicename);
      }
      if (SerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(FingerprintDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Devicename.Length != 0) {
        Devicename = other.Devicename;
      }
      if (other.SerialNumber.Length != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Devicename = input.ReadString();
            break;
          }
          case 34: {
            SerialNumber = input.ReadString();
            break;
          }
          case 40: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 48: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Card(Card other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      uniqueNumber_ = other.uniqueNumber_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Card Clone() {
      return new Card(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int UniqueNumberFieldNumber = 3;
    private string uniqueNumber_ = "";
    public string UniqueNumber {
      get { return uniqueNumber_; }
      set {
        uniqueNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (UniqueNumber != other.UniqueNumber) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (UniqueNumber.Length != 0) hash ^= UniqueNumber.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (UniqueNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (UniqueNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueNumber);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.UniqueNumber.Length != 0) {
        UniqueNumber = other.UniqueNumber;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 26: {
            UniqueNumber = input.ReadString();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Location(Location other) : this() {
      id_ = other.id_;
      locationName_ = other.locationName_;
      description_ = other.description_;
      macAddress_ = other.macAddress_;
      accessType_ = other.accessType_;
      CaptureDevice = other.captureDevice_ != null ? other.CaptureDevice.Clone() : null;
      AccessDevice = other.accessDevice_ != null ? other.AccessDevice.Clone() : null;
      FingerprintDevice = other.fingerprintDevice_ != null ? other.FingerprintDevice.Clone() : null;
      persons_ = other.persons_.Clone();
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Location Clone() {
      return new Location(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationNameFieldNumber = 2;
    private string locationName_ = "";
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MacAddressFieldNumber = 4;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AccessTypeFieldNumber = 5;
    private global::BioService.Location.Types.AccessType accessType_ = global::BioService.Location.Types.AccessType.None;
    public global::BioService.Location.Types.AccessType AccessType {
      get { return accessType_; }
      set {
        accessType_ = value;
      }
    }

    public const int CaptureDeviceFieldNumber = 6;
    private global::BioService.CaptureDevice captureDevice_;
    public global::BioService.CaptureDevice CaptureDevice {
      get { return captureDevice_; }
      set {
        captureDevice_ = value;
      }
    }

    public const int AccessDeviceFieldNumber = 7;
    private global::BioService.AccessDevice accessDevice_;
    public global::BioService.AccessDevice AccessDevice {
      get { return accessDevice_; }
      set {
        accessDevice_ = value;
      }
    }

    public const int FingerprintDeviceFieldNumber = 8;
    private global::BioService.FingerprintDevice fingerprintDevice_;
    public global::BioService.FingerprintDevice FingerprintDevice {
      get { return fingerprintDevice_; }
      set {
        fingerprintDevice_ = value;
      }
    }

    public const int PersonsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(74, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> persons_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> Persons {
      get { return persons_; }
    }

    public const int EntityStateFieldNumber = 10;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 11;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LocationName != other.LocationName) return false;
      if (Description != other.Description) return false;
      if (MacAddress != other.MacAddress) return false;
      if (AccessType != other.AccessType) return false;
      if (!object.Equals(CaptureDevice, other.CaptureDevice)) return false;
      if (!object.Equals(AccessDevice, other.AccessDevice)) return false;
      if (!object.Equals(FingerprintDevice, other.FingerprintDevice)) return false;
      if(!persons_.Equals(other.persons_)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (AccessType != global::BioService.Location.Types.AccessType.None) hash ^= AccessType.GetHashCode();
      if (captureDevice_ != null) hash ^= CaptureDevice.GetHashCode();
      if (accessDevice_ != null) hash ^= AccessDevice.GetHashCode();
      if (fingerprintDevice_ != null) hash ^= FingerprintDevice.GetHashCode();
      hash ^= persons_.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocationName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MacAddress);
      }
      if (AccessType != global::BioService.Location.Types.AccessType.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AccessType);
      }
      if (captureDevice_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CaptureDevice);
      }
      if (accessDevice_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AccessDevice);
      }
      if (fingerprintDevice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FingerprintDevice);
      }
      persons_.WriteTo(output, _repeated_persons_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(80);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (AccessType != global::BioService.Location.Types.AccessType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccessType);
      }
      if (captureDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureDevice);
      }
      if (accessDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessDevice);
      }
      if (fingerprintDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FingerprintDevice);
      }
      size += persons_.CalculateSize(_repeated_persons_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.AccessType != global::BioService.Location.Types.AccessType.None) {
        AccessType = other.AccessType;
      }
      if (other.captureDevice_ != null) {
        if (captureDevice_ == null) {
          captureDevice_ = new global::BioService.CaptureDevice();
        }
        CaptureDevice.MergeFrom(other.CaptureDevice);
      }
      if (other.accessDevice_ != null) {
        if (accessDevice_ == null) {
          accessDevice_ = new global::BioService.AccessDevice();
        }
        AccessDevice.MergeFrom(other.AccessDevice);
      }
      if (other.fingerprintDevice_ != null) {
        if (fingerprintDevice_ == null) {
          fingerprintDevice_ = new global::BioService.FingerprintDevice();
        }
        FingerprintDevice.MergeFrom(other.FingerprintDevice);
      }
      persons_.Add(other.persons_);
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            LocationName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            MacAddress = input.ReadString();
            break;
          }
          case 40: {
            accessType_ = (global::BioService.Location.Types.AccessType) input.ReadEnum();
            break;
          }
          case 50: {
            if (captureDevice_ == null) {
              captureDevice_ = new global::BioService.CaptureDevice();
            }
            input.ReadMessage(captureDevice_);
            break;
          }
          case 58: {
            if (accessDevice_ == null) {
              accessDevice_ = new global::BioService.AccessDevice();
            }
            input.ReadMessage(accessDevice_);
            break;
          }
          case 66: {
            if (fingerprintDevice_ == null) {
              fingerprintDevice_ = new global::BioService.FingerprintDevice();
            }
            input.ReadMessage(fingerprintDevice_);
            break;
          }
          case 74: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
          case 80: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 88: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AccessType {
        None = 0,
        All = 1,
        Custom = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogRecord : pb::IMessage<LogRecord> {
    private static readonly pb::MessageParser<LogRecord> _parser = new pb::MessageParser<LogRecord>(() => new LogRecord());
    public static pb::MessageParser<LogRecord> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LogRecord(LogRecord other) : this() {
      messageType_ = other.messageType_;
      detectedTime_ = other.detectedTime_;
      exceptionMessage_ = other.exceptionMessage_;
      className_ = other.className_;
      functionName_ = other.functionName_;
      lineNumber_ = other.lineNumber_;
      comment_ = other.comment_;
    }

    public LogRecord Clone() {
      return new LogRecord(this);
    }

    public const int MessageTypeFieldNumber = 1;
    private global::BioService.MessageType messageType_ = global::BioService.MessageType.Information;
    public global::BioService.MessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    public const int DetectedTimeFieldNumber = 2;
    private long detectedTime_;
    public long DetectedTime {
      get { return detectedTime_; }
      set {
        detectedTime_ = value;
      }
    }

    public const int ExceptionMessageFieldNumber = 3;
    private string exceptionMessage_ = "";
    public string ExceptionMessage {
      get { return exceptionMessage_; }
      set {
        exceptionMessage_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ClassNameFieldNumber = 4;
    private string className_ = "";
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FunctionNameFieldNumber = 5;
    private string functionName_ = "";
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LineNumberFieldNumber = 6;
    private long lineNumber_;
    public long LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    public const int CommentFieldNumber = 7;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as LogRecord);
    }

    public bool Equals(LogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (DetectedTime != other.DetectedTime) return false;
      if (ExceptionMessage != other.ExceptionMessage) return false;
      if (ClassName != other.ClassName) return false;
      if (FunctionName != other.FunctionName) return false;
      if (LineNumber != other.LineNumber) return false;
      if (Comment != other.Comment) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != global::BioService.MessageType.Information) hash ^= MessageType.GetHashCode();
      if (DetectedTime != 0L) hash ^= DetectedTime.GetHashCode();
      if (ExceptionMessage.Length != 0) hash ^= ExceptionMessage.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      if (LineNumber != 0L) hash ^= LineNumber.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageType != global::BioService.MessageType.Information) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (DetectedTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DetectedTime);
      }
      if (ExceptionMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExceptionMessage);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassName);
      }
      if (FunctionName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FunctionName);
      }
      if (LineNumber != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LineNumber);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageType != global::BioService.MessageType.Information) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (DetectedTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DetectedTime);
      }
      if (ExceptionMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionMessage);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      if (LineNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineNumber);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      return size;
    }

    public void MergeFrom(LogRecord other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != global::BioService.MessageType.Information) {
        MessageType = other.MessageType;
      }
      if (other.DetectedTime != 0L) {
        DetectedTime = other.DetectedTime;
      }
      if (other.ExceptionMessage.Length != 0) {
        ExceptionMessage = other.ExceptionMessage;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
      if (other.LineNumber != 0L) {
        LineNumber = other.LineNumber;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            messageType_ = (global::BioService.MessageType) input.ReadEnum();
            break;
          }
          case 16: {
            DetectedTime = input.ReadInt64();
            break;
          }
          case 26: {
            ExceptionMessage = input.ReadString();
            break;
          }
          case 34: {
            ClassName = input.ReadString();
            break;
          }
          case 42: {
            FunctionName = input.ReadString();
            break;
          }
          case 48: {
            LineNumber = input.ReadInt64();
            break;
          }
          case 58: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricLocation : pb::IMessage<BiometricLocation> {
    private static readonly pb::MessageParser<BiometricLocation> _parser = new pb::MessageParser<BiometricLocation>(() => new BiometricLocation());
    public static pb::MessageParser<BiometricLocation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricLocation(BiometricLocation other) : this() {
      xpos_ = other.xpos_;
      ypos_ = other.ypos_;
      confidence_ = other.confidence_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public BiometricLocation Clone() {
      return new BiometricLocation(this);
    }

    public const int XposFieldNumber = 1;
    private float xpos_;
    public float Xpos {
      get { return xpos_; }
      set {
        xpos_ = value;
      }
    }

    public const int YposFieldNumber = 2;
    private float ypos_;
    public float Ypos {
      get { return ypos_; }
      set {
        ypos_ = value;
      }
    }

    public const int ConfidenceFieldNumber = 3;
    private float confidence_;
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricLocation);
    }

    public bool Equals(BiometricLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Xpos != other.Xpos) return false;
      if (Ypos != other.Ypos) return false;
      if (Confidence != other.Confidence) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Xpos != 0F) hash ^= Xpos.GetHashCode();
      if (Ypos != 0F) hash ^= Ypos.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Xpos != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Xpos);
      }
      if (Ypos != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Ypos);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Confidence);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Xpos != 0F) {
        size += 1 + 4;
      }
      if (Ypos != 0F) {
        size += 1 + 4;
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(BiometricLocation other) {
      if (other == null) {
        return;
      }
      if (other.Xpos != 0F) {
        Xpos = other.Xpos;
      }
      if (other.Ypos != 0F) {
        Ypos = other.Ypos;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Xpos = input.ReadFloat();
            break;
          }
          case 21: {
            Ypos = input.ReadFloat();
            break;
          }
          case 29: {
            Confidence = input.ReadFloat();
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EyesCharacteristic : pb::IMessage<EyesCharacteristic> {
    private static readonly pb::MessageParser<EyesCharacteristic> _parser = new pb::MessageParser<EyesCharacteristic>(() => new EyesCharacteristic());
    public static pb::MessageParser<EyesCharacteristic> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EyesCharacteristic() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EyesCharacteristic(EyesCharacteristic other) : this() {
      id_ = other.id_;
      LeftEye = other.leftEye_ != null ? other.LeftEye.Clone() : null;
      RightEye = other.rightEye_ != null ? other.RightEye.Clone() : null;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public EyesCharacteristic Clone() {
      return new EyesCharacteristic(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LeftEyeFieldNumber = 2;
    private global::BioService.BiometricLocation leftEye_;
    public global::BioService.BiometricLocation LeftEye {
      get { return leftEye_; }
      set {
        leftEye_ = value;
      }
    }

    public const int RightEyeFieldNumber = 3;
    private global::BioService.BiometricLocation rightEye_;
    public global::BioService.BiometricLocation RightEye {
      get { return rightEye_; }
      set {
        rightEye_ = value;
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EyesCharacteristic);
    }

    public bool Equals(EyesCharacteristic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(LeftEye, other.LeftEye)) return false;
      if (!object.Equals(RightEye, other.RightEye)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (leftEye_ != null) hash ^= LeftEye.GetHashCode();
      if (rightEye_ != null) hash ^= RightEye.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (leftEye_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeftEye);
      }
      if (rightEye_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RightEye);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (leftEye_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftEye);
      }
      if (rightEye_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightEye);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(EyesCharacteristic other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.leftEye_ != null) {
        if (leftEye_ == null) {
          leftEye_ = new global::BioService.BiometricLocation();
        }
        LeftEye.MergeFrom(other.LeftEye);
      }
      if (other.rightEye_ != null) {
        if (rightEye_ == null) {
          rightEye_ = new global::BioService.BiometricLocation();
        }
        RightEye.MergeFrom(other.RightEye);
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (leftEye_ == null) {
              leftEye_ = new global::BioService.BiometricLocation();
            }
            input.ReadMessage(leftEye_);
            break;
          }
          case 26: {
            if (rightEye_ == null) {
              rightEye_ = new global::BioService.BiometricLocation();
            }
            input.ReadMessage(rightEye_);
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PortraitCharacteristic : pb::IMessage<PortraitCharacteristic> {
    private static readonly pb::MessageParser<PortraitCharacteristic> _parser = new pb::MessageParser<PortraitCharacteristic>(() => new PortraitCharacteristic());
    public static pb::MessageParser<PortraitCharacteristic> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PortraitCharacteristic() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PortraitCharacteristic(PortraitCharacteristic other) : this() {
      faces_ = other.faces_.Clone();
    }

    public PortraitCharacteristic Clone() {
      return new PortraitCharacteristic(this);
    }

    public const int FacesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.FaceCharacteristic> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.FaceCharacteristic.Parser);
    private readonly pbc::RepeatedField<global::BioService.FaceCharacteristic> faces_ = new pbc::RepeatedField<global::BioService.FaceCharacteristic>();
    public pbc::RepeatedField<global::BioService.FaceCharacteristic> Faces {
      get { return faces_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PortraitCharacteristic);
    }

    public bool Equals(PortraitCharacteristic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faces_.Equals(other.faces_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= faces_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      faces_.WriteTo(output, _repeated_faces_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += faces_.CalculateSize(_repeated_faces_codec);
      return size;
    }

    public void MergeFrom(PortraitCharacteristic other) {
      if (other == null) {
        return;
      }
      faces_.Add(other.faces_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FaceCharacteristic : pb::IMessage<FaceCharacteristic> {
    private static readonly pb::MessageParser<FaceCharacteristic> _parser = new pb::MessageParser<FaceCharacteristic>(() => new FaceCharacteristic());
    public static pb::MessageParser<FaceCharacteristic> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FaceCharacteristic() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FaceCharacteristic(FaceCharacteristic other) : this() {
      id_ = other.id_;
      width_ = other.width_;
      age_ = other.age_;
      gender_ = other.gender_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      Eyes = other.eyes_ != null ? other.Eyes.Clone() : null;
      Template = other.template_ != null ? other.Template.Clone() : null;
      personid_ = other.personid_;
      photoid_ = other.photoid_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public FaceCharacteristic Clone() {
      return new FaceCharacteristic(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int WidthFieldNumber = 2;
    private float width_;
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    public const int AgeFieldNumber = 3;
    private int age_;
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    public const int GenderFieldNumber = 4;
    private global::BioService.Gender gender_ = global::BioService.Gender.None;
    public global::BioService.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    public const int LocationFieldNumber = 5;
    private global::BioService.BiometricLocation location_;
    public global::BioService.BiometricLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public const int EyesFieldNumber = 6;
    private global::BioService.EyesCharacteristic eyes_;
    public global::BioService.EyesCharacteristic Eyes {
      get { return eyes_; }
      set {
        eyes_ = value;
      }
    }

    public const int TemplateFieldNumber = 7;
    private global::BioService.BioIdentificationRecord template_;
    public global::BioService.BioIdentificationRecord Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    public const int PersonidFieldNumber = 8;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int PhotoidFieldNumber = 9;
    private long photoid_;
    public long Photoid {
      get { return photoid_; }
      set {
        photoid_ = value;
      }
    }

    public const int EntityStateFieldNumber = 10;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 11;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FaceCharacteristic);
    }

    public bool Equals(FaceCharacteristic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Width != other.Width) return false;
      if (Age != other.Age) return false;
      if (Gender != other.Gender) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Eyes, other.Eyes)) return false;
      if (!object.Equals(Template, other.Template)) return false;
      if (Personid != other.Personid) return false;
      if (Photoid != other.Photoid) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Gender != global::BioService.Gender.None) hash ^= Gender.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (eyes_ != null) hash ^= Eyes.GetHashCode();
      if (template_ != null) hash ^= Template.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Photoid != 0L) hash ^= Photoid.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Width != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Width);
      }
      if (Age != 0) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Age);
      }
      if (Gender != global::BioService.Gender.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Gender);
      }
      if (location_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Location);
      }
      if (eyes_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Eyes);
      }
      if (template_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Template);
      }
      if (Personid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Personid);
      }
      if (Photoid != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Photoid);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(80);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Age != 0) {
        size += 1 + 4;
      }
      if (Gender != global::BioService.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (eyes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Eyes);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Photoid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Photoid);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(FaceCharacteristic other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Gender != global::BioService.Gender.None) {
        Gender = other.Gender;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::BioService.BiometricLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.eyes_ != null) {
        if (eyes_ == null) {
          eyes_ = new global::BioService.EyesCharacteristic();
        }
        Eyes.MergeFrom(other.Eyes);
      }
      if (other.template_ != null) {
        if (template_ == null) {
          template_ = new global::BioService.BioIdentificationRecord();
        }
        Template.MergeFrom(other.Template);
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Photoid != 0L) {
        Photoid = other.Photoid;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 21: {
            Width = input.ReadFloat();
            break;
          }
          case 29: {
            Age = input.ReadSFixed32();
            break;
          }
          case 32: {
            gender_ = (global::BioService.Gender) input.ReadEnum();
            break;
          }
          case 42: {
            if (location_ == null) {
              location_ = new global::BioService.BiometricLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 50: {
            if (eyes_ == null) {
              eyes_ = new global::BioService.EyesCharacteristic();
            }
            input.ReadMessage(eyes_);
            break;
          }
          case 58: {
            if (template_ == null) {
              template_ = new global::BioService.BioIdentificationRecord();
            }
            input.ReadMessage(template_);
            break;
          }
          case 64: {
            Personid = input.ReadInt64();
            break;
          }
          case 72: {
            Photoid = input.ReadInt64();
            break;
          }
          case 80: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 88: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FingerprintCharacteristic : pb::IMessage<FingerprintCharacteristic> {
    private static readonly pb::MessageParser<FingerprintCharacteristic> _parser = new pb::MessageParser<FingerprintCharacteristic>(() => new FingerprintCharacteristic());
    public static pb::MessageParser<FingerprintCharacteristic> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FingerprintCharacteristic() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FingerprintCharacteristic(FingerprintCharacteristic other) : this() {
      id_ = other.id_;
      position_ = other.position_;
      Template = other.template_ != null ? other.Template.Clone() : null;
      personid_ = other.personid_;
      photoid_ = other.photoid_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public FingerprintCharacteristic Clone() {
      return new FingerprintCharacteristic(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PositionFieldNumber = 2;
    private global::BioService.Finger position_ = global::BioService.Finger.Any;
    public global::BioService.Finger Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public const int TemplateFieldNumber = 3;
    private global::BioService.BioIdentificationRecord template_;
    public global::BioService.BioIdentificationRecord Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    public const int PersonidFieldNumber = 4;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int PhotoidFieldNumber = 5;
    private long photoid_;
    public long Photoid {
      get { return photoid_; }
      set {
        photoid_ = value;
      }
    }

    public const int EntityStateFieldNumber = 6;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 7;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FingerprintCharacteristic);
    }

    public bool Equals(FingerprintCharacteristic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Template, other.Template)) return false;
      if (Personid != other.Personid) return false;
      if (Photoid != other.Photoid) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Position != global::BioService.Finger.Any) hash ^= Position.GetHashCode();
      if (template_ != null) hash ^= Template.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Photoid != 0L) hash ^= Photoid.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Position != global::BioService.Finger.Any) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Position);
      }
      if (template_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Template);
      }
      if (Personid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Personid);
      }
      if (Photoid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Photoid);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(48);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Position != global::BioService.Finger.Any) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Photoid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Photoid);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(FingerprintCharacteristic other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Position != global::BioService.Finger.Any) {
        Position = other.Position;
      }
      if (other.template_ != null) {
        if (template_ == null) {
          template_ = new global::BioService.BioIdentificationRecord();
        }
        Template.MergeFrom(other.Template);
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Photoid != 0L) {
        Photoid = other.Photoid;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            position_ = (global::BioService.Finger) input.ReadEnum();
            break;
          }
          case 26: {
            if (template_ == null) {
              template_ = new global::BioService.BioIdentificationRecord();
            }
            input.ReadMessage(template_);
            break;
          }
          case 32: {
            Personid = input.ReadInt64();
            break;
          }
          case 40: {
            Photoid = input.ReadInt64();
            break;
          }
          case 48: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 56: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioIdentificationRecord : pb::IMessage<BioIdentificationRecord> {
    private static readonly pb::MessageParser<BioIdentificationRecord> _parser = new pb::MessageParser<BioIdentificationRecord>(() => new BioIdentificationRecord());
    public static pb::MessageParser<BioIdentificationRecord> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioIdentificationRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioIdentificationRecord(BioIdentificationRecord other) : this() {
      birUrl_ = other.birUrl_;
      birBytestring_ = other.birBytestring_;
    }

    public BioIdentificationRecord Clone() {
      return new BioIdentificationRecord(this);
    }

    public const int BirUrlFieldNumber = 1;
    private string birUrl_ = "";
    public string BirUrl {
      get { return birUrl_; }
      set {
        birUrl_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int BirBytestringFieldNumber = 2;
    private pb::ByteString birBytestring_ = pb::ByteString.Empty;
    public pb::ByteString BirBytestring {
      get { return birBytestring_; }
      set {
        birBytestring_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BioIdentificationRecord);
    }

    public bool Equals(BioIdentificationRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BirUrl != other.BirUrl) return false;
      if (BirBytestring != other.BirBytestring) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BirUrl.Length != 0) hash ^= BirUrl.GetHashCode();
      if (BirBytestring.Length != 0) hash ^= BirBytestring.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BirUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BirUrl);
      }
      if (BirBytestring.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BirBytestring);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BirUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BirUrl);
      }
      if (BirBytestring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BirBytestring);
      }
      return size;
    }

    public void MergeFrom(BioIdentificationRecord other) {
      if (other == null) {
        return;
      }
      if (other.BirUrl.Length != 0) {
        BirUrl = other.BirUrl;
      }
      if (other.BirBytestring.Length != 0) {
        BirBytestring = other.BirBytestring;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BirUrl = input.ReadString();
            break;
          }
          case 18: {
            BirBytestring = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioPersonData : pb::IMessage<BioPersonData> {
    private static readonly pb::MessageParser<BioPersonData> _parser = new pb::MessageParser<BioPersonData>(() => new BioPersonData());
    public static pb::MessageParser<BioPersonData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioPersonData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioPersonData(BioPersonData other) : this() {
      personId_ = other.personId_;
      faces_ = other.faces_.Clone();
      fingerprints_ = other.fingerprints_.Clone();
    }

    public BioPersonData Clone() {
      return new BioPersonData(this);
    }

    public const int PersonIdFieldNumber = 1;
    private long personId_;
    public long PersonId {
      get { return personId_; }
      set {
        personId_ = value;
      }
    }

    public const int FacesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BioService.BioIdentificationRecord> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(18, global::BioService.BioIdentificationRecord.Parser);
    private readonly pbc::RepeatedField<global::BioService.BioIdentificationRecord> faces_ = new pbc::RepeatedField<global::BioService.BioIdentificationRecord>();
    public pbc::RepeatedField<global::BioService.BioIdentificationRecord> Faces {
      get { return faces_; }
    }

    public const int FingerprintsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BioService.BioIdentificationRecord> _repeated_fingerprints_codec
        = pb::FieldCodec.ForMessage(26, global::BioService.BioIdentificationRecord.Parser);
    private readonly pbc::RepeatedField<global::BioService.BioIdentificationRecord> fingerprints_ = new pbc::RepeatedField<global::BioService.BioIdentificationRecord>();
    public pbc::RepeatedField<global::BioService.BioIdentificationRecord> Fingerprints {
      get { return fingerprints_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BioPersonData);
    }

    public bool Equals(BioPersonData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersonId != other.PersonId) return false;
      if(!faces_.Equals(other.faces_)) return false;
      if(!fingerprints_.Equals(other.fingerprints_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PersonId != 0L) hash ^= PersonId.GetHashCode();
      hash ^= faces_.GetHashCode();
      hash ^= fingerprints_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PersonId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PersonId);
      }
      faces_.WriteTo(output, _repeated_faces_codec);
      fingerprints_.WriteTo(output, _repeated_fingerprints_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (PersonId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PersonId);
      }
      size += faces_.CalculateSize(_repeated_faces_codec);
      size += fingerprints_.CalculateSize(_repeated_fingerprints_codec);
      return size;
    }

    public void MergeFrom(BioPersonData other) {
      if (other == null) {
        return;
      }
      if (other.PersonId != 0L) {
        PersonId = other.PersonId;
      }
      faces_.Add(other.faces_);
      fingerprints_.Add(other.fingerprints_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PersonId = input.ReadInt64();
            break;
          }
          case 18: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
          case 26: {
            fingerprints_.AddEntriesFrom(input, _repeated_fingerprints_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricData : pb::IMessage<BiometricData> {
    private static readonly pb::MessageParser<BiometricData> _parser = new pb::MessageParser<BiometricData>(() => new BiometricData());
    public static pb::MessageParser<BiometricData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricData(BiometricData other) : this() {
      id_ = other.id_;
      faces_ = other.faces_.Clone();
      fingerprints_ = other.fingerprints_.Clone();
    }

    public BiometricData Clone() {
      return new BiometricData(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int FacesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BioService.FaceCharacteristic> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(18, global::BioService.FaceCharacteristic.Parser);
    private readonly pbc::RepeatedField<global::BioService.FaceCharacteristic> faces_ = new pbc::RepeatedField<global::BioService.FaceCharacteristic>();
    public pbc::RepeatedField<global::BioService.FaceCharacteristic> Faces {
      get { return faces_; }
    }

    public const int FingerprintsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BioService.FingerprintCharacteristic> _repeated_fingerprints_codec
        = pb::FieldCodec.ForMessage(26, global::BioService.FingerprintCharacteristic.Parser);
    private readonly pbc::RepeatedField<global::BioService.FingerprintCharacteristic> fingerprints_ = new pbc::RepeatedField<global::BioService.FingerprintCharacteristic>();
    public pbc::RepeatedField<global::BioService.FingerprintCharacteristic> Fingerprints {
      get { return fingerprints_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricData);
    }

    public bool Equals(BiometricData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!faces_.Equals(other.faces_)) return false;
      if(!fingerprints_.Equals(other.fingerprints_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= faces_.GetHashCode();
      hash ^= fingerprints_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      faces_.WriteTo(output, _repeated_faces_codec);
      fingerprints_.WriteTo(output, _repeated_fingerprints_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += faces_.CalculateSize(_repeated_faces_codec);
      size += fingerprints_.CalculateSize(_repeated_fingerprints_codec);
      return size;
    }

    public void MergeFrom(BiometricData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      faces_.Add(other.faces_);
      fingerprints_.Add(other.fingerprints_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
          case 26: {
            fingerprints_.AddEntriesFrom(input, _repeated_fingerprints_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FacialImage : pb::IMessage<FacialImage> {
    private static readonly pb::MessageParser<FacialImage> _parser = new pb::MessageParser<FacialImage>(() => new FacialImage());
    public static pb::MessageParser<FacialImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FacialImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FacialImage(FacialImage other) : this() {
      ownerBiometricDataId_ = other.ownerBiometricDataId_;
      Image = other.image_ != null ? other.Image.Clone() : null;
      faces_ = other.faces_.Clone();
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public FacialImage Clone() {
      return new FacialImage(this);
    }

    public const int OwnerBiometricDataIdFieldNumber = 1;
    private long ownerBiometricDataId_;
    public long OwnerBiometricDataId {
      get { return ownerBiometricDataId_; }
      set {
        ownerBiometricDataId_ = value;
      }
    }

    public const int ImageFieldNumber = 2;
    private global::BioService.Photo image_;
    public global::BioService.Photo Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    public const int FacesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BioService.FaceCharacteristic> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(26, global::BioService.FaceCharacteristic.Parser);
    private readonly pbc::RepeatedField<global::BioService.FaceCharacteristic> faces_ = new pbc::RepeatedField<global::BioService.FaceCharacteristic>();
    public pbc::RepeatedField<global::BioService.FaceCharacteristic> Faces {
      get { return faces_; }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FacialImage);
    }

    public bool Equals(FacialImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerBiometricDataId != other.OwnerBiometricDataId) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if(!faces_.Equals(other.faces_)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (OwnerBiometricDataId != 0L) hash ^= OwnerBiometricDataId.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      hash ^= faces_.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerBiometricDataId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OwnerBiometricDataId);
      }
      if (image_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Image);
      }
      faces_.WriteTo(output, _repeated_faces_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OwnerBiometricDataId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerBiometricDataId);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      size += faces_.CalculateSize(_repeated_faces_codec);
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(FacialImage other) {
      if (other == null) {
        return;
      }
      if (other.OwnerBiometricDataId != 0L) {
        OwnerBiometricDataId = other.OwnerBiometricDataId;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::BioService.Photo();
        }
        Image.MergeFrom(other.Image);
      }
      faces_.Add(other.faces_);
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OwnerBiometricDataId = input.ReadInt64();
            break;
          }
          case 18: {
            if (image_ == null) {
              image_ = new global::BioService.Photo();
            }
            input.ReadMessage(image_);
            break;
          }
          case 26: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FingerprintImage : pb::IMessage<FingerprintImage> {
    private static readonly pb::MessageParser<FingerprintImage> _parser = new pb::MessageParser<FingerprintImage>(() => new FingerprintImage());
    public static pb::MessageParser<FingerprintImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FingerprintImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FingerprintImage(FingerprintImage other) : this() {
      ownerBiometricDataId_ = other.ownerBiometricDataId_;
      Image = other.image_ != null ? other.Image.Clone() : null;
      Fingerprint = other.fingerprint_ != null ? other.Fingerprint.Clone() : null;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public FingerprintImage Clone() {
      return new FingerprintImage(this);
    }

    public const int OwnerBiometricDataIdFieldNumber = 1;
    private long ownerBiometricDataId_;
    public long OwnerBiometricDataId {
      get { return ownerBiometricDataId_; }
      set {
        ownerBiometricDataId_ = value;
      }
    }

    public const int ImageFieldNumber = 2;
    private global::BioService.Photo image_;
    public global::BioService.Photo Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    public const int FingerprintFieldNumber = 3;
    private global::BioService.FingerprintCharacteristic fingerprint_;
    public global::BioService.FingerprintCharacteristic Fingerprint {
      get { return fingerprint_; }
      set {
        fingerprint_ = value;
      }
    }

    public const int EntityStateFieldNumber = 4;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 5;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FingerprintImage);
    }

    public bool Equals(FingerprintImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerBiometricDataId != other.OwnerBiometricDataId) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Fingerprint, other.Fingerprint)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (OwnerBiometricDataId != 0L) hash ^= OwnerBiometricDataId.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (fingerprint_ != null) hash ^= Fingerprint.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerBiometricDataId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OwnerBiometricDataId);
      }
      if (image_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Image);
      }
      if (fingerprint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Fingerprint);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OwnerBiometricDataId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerBiometricDataId);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (fingerprint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fingerprint);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(FingerprintImage other) {
      if (other == null) {
        return;
      }
      if (other.OwnerBiometricDataId != 0L) {
        OwnerBiometricDataId = other.OwnerBiometricDataId;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::BioService.Photo();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.fingerprint_ != null) {
        if (fingerprint_ == null) {
          fingerprint_ = new global::BioService.FingerprintCharacteristic();
        }
        Fingerprint.MergeFrom(other.Fingerprint);
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OwnerBiometricDataId = input.ReadInt64();
            break;
          }
          case 18: {
            if (image_ == null) {
              image_ = new global::BioService.Photo();
            }
            input.ReadMessage(image_);
            break;
          }
          case 26: {
            if (fingerprint_ == null) {
              fingerprint_ = new global::BioService.FingerprintCharacteristic();
            }
            input.ReadMessage(fingerprint_);
            break;
          }
          case 32: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 40: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photo : pb::IMessage<Photo> {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photo(Photo other) : this() {
      id_ = other.id_;
      datetime_ = other.datetime_;
      photoUrl_ = other.photoUrl_;
      bytestring_ = other.bytestring_;
      width_ = other.width_;
      height_ = other.height_;
      originType_ = other.originType_;
      sizeType_ = other.sizeType_;
      ownerId_ = other.ownerId_;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Photo Clone() {
      return new Photo(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int DatetimeFieldNumber = 3;
    private long datetime_;
    public long Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    public const int PhotoUrlFieldNumber = 4;
    private string photoUrl_ = "";
    public string PhotoUrl {
      get { return photoUrl_; }
      set {
        photoUrl_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int BytestringFieldNumber = 5;
    private pb::ByteString bytestring_ = pb::ByteString.Empty;
    public pb::ByteString Bytestring {
      get { return bytestring_; }
      set {
        bytestring_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int WidthFieldNumber = 6;
    private long width_;
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    public const int HeightFieldNumber = 7;
    private long height_;
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    public const int OriginTypeFieldNumber = 8;
    private global::BioService.PhotoOriginType originType_ = global::BioService.PhotoOriginType.Enrolled;
    public global::BioService.PhotoOriginType OriginType {
      get { return originType_; }
      set {
        originType_ = value;
      }
    }

    public const int SizeTypeFieldNumber = 9;
    private global::BioService.PhotoSizeType sizeType_ = global::BioService.PhotoSizeType.Full;
    public global::BioService.PhotoSizeType SizeType {
      get { return sizeType_; }
      set {
        sizeType_ = value;
      }
    }

    public const int OwnerIdFieldNumber = 10;
    private long ownerId_;
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    public const int EntityStateFieldNumber = 11;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 12;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Datetime != other.Datetime) return false;
      if (PhotoUrl != other.PhotoUrl) return false;
      if (Bytestring != other.Bytestring) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (OriginType != other.OriginType) return false;
      if (SizeType != other.SizeType) return false;
      if (OwnerId != other.OwnerId) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Datetime != 0L) hash ^= Datetime.GetHashCode();
      if (PhotoUrl.Length != 0) hash ^= PhotoUrl.GetHashCode();
      if (Bytestring.Length != 0) hash ^= Bytestring.GetHashCode();
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (OriginType != global::BioService.PhotoOriginType.Enrolled) hash ^= OriginType.GetHashCode();
      if (SizeType != global::BioService.PhotoSizeType.Full) hash ^= SizeType.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Datetime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Datetime);
      }
      if (PhotoUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PhotoUrl);
      }
      if (Bytestring.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Bytestring);
      }
      if (Width != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Width);
      }
      if (Height != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Height);
      }
      if (OriginType != global::BioService.PhotoOriginType.Enrolled) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OriginType);
      }
      if (SizeType != global::BioService.PhotoSizeType.Full) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SizeType);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(OwnerId);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Datetime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Datetime);
      }
      if (PhotoUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoUrl);
      }
      if (Bytestring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytestring);
      }
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (OriginType != global::BioService.PhotoOriginType.Enrolled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OriginType);
      }
      if (SizeType != global::BioService.PhotoSizeType.Full) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SizeType);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Datetime != 0L) {
        Datetime = other.Datetime;
      }
      if (other.PhotoUrl.Length != 0) {
        PhotoUrl = other.PhotoUrl;
      }
      if (other.Bytestring.Length != 0) {
        Bytestring = other.Bytestring;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.OriginType != global::BioService.PhotoOriginType.Enrolled) {
        OriginType = other.OriginType;
      }
      if (other.SizeType != global::BioService.PhotoSizeType.Full) {
        SizeType = other.SizeType;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 24: {
            Datetime = input.ReadInt64();
            break;
          }
          case 34: {
            PhotoUrl = input.ReadString();
            break;
          }
          case 42: {
            Bytestring = input.ReadBytes();
            break;
          }
          case 48: {
            Width = input.ReadInt64();
            break;
          }
          case 56: {
            Height = input.ReadInt64();
            break;
          }
          case 64: {
            originType_ = (global::BioService.PhotoOriginType) input.ReadEnum();
            break;
          }
          case 72: {
            sizeType_ = (global::BioService.PhotoSizeType) input.ReadEnum();
            break;
          }
          case 80: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 88: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 96: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Visitor : pb::IMessage<Visitor> {
    private static readonly pb::MessageParser<Visitor> _parser = new pb::MessageParser<Visitor>(() => new Visitor());
    public static pb::MessageParser<Visitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Visitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Visitor(Visitor other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      locationid_ = other.locationid_;
      time_ = other.time_;
      cardNumber_ = other.cardNumber_;
      status_ = other.status_;
      BiometricData = other.biometricData_ != null ? other.BiometricData.Clone() : null;
      entityState_ = other.entityState_;
      dbresult_ = other.dbresult_;
    }

    public Visitor Clone() {
      return new Visitor(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int LocationidFieldNumber = 3;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int TimeFieldNumber = 4;
    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public const int CardNumberFieldNumber = 5;
    private string cardNumber_ = "";
    public string CardNumber {
      get { return cardNumber_; }
      set {
        cardNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StatusFieldNumber = 6;
    private global::BioService.Result status_ = global::BioService.Result.Success;
    public global::BioService.Result Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public const int BiometricDataFieldNumber = 7;
    private global::BioService.BiometricData biometricData_;
    public global::BioService.BiometricData BiometricData {
      get { return biometricData_; }
      set {
        biometricData_ = value;
      }
    }

    public const int EntityStateFieldNumber = 8;
    private global::BioService.EntityState entityState_ = global::BioService.EntityState.Unchanged;
    public global::BioService.EntityState EntityState {
      get { return entityState_; }
      set {
        entityState_ = value;
      }
    }

    public const int DbresultFieldNumber = 9;
    private global::BioService.Result dbresult_ = global::BioService.Result.Success;
    public global::BioService.Result Dbresult {
      get { return dbresult_; }
      set {
        dbresult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Visitor);
    }

    public bool Equals(Visitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Locationid != other.Locationid) return false;
      if (Time != other.Time) return false;
      if (CardNumber != other.CardNumber) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(BiometricData, other.BiometricData)) return false;
      if (EntityState != other.EntityState) return false;
      if (Dbresult != other.Dbresult) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (CardNumber.Length != 0) hash ^= CardNumber.GetHashCode();
      if (Status != global::BioService.Result.Success) hash ^= Status.GetHashCode();
      if (biometricData_ != null) hash ^= BiometricData.GetHashCode();
      if (EntityState != global::BioService.EntityState.Unchanged) hash ^= EntityState.GetHashCode();
      if (Dbresult != global::BioService.Result.Success) hash ^= Dbresult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Locationid);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (CardNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CardNumber);
      }
      if (Status != global::BioService.Result.Success) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (biometricData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BiometricData);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Dbresult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (CardNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardNumber);
      }
      if (Status != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (biometricData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiometricData);
      }
      if (EntityState != global::BioService.EntityState.Unchanged) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityState);
      }
      if (Dbresult != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbresult);
      }
      return size;
    }

    public void MergeFrom(Visitor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.CardNumber.Length != 0) {
        CardNumber = other.CardNumber;
      }
      if (other.Status != global::BioService.Result.Success) {
        Status = other.Status;
      }
      if (other.biometricData_ != null) {
        if (biometricData_ == null) {
          biometricData_ = new global::BioService.BiometricData();
        }
        BiometricData.MergeFrom(other.BiometricData);
      }
      if (other.EntityState != global::BioService.EntityState.Unchanged) {
        EntityState = other.EntityState;
      }
      if (other.Dbresult != global::BioService.Result.Success) {
        Dbresult = other.Dbresult;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            Locationid = input.ReadInt64();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 42: {
            CardNumber = input.ReadString();
            break;
          }
          case 48: {
            status_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
          case 58: {
            if (biometricData_ == null) {
              biometricData_ = new global::BioService.BiometricData();
            }
            input.ReadMessage(biometricData_);
            break;
          }
          case 64: {
            entityState_ = (global::BioService.EntityState) input.ReadEnum();
            break;
          }
          case 72: {
            dbresult_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VisitorList : pb::IMessage<VisitorList> {
    private static readonly pb::MessageParser<VisitorList> _parser = new pb::MessageParser<VisitorList>(() => new VisitorList());
    public static pb::MessageParser<VisitorList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VisitorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VisitorList(VisitorList other) : this() {
      visitors_ = other.visitors_.Clone();
    }

    public VisitorList Clone() {
      return new VisitorList(this);
    }

    public const int VisitorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Visitor> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Visitor.Parser);
    private readonly pbc::RepeatedField<global::BioService.Visitor> visitors_ = new pbc::RepeatedField<global::BioService.Visitor>();
    public pbc::RepeatedField<global::BioService.Visitor> Visitors {
      get { return visitors_; }
    }

    public override bool Equals(object other) {
      return Equals(other as VisitorList);
    }

    public bool Equals(VisitorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visitors_.Equals(other.visitors_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= visitors_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      visitors_.WriteTo(output, _repeated_visitors_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      return size;
    }

    public void MergeFrom(VisitorList other) {
      if (other == null) {
        return;
      }
      visitors_.Add(other.visitors_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LocationList : pb::IMessage<LocationList> {
    private static readonly pb::MessageParser<LocationList> _parser = new pb::MessageParser<LocationList>(() => new LocationList());
    public static pb::MessageParser<LocationList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LocationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LocationList(LocationList other) : this() {
      locations_ = other.locations_.Clone();
    }

    public LocationList Clone() {
      return new LocationList(this);
    }

    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Location> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Location.Parser);
    private readonly pbc::RepeatedField<global::BioService.Location> locations_ = new pbc::RepeatedField<global::BioService.Location>();
    public pbc::RepeatedField<global::BioService.Location> Locations {
      get { return locations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LocationList);
    }

    public bool Equals(LocationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    public void MergeFrom(LocationList other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonList : pb::IMessage<PersonList> {
    private static readonly pb::MessageParser<PersonList> _parser = new pb::MessageParser<PersonList>(() => new PersonList());
    public static pb::MessageParser<PersonList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PersonList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PersonList(PersonList other) : this() {
      persons_ = other.persons_.Clone();
    }

    public PersonList Clone() {
      return new PersonList(this);
    }

    public const int PersonsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> persons_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> Persons {
      get { return persons_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PersonList);
    }

    public bool Equals(PersonList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!persons_.Equals(other.persons_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= persons_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      persons_.WriteTo(output, _repeated_persons_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += persons_.CalculateSize(_repeated_persons_codec);
      return size;
    }

    public void MergeFrom(PersonList other) {
      if (other == null) {
        return;
      }
      persons_.Add(other.persons_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhotoList : pb::IMessage<PhotoList> {
    private static readonly pb::MessageParser<PhotoList> _parser = new pb::MessageParser<PhotoList>(() => new PhotoList());
    public static pb::MessageParser<PhotoList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PhotoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PhotoList(PhotoList other) : this() {
      photos_ = other.photos_.Clone();
    }

    public PhotoList Clone() {
      return new PhotoList(this);
    }

    public const int PhotosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> photos_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Photos {
      get { return photos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PhotoList);
    }

    public bool Equals(PhotoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!photos_.Equals(other.photos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= photos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      photos_.WriteTo(output, _repeated_photos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += photos_.CalculateSize(_repeated_photos_codec);
      return size;
    }

    public void MergeFrom(PhotoList other) {
      if (other == null) {
        return;
      }
      photos_.Add(other.photos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricDataList : pb::IMessage<BiometricDataList> {
    private static readonly pb::MessageParser<BiometricDataList> _parser = new pb::MessageParser<BiometricDataList>(() => new BiometricDataList());
    public static pb::MessageParser<BiometricDataList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricDataList(BiometricDataList other) : this() {
      data_ = other.data_.Clone();
    }

    public BiometricDataList Clone() {
      return new BiometricDataList(this);
    }

    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.BiometricData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.BiometricData.Parser);
    private readonly pbc::RepeatedField<global::BioService.BiometricData> data_ = new pbc::RepeatedField<global::BioService.BiometricData>();
    public pbc::RepeatedField<global::BioService.BiometricData> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricDataList);
    }

    public bool Equals(BiometricDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(BiometricDataList other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      good_ = other.good_;
    }

    public Response Clone() {
      return new Response(this);
    }

    public const int GoodFieldNumber = 1;
    private global::BioService.Result good_ = global::BioService.Result.Success;
    public global::BioService.Result Good {
      get { return good_; }
      set {
        good_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Good != other.Good) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Good != global::BioService.Result.Success) hash ^= Good.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Good != global::BioService.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Good);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Good != global::BioService.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Good);
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Good != global::BioService.Result.Success) {
        Good = other.Good;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            good_ = (global::BioService.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IdentificationData : pb::IMessage<IdentificationData> {
    private static readonly pb::MessageParser<IdentificationData> _parser = new pb::MessageParser<IdentificationData>(() => new IdentificationData());
    public static pb::MessageParser<IdentificationData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public IdentificationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public IdentificationData(IdentificationData other) : this() {
      images_ = other.images_.Clone();
      population_ = other.population_.Clone();
    }

    public IdentificationData Clone() {
      return new IdentificationData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PopulationFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_population_codec
        = pb::FieldCodec.ForMessage(18, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> population_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> Population {
      get { return population_; }
    }

    public override bool Equals(object other) {
      return Equals(other as IdentificationData);
    }

    public bool Equals(IdentificationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if(!population_.Equals(other.population_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      hash ^= population_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      population_.WriteTo(output, _repeated_population_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      size += population_.CalculateSize(_repeated_population_codec);
      return size;
    }

    public void MergeFrom(IdentificationData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      population_.Add(other.population_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 18: {
            population_.AddEntriesFrom(input, _repeated_population_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationData : pb::IMessage<VerificationData> {
    private static readonly pb::MessageParser<VerificationData> _parser = new pb::MessageParser<VerificationData>(() => new VerificationData());
    public static pb::MessageParser<VerificationData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[29]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationData(VerificationData other) : this() {
      images_ = other.images_.Clone();
      Person = other.person_ != null ? other.Person.Clone() : null;
    }

    public VerificationData Clone() {
      return new VerificationData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonFieldNumber = 2;
    private global::BioService.Person person_;
    public global::BioService.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationData);
    }

    public bool Equals(VerificationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (person_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      return size;
    }

    public void MergeFrom(VerificationData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.person_ != null) {
        if (person_ == null) {
          person_ = new global::BioService.Person();
        }
        Person.MergeFrom(other.Person);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 18: {
            if (person_ == null) {
              person_ = new global::BioService.Person();
            }
            input.ReadMessage(person_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentData : pb::IMessage<EnrollmentData> {
    private static readonly pb::MessageParser<EnrollmentData> _parser = new pb::MessageParser<EnrollmentData>(() => new EnrollmentData());
    public static pb::MessageParser<EnrollmentData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[30]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentData(EnrollmentData other) : this() {
      images_ = other.images_.Clone();
      Person = other.person_ != null ? other.Person.Clone() : null;
    }

    public EnrollmentData Clone() {
      return new EnrollmentData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonFieldNumber = 2;
    private global::BioService.Person person_;
    public global::BioService.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentData);
    }

    public bool Equals(EnrollmentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (person_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      return size;
    }

    public void MergeFrom(EnrollmentData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.person_ != null) {
        if (person_ == null) {
          person_ = new global::BioService.Person();
        }
        Person.MergeFrom(other.Person);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 18: {
            if (person_ == null) {
              person_ = new global::BioService.Person();
            }
            input.ReadMessage(person_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentFeedback : pb::IMessage<EnrollmentFeedback> {
    private static readonly pb::MessageParser<EnrollmentFeedback> _parser = new pb::MessageParser<EnrollmentFeedback>(() => new EnrollmentFeedback());
    public static pb::MessageParser<EnrollmentFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[31]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentFeedback(EnrollmentFeedback other) : this() {
      progress_ = other.progress_;
      success_ = other.success_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    public EnrollmentFeedback Clone() {
      return new EnrollmentFeedback(this);
    }

    public const int ProgressFieldNumber = 1;
    private int progress_;
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public const int SuccessFieldNumber = 2;
    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public const int DataFieldNumber = 3;
    private global::BioService.BiometricData data_;
    public global::BioService.BiometricData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentFeedback);
    }

    public bool Equals(EnrollmentFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      if (Success != other.Success) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Progress);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + 4;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    public void MergeFrom(EnrollmentFeedback other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::BioService.BiometricData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Progress = input.ReadSFixed32();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::BioService.BiometricData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationFeedback : pb::IMessage<VerificationFeedback> {
    private static readonly pb::MessageParser<VerificationFeedback> _parser = new pb::MessageParser<VerificationFeedback>(() => new VerificationFeedback());
    public static pb::MessageParser<VerificationFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[32]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationFeedback(VerificationFeedback other) : this() {
      EnrollmentFeedback = other.enrollmentFeedback_ != null ? other.EnrollmentFeedback.Clone() : null;
      match_ = other.match_;
    }

    public VerificationFeedback Clone() {
      return new VerificationFeedback(this);
    }

    public const int EnrollmentFeedbackFieldNumber = 1;
    private global::BioService.EnrollmentFeedback enrollmentFeedback_;
    public global::BioService.EnrollmentFeedback EnrollmentFeedback {
      get { return enrollmentFeedback_; }
      set {
        enrollmentFeedback_ = value;
      }
    }

    public const int MatchFieldNumber = 2;
    private float match_;
    public float Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationFeedback);
    }

    public bool Equals(VerificationFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnrollmentFeedback, other.EnrollmentFeedback)) return false;
      if (Match != other.Match) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (enrollmentFeedback_ != null) hash ^= EnrollmentFeedback.GetHashCode();
      if (Match != 0F) hash ^= Match.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enrollmentFeedback_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EnrollmentFeedback);
      }
      if (Match != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Match);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (enrollmentFeedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnrollmentFeedback);
      }
      if (Match != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(VerificationFeedback other) {
      if (other == null) {
        return;
      }
      if (other.enrollmentFeedback_ != null) {
        if (enrollmentFeedback_ == null) {
          enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
        }
        EnrollmentFeedback.MergeFrom(other.EnrollmentFeedback);
      }
      if (other.Match != 0F) {
        Match = other.Match;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enrollmentFeedback_ == null) {
              enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
            }
            input.ReadMessage(enrollmentFeedback_);
            break;
          }
          case 21: {
            Match = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryPhoto : pb::IMessage<QueryPhoto> {
    private static readonly pb::MessageParser<QueryPhoto> _parser = new pb::MessageParser<QueryPhoto>(() => new QueryPhoto());
    public static pb::MessageParser<QueryPhoto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[33]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public QueryPhoto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QueryPhoto(QueryPhoto other) : this() {
      fields_ = other.fields_;
      persons_ = other.persons_.Clone();
      photos_ = other.photos_.Clone();
      itemsPerPage_ = other.itemsPerPage_;
    }

    public QueryPhoto Clone() {
      return new QueryPhoto(this);
    }

    public const int FieldsFieldNumber = 1;
    private long fields_;
    public long Fields {
      get { return fields_; }
      set {
        fields_ = value;
      }
    }

    public const int PersonsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_persons_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> persons_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Persons {
      get { return persons_; }
    }

    public const int PhotosFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_photos_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> photos_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Photos {
      get { return photos_; }
    }

    public const int ItemsPerPageFieldNumber = 4;
    private long itemsPerPage_;
    public long ItemsPerPage {
      get { return itemsPerPage_; }
      set {
        itemsPerPage_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as QueryPhoto);
    }

    public bool Equals(QueryPhoto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fields != other.Fields) return false;
      if(!persons_.Equals(other.persons_)) return false;
      if(!photos_.Equals(other.photos_)) return false;
      if (ItemsPerPage != other.ItemsPerPage) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Fields != 0L) hash ^= Fields.GetHashCode();
      hash ^= persons_.GetHashCode();
      hash ^= photos_.GetHashCode();
      if (ItemsPerPage != 0L) hash ^= ItemsPerPage.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fields != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Fields);
      }
      persons_.WriteTo(output, _repeated_persons_codec);
      photos_.WriteTo(output, _repeated_photos_codec);
      if (ItemsPerPage != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ItemsPerPage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Fields != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fields);
      }
      size += persons_.CalculateSize(_repeated_persons_codec);
      size += photos_.CalculateSize(_repeated_photos_codec);
      if (ItemsPerPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemsPerPage);
      }
      return size;
    }

    public void MergeFrom(QueryPhoto other) {
      if (other == null) {
        return;
      }
      if (other.Fields != 0L) {
        Fields = other.Fields;
      }
      persons_.Add(other.persons_);
      photos_.Add(other.photos_);
      if (other.ItemsPerPage != 0L) {
        ItemsPerPage = other.ItemsPerPage;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fields = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
          case 26:
          case 24: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
          case 32: {
            ItemsPerPage = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TargetPhotoFields {
        All = 0,
        Other = 1,
        Bytestring = 2,
        Fir = 4,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryPersons : pb::IMessage<QueryPersons> {
    private static readonly pb::MessageParser<QueryPersons> _parser = new pb::MessageParser<QueryPersons>(() => new QueryPersons());
    public static pb::MessageParser<QueryPersons> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[34]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public QueryPersons() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QueryPersons(QueryPersons other) : this() {
      count_ = other.count_;
    }

    public QueryPersons Clone() {
      return new QueryPersons(this);
    }

    public const int CountFieldNumber = 1;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as QueryPersons);
    }

    public bool Equals(QueryPersons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(QueryPersons other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryLocations : pb::IMessage<QueryLocations> {
    private static readonly pb::MessageParser<QueryLocations> _parser = new pb::MessageParser<QueryLocations>(() => new QueryLocations());
    public static pb::MessageParser<QueryLocations> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[35]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public QueryLocations() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QueryLocations(QueryLocations other) : this() {
      count_ = other.count_;
    }

    public QueryLocations Clone() {
      return new QueryLocations(this);
    }

    public const int CountFieldNumber = 1;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as QueryLocations);
    }

    public bool Equals(QueryLocations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(QueryLocations other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryVisitors : pb::IMessage<QueryVisitors> {
    private static readonly pb::MessageParser<QueryVisitors> _parser = new pb::MessageParser<QueryVisitors>(() => new QueryVisitors());
    public static pb::MessageParser<QueryVisitors> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[36]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public QueryVisitors() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QueryVisitors(QueryVisitors other) : this() {
      countries_ = other.countries_.Clone();
      locations_ = other.locations_.Clone();
      persons_ = other.persons_.Clone();
      datetimeFrom_ = other.datetimeFrom_;
      datetimeTo_ = other.datetimeTo_;
      itemsPerPage_ = other.itemsPerPage_;
    }

    public QueryVisitors Clone() {
      return new QueryVisitors(this);
    }

    public const int CountriesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_countries_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> countries_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Countries {
      get { return countries_; }
    }

    public const int LocationsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_locations_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> locations_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Locations {
      get { return locations_; }
    }

    public const int PersonsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_persons_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> persons_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Persons {
      get { return persons_; }
    }

    public const int DatetimeFromFieldNumber = 5;
    private long datetimeFrom_;
    public long DatetimeFrom {
      get { return datetimeFrom_; }
      set {
        datetimeFrom_ = value;
      }
    }

    public const int DatetimeToFieldNumber = 6;
    private long datetimeTo_;
    public long DatetimeTo {
      get { return datetimeTo_; }
      set {
        datetimeTo_ = value;
      }
    }

    public const int ItemsPerPageFieldNumber = 7;
    private long itemsPerPage_;
    public long ItemsPerPage {
      get { return itemsPerPage_; }
      set {
        itemsPerPage_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as QueryVisitors);
    }

    public bool Equals(QueryVisitors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!countries_.Equals(other.countries_)) return false;
      if(!locations_.Equals(other.locations_)) return false;
      if(!persons_.Equals(other.persons_)) return false;
      if (DatetimeFrom != other.DatetimeFrom) return false;
      if (DatetimeTo != other.DatetimeTo) return false;
      if (ItemsPerPage != other.ItemsPerPage) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= countries_.GetHashCode();
      hash ^= locations_.GetHashCode();
      hash ^= persons_.GetHashCode();
      if (DatetimeFrom != 0L) hash ^= DatetimeFrom.GetHashCode();
      if (DatetimeTo != 0L) hash ^= DatetimeTo.GetHashCode();
      if (ItemsPerPage != 0L) hash ^= ItemsPerPage.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      countries_.WriteTo(output, _repeated_countries_codec);
      locations_.WriteTo(output, _repeated_locations_codec);
      persons_.WriteTo(output, _repeated_persons_codec);
      if (DatetimeFrom != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DatetimeFrom);
      }
      if (DatetimeTo != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(DatetimeTo);
      }
      if (ItemsPerPage != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ItemsPerPage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += countries_.CalculateSize(_repeated_countries_codec);
      size += locations_.CalculateSize(_repeated_locations_codec);
      size += persons_.CalculateSize(_repeated_persons_codec);
      if (DatetimeFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DatetimeFrom);
      }
      if (DatetimeTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DatetimeTo);
      }
      if (ItemsPerPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemsPerPage);
      }
      return size;
    }

    public void MergeFrom(QueryVisitors other) {
      if (other == null) {
        return;
      }
      countries_.Add(other.countries_);
      locations_.Add(other.locations_);
      persons_.Add(other.persons_);
      if (other.DatetimeFrom != 0L) {
        DatetimeFrom = other.DatetimeFrom;
      }
      if (other.DatetimeTo != 0L) {
        DatetimeTo = other.DatetimeTo;
      }
      if (other.ItemsPerPage != 0L) {
        ItemsPerPage = other.ItemsPerPage;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            countries_.AddEntriesFrom(input, _repeated_countries_codec);
            break;
          }
          case 26:
          case 24: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
          case 34:
          case 32: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
          case 40: {
            DatetimeFrom = input.ReadInt64();
            break;
          }
          case 48: {
            DatetimeTo = input.ReadInt64();
            break;
          }
          case 56: {
            ItemsPerPage = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SocketConfiguration : pb::IMessage<SocketConfiguration> {
    private static readonly pb::MessageParser<SocketConfiguration> _parser = new pb::MessageParser<SocketConfiguration>(() => new SocketConfiguration());
    public static pb::MessageParser<SocketConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[37]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SocketConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SocketConfiguration(SocketConfiguration other) : this() {
      address_ = other.address_;
    }

    public SocketConfiguration Clone() {
      return new SocketConfiguration(this);
    }

    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SocketConfiguration);
    }

    public bool Equals(SocketConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    public void MergeFrom(SocketConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioClient : pb::IMessage<BioClient> {
    private static readonly pb::MessageParser<BioClient> _parser = new pb::MessageParser<BioClient>(() => new BioClient());
    public static pb::MessageParser<BioClient> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[38]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioClient(BioClient other) : this() {
      ipAddress_ = other.ipAddress_;
      portNumber_ = other.portNumber_;
      macAddress_ = other.macAddress_;
    }

    public BioClient Clone() {
      return new BioClient(this);
    }

    public const int IpAddressFieldNumber = 1;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PortNumberFieldNumber = 2;
    private long portNumber_;
    public long PortNumber {
      get { return portNumber_; }
      set {
        portNumber_ = value;
      }
    }

    public const int MacAddressFieldNumber = 3;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BioClient);
    }

    public bool Equals(BioClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (PortNumber != other.PortNumber) return false;
      if (MacAddress != other.MacAddress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (PortNumber != 0L) hash ^= PortNumber.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IpAddress);
      }
      if (PortNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PortNumber);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MacAddress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (PortNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PortNumber);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      return size;
    }

    public void MergeFrom(BioClient other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.PortNumber != 0L) {
        PortNumber = other.PortNumber;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IpAddress = input.ReadString();
            break;
          }
          case 16: {
            PortNumber = input.ReadInt64();
            break;
          }
          case 26: {
            MacAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
