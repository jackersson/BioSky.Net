// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioService {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BioService {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BioService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFiaW9fc2VydmljZS5wcm90bxIKQmlvU2VydmljZSL8AgoGUGVyc29uEgoK", 
            "AmlkGAEgASgDEhEKCWZpcnN0bmFtZRgCIAEoCRIQCghsYXN0bmFtZRgDIAEo", 
            "CRITCgtkYXRlb2ZiaXJ0aBgEIAEoAxIpCgZnZW5kZXIYBSABKA4yGS5CaW9T", 
            "ZXJ2aWNlLlBlcnNvbi5HZW5kZXISDwoHY291bnRyeRgGIAEoCRIMCgRjaXR5", 
            "GAcgASgJEhEKCXRodW1ibmFpbBgIIAEoAxIQCghjb21tZW50cxgJIAEoCRIp", 
            "CgZyaWdodHMYCiABKA4yGS5CaW9TZXJ2aWNlLlBlcnNvbi5SaWdodHMSDQoF", 
            "ZW1haWwYCyABKAkSJAoHZGJzdGF0ZRgMIAEoDjITLkJpb1NlcnZpY2UuRGJT", 
            "dGF0ZSIoCgZHZW5kZXISCAoETm9uZRAAEggKBE1hbGUQARIKCgZGZW1hbGUQ", 
            "AiIzCgZSaWdodHMSDAoIT3BlcmF0b3IQABILCgdNYW5hZ2VyEAESDgoKU3Vw", 
            "ZXJ2aXNvchACIuABCgxBY2Nlc3NEZXZpY2USCgoCaWQYASABKAMSEgoKbG9j", 
            "YXRpb25pZBgCIAEoAxIQCghwb3J0bmFtZRgDIAEoCRI3CgR0eXBlGAQgASgO", 
            "MikuQmlvU2VydmljZS5BY2Nlc3NEZXZpY2UuQWNjZXNzRGV2aWNlVHlwZRIk", 
            "CgdkYnN0YXRlGAUgASgOMhMuQmlvU2VydmljZS5EYlN0YXRlIj8KEEFjY2Vz", 
            "c0RldmljZVR5cGUSDgoKRGV2aWNlTm9uZRAAEgwKCERldmljZUluEAESDQoJ", 
            "RGV2aWNlT3V0EAIiaQoNQ2FwdHVyZURldmljZRIKCgJpZBgBIAEoAxISCgps", 
            "b2NhdGlvbmlkGAIgASgDEhIKCmRldmljZW5hbWUYAyABKAkSJAoHZGJzdGF0", 
            "ZRgEIAEoDjITLkJpb1NlcnZpY2UuRGJTdGF0ZSJhCgRDYXJkEgoKAmlkGAEg", 
            "ASgDEhAKCHBlcnNvbmlkGAIgASgDEhUKDXVuaXF1ZV9udW1iZXIYAyABKAkS", 
            "JAoHZGJzdGF0ZRgEIAEoDjITLkJpb1NlcnZpY2UuRGJTdGF0ZSJoCghMb2Nh", 
            "dGlvbhIKCgJpZBgBIAEoAxIVCg1sb2NhdGlvbl9uYW1lGAIgASgJEhMKC2Rl", 
            "c2NyaXB0aW9uGAMgASgJEiQKB2Ric3RhdGUYBCABKA4yEy5CaW9TZXJ2aWNl", 
            "LkRiU3RhdGUi8AEKBVBob3RvEgoKAmlkGAEgASgDEhAKCHBlcnNvbmlkGAIg", 
            "ASgDEicKBHR5cGUYAyABKA4yGS5CaW9TZXJ2aWNlLlBob3RvU2l6ZVR5cGUS", 
            "FAoMZmlyX2xvY2F0aW9uGAQgASgJEhUKDWZpbGVfbG9jYXRpb24YBSABKAkS", 
            "EwoLZGVzY3JpcHRpb24YBiABKAwSCwoDZmlyGAcgASgMEiQKB2Ric3RhdGUY", 
            "CCABKA4yEy5CaW9TZXJ2aWNlLkRiU3RhdGUSKwoGb3JpZ2luGAkgASgOMhsu", 
            "QmlvU2VydmljZS5QaG90b09yaWdpblR5cGUiqgEKB1Zpc2l0b3ISCgoCaWQY", 
            "ASABKAMSEAoIcGVyc29uaWQYAiABKAMSDwoHcGhvdG9pZBgDIAEoAxISCgps", 
            "b2NhdGlvbmlkGAQgASgDEgwKBHRpbWUYBSABKAMSKAoGc3RhdHVzGAYgASgO", 
            "MhguQmlvU2VydmljZS5SZXN1bHRTdGF0dXMSJAoHZGJzdGF0ZRgHIAEoDjIT", 
            "LkJpb1NlcnZpY2UuRGJTdGF0ZSIxCgpQZXJzb25MaXN0EiMKB3BlcnNvbnMY", 
            "ASADKAsyEi5CaW9TZXJ2aWNlLlBlcnNvbiIuCglQaG90b0xpc3QSIQoGcGhv", 
            "dG9zGAEgAygLMhEuQmlvU2VydmljZS5QaG90byI0CgtWaXNpdG9yTGlzdBIl", 
            "Cgh2aXNpdG9ycxgBIAMoCzITLkJpb1NlcnZpY2UuVmlzaXRvciI3CgxMb2Nh", 
            "dGlvbkxpc3QSJwoJbG9jYXRpb25zGAEgAygLMhQuQmlvU2VydmljZS5Mb2Nh", 
            "dGlvbiJEChBBY2Nlc3NEZXZpY2VMaXN0EjAKDmFjY2Vzc19kZXZpY2VzGAEg", 
            "AygLMhguQmlvU2VydmljZS5BY2Nlc3NEZXZpY2UiKwoIQ2FyZExpc3QSHwoF", 
            "Y2FyZHMYASADKAsyEC5CaW9TZXJ2aWNlLkNhcmQiRwoRQ2FwdHVyZURldmlj", 
            "ZUxpc3QSMgoPY2FwdHVyZV9kZXZpY2VzGAEgAygLMhkuQmlvU2VydmljZS5D", 
            "YXB0dXJlRGV2aWNlIvwCCgpSZXN1bHRQYWlyEgoKAmlkGAEgASgDEiIKBXN0", 
            "YXRlGAIgASgOMhMuQmlvU2VydmljZS5EYlN0YXRlEigKBnN0YXR1cxgDIAEo", 
            "DjIYLkJpb1NlcnZpY2UuUmVzdWx0U3RhdHVzEiIKBnBlcnNvbhgEIAEoCzIS", 
            "LkJpb1NlcnZpY2UuUGVyc29uEiQKB3Zpc2l0b3IYBSABKAsyEy5CaW9TZXJ2", 
            "aWNlLlZpc2l0b3ISLgoMYWNjZXNzRGV2aWNlGAYgASgLMhguQmlvU2Vydmlj", 
            "ZS5BY2Nlc3NEZXZpY2USJgoIbG9jYXRpb24YByABKAsyFC5CaW9TZXJ2aWNl", 
            "LkxvY2F0aW9uEh4KBGNhcmQYCCABKAsyEC5CaW9TZXJ2aWNlLkNhcmQSMAoN", 
            "Y2FwdHVyZURldmljZRgJIAEoCzIZLkJpb1NlcnZpY2UuQ2FwdHVyZURldmlj", 
            "ZRIgCgVwaG90bxgKIAEoCzIRLkJpb1NlcnZpY2UuUGhvdG8iMAoGUmVzdWx0", 
            "EiYKBnN0YXR1cxgBIAMoCzIWLkJpb1NlcnZpY2UuUmVzdWx0UGFpciIyCghS", 
            "ZXNwb25zZRImCgRnb29kGAIgASgOMhguQmlvU2VydmljZS5SZXN1bHRTdGF0", 
            "dXMiRwoQVmVyaWZpY2F0aW9uRGF0YRIhCgZpbWFnZXMYASADKAsyES5CaW9T", 
            "ZXJ2aWNlLlBob3RvEhAKCHBlcnNvbmlkGAIgASgDIkUKDkVucm9sbG1lbnRE", 
            "YXRhEiEKBmltYWdlcxgBIAMoCzIRLkJpb1NlcnZpY2UuUGhvdG8SEAoIcGVy", 
            "c29uaWQYAiABKAMibAoSRW5yb2xsbWVudEZlZWRiYWNrEhAKCHByb2dyZXNz", 
            "GAEgASgPEhEKCWV5ZXNmb3VuZBgCIAEoCBIPCgdzdWNjZXNzGAMgASgIEiAK", 
            "BXBob3RvGAQgASgLMhEuQmlvU2VydmljZS5QaG90byJiChRWZXJpZmljYXRp", 
            "b25GZWVkYmFjaxI7ChNlbnJvbGxtZW50X2ZlZWRiYWNrGAEgASgLMh4uQmlv", 
            "U2VydmljZS5FbnJvbGxtZW50RmVlZGJhY2sSDQoFbWF0Y2gYAiABKAIiHAoN", 
            "Q29tbWFuZFBlcnNvbhILCgNhbGwYASABKAgiHQoOQ29tbWFuZFZpc2l0b3IS", 
            "CwoDYWxsGAEgASgIIh4KD0NvbW1hbmRMb2NhdGlvbhILCgNhbGwYASABKAgi", 
            "IgoTQ29tbWFuZEFjY2Vzc0RldmljZRILCgNhbGwYASABKAgiLQoMQ29tbWFu", 
            "ZFBob3RvEgsKA2FsbBgBIAEoCBIQCghwZXJzb25pZBgCIAEoAyIjChRDb21t", 
            "YW5kQ2FwdHVyZURldmljZRILCgNhbGwYASABKAgiGgoLQ29tbWFuZENhcmQS", 
            "CwoDYWxsGAEgASgIIiYKE1NlcnZlckNvbmZpZ3VyYXRpb24SDwoHYWRkcmVz", 
            "cxgBIAEoCSo3CgdEYlN0YXRlEggKBE5vbmUQABIKCgZJbnNlcnQQARIKCgZV", 
            "cGRhdGUQAhIKCgZSZW1vdmUQAyolCg1QaG90b1NpemVUeXBlEggKBEZ1bGwQ", 
            "ABIKCgZDcm9wZWQQASorCg9QaG90b09yaWdpblR5cGUSCgoGTG9hZGVkEAAS", 
            "DAoIRGV0ZWN0ZWQQASonCgxSZXN1bHRTdGF0dXMSCwoHU3VjY2VzcxAAEgoK", 
            "BkZhaWxlZBABMv8BChVCaW9tZXRyaWNGYWNpYWxTZXZpY2USRgoLQ29uZmln", 
            "dXJhdGUSHy5CaW9TZXJ2aWNlLlNlcnZlckNvbmZpZ3VyYXRpb24aFC5CaW9T", 
            "ZXJ2aWNlLlJlc3BvbnNlIgASTAoKRW5yb2xsRmFjZRIaLkJpb1NlcnZpY2Uu", 
            "RW5yb2xsbWVudERhdGEaHi5CaW9TZXJ2aWNlLkVucm9sbG1lbnRGZWVkYmFj", 
            "ayIAMAESUAoKVmVyaWZ5RmFjZRIcLkJpb1NlcnZpY2UuVmVyaWZpY2F0aW9u", 
            "RGF0YRogLkJpb1NlcnZpY2UuVmVyaWZpY2F0aW9uRmVlZGJhY2siADABMu8H", 
            "ChdCaW9tZXRyaWNEYXRhYmFzZVNldmljZRJDCgxQZXJzb25TZWxlY3QSGS5C", 
            "aW9TZXJ2aWNlLkNvbW1hbmRQZXJzb24aFi5CaW9TZXJ2aWNlLlBlcnNvbkxp", 
            "c3QiABI8CgxQZXJzb25VcGRhdGUSFi5CaW9TZXJ2aWNlLlBlcnNvbkxpc3Qa", 
            "Ei5CaW9TZXJ2aWNlLlJlc3VsdCIAEkAKC1Bob3RvU2VsZWN0EhguQmlvU2Vy", 
            "dmljZS5Db21tYW5kUGhvdG8aFS5CaW9TZXJ2aWNlLlBob3RvTGlzdCIAEjoK", 
            "C1Bob3RvVXBkYXRlEhUuQmlvU2VydmljZS5QaG90b0xpc3QaEi5CaW9TZXJ2", 
            "aWNlLlJlc3VsdCIAEkYKDVZpc2l0b3JTZWxlY3QSGi5CaW9TZXJ2aWNlLkNv", 
            "bW1hbmRWaXNpdG9yGhcuQmlvU2VydmljZS5WaXNpdG9yTGlzdCIAEj4KDVZp", 
            "c2l0b3JVcGRhdGUSFy5CaW9TZXJ2aWNlLlZpc2l0b3JMaXN0GhIuQmlvU2Vy", 
            "dmljZS5SZXN1bHQiABJJCg5Mb2NhdGlvblNlbGVjdBIbLkJpb1NlcnZpY2Uu", 
            "Q29tbWFuZExvY2F0aW9uGhguQmlvU2VydmljZS5Mb2NhdGlvbkxpc3QiABJA", 
            "Cg5Mb2NhdGlvblVwZGF0ZRIYLkJpb1NlcnZpY2UuTG9jYXRpb25MaXN0GhIu", 
            "QmlvU2VydmljZS5SZXN1bHQiABJVChJBY2Nlc3NEZXZpY2VTZWxlY3QSHy5C", 
            "aW9TZXJ2aWNlLkNvbW1hbmRBY2Nlc3NEZXZpY2UaHC5CaW9TZXJ2aWNlLkFj", 
            "Y2Vzc0RldmljZUxpc3QiABJIChJBY2Nlc3NEZXZpY2VVcGRhdGUSHC5CaW9T", 
            "ZXJ2aWNlLkFjY2Vzc0RldmljZUxpc3QaEi5CaW9TZXJ2aWNlLlJlc3VsdCIA", 
            "ElgKE0NhcHR1cmVEZXZpY2VTZWxlY3QSIC5CaW9TZXJ2aWNlLkNvbW1hbmRD", 
            "YXB0dXJlRGV2aWNlGh0uQmlvU2VydmljZS5DYXB0dXJlRGV2aWNlTGlzdCIA", 
            "EkoKE0NhcHR1cmVEZXZpY2VVcGRhdGUSHS5CaW9TZXJ2aWNlLkNhcHR1cmVE", 
            "ZXZpY2VMaXN0GhIuQmlvU2VydmljZS5SZXN1bHQiABI9CgpDYXJkU2VsZWN0", 
            "EhcuQmlvU2VydmljZS5Db21tYW5kQ2FyZBoULkJpb1NlcnZpY2UuQ2FyZExp", 
            "c3QiABI4CgpDYXJkVXBkYXRlEhQuQmlvU2VydmljZS5DYXJkTGlzdBoSLkJp", 
            "b1NlcnZpY2UuUmVzdWx0IgBCDwoHZXguZ3JwY6ICA1JUR2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::BioService.DbState), typeof(global::BioService.PhotoSizeType), typeof(global::BioService.PhotoOriginType), typeof(global::BioService.ResultStatus), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Person), new[]{ "Id", "Firstname", "Lastname", "Dateofbirth", "Gender", "Country", "City", "Thumbnail", "Comments", "Rights", "Email", "Dbstate" }, null, new[]{ typeof(global::BioService.Person.Types.Gender), typeof(global::BioService.Person.Types.Rights) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.AccessDevice), new[]{ "Id", "Locationid", "Portname", "Type", "Dbstate" }, null, new[]{ typeof(global::BioService.AccessDevice.Types.AccessDeviceType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CaptureDevice), new[]{ "Id", "Locationid", "Devicename", "Dbstate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Card), new[]{ "Id", "Personid", "UniqueNumber", "Dbstate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Location), new[]{ "Id", "LocationName", "Description", "Dbstate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Photo), new[]{ "Id", "Personid", "Type", "FirLocation", "FileLocation", "Description", "Fir", "Dbstate", "Origin" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Visitor), new[]{ "Id", "Personid", "Photoid", "Locationid", "Time", "Status", "Dbstate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PersonList), new[]{ "Persons" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.PhotoList), new[]{ "Photos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VisitorList), new[]{ "Visitors" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.LocationList), new[]{ "Locations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.AccessDeviceList), new[]{ "AccessDevices" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CardList), new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CaptureDeviceList), new[]{ "CaptureDevices" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.ResultPair), new[]{ "Id", "State", "Status", "Person", "Visitor", "AccessDevice", "Location", "Card", "CaptureDevice", "Photo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Result), new[]{ "Status" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.Response), new[]{ "Good" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationData), new[]{ "Images", "Personid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentData), new[]{ "Images", "Personid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.EnrollmentFeedback), new[]{ "Progress", "Eyesfound", "Success", "Photo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.VerificationFeedback), new[]{ "EnrollmentFeedback", "Match" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandPerson), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandVisitor), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandLocation), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandAccessDevice), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandPhoto), new[]{ "All", "Personid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandCaptureDevice), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.CommandCard), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioService.ServerConfiguration), new[]{ "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DbState {
    None = 0,
    Insert = 1,
    Update = 2,
    Remove = 3,
  }

  public enum PhotoSizeType {
    Full = 0,
    Croped = 1,
  }

  public enum PhotoOriginType {
    Loaded = 0,
    Detected = 1,
  }

  public enum ResultStatus {
    Success = 0,
    Failed = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Person(Person other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      dateofbirth_ = other.dateofbirth_;
      gender_ = other.gender_;
      country_ = other.country_;
      city_ = other.city_;
      thumbnail_ = other.thumbnail_;
      comments_ = other.comments_;
      rights_ = other.rights_;
      email_ = other.email_;
      dbstate_ = other.dbstate_;
    }

    public Person Clone() {
      return new Person(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DateofbirthFieldNumber = 4;
    private long dateofbirth_;
    public long Dateofbirth {
      get { return dateofbirth_; }
      set {
        dateofbirth_ = value;
      }
    }

    public const int GenderFieldNumber = 5;
    private global::BioService.Person.Types.Gender gender_ = global::BioService.Person.Types.Gender.None;
    public global::BioService.Person.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    public const int CountryFieldNumber = 6;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CityFieldNumber = 7;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ThumbnailFieldNumber = 8;
    private long thumbnail_;
    public long Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = value;
      }
    }

    public const int CommentsFieldNumber = 9;
    private string comments_ = "";
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RightsFieldNumber = 10;
    private global::BioService.Person.Types.Rights rights_ = global::BioService.Person.Types.Rights.Operator;
    public global::BioService.Person.Types.Rights Rights {
      get { return rights_; }
      set {
        rights_ = value;
      }
    }

    public const int EmailFieldNumber = 11;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 12;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Dateofbirth != other.Dateofbirth) return false;
      if (Gender != other.Gender) return false;
      if (Country != other.Country) return false;
      if (City != other.City) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Comments != other.Comments) return false;
      if (Rights != other.Rights) return false;
      if (Email != other.Email) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Dateofbirth != 0L) hash ^= Dateofbirth.GetHashCode();
      if (Gender != global::BioService.Person.Types.Gender.None) hash ^= Gender.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Thumbnail != 0L) hash ^= Thumbnail.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Rights != global::BioService.Person.Types.Rights.Operator) hash ^= Rights.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Dateofbirth != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Dateofbirth);
      }
      if (Gender != global::BioService.Person.Types.Gender.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Gender);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (City.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(City);
      }
      if (Thumbnail != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Thumbnail);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Comments);
      }
      if (Rights != global::BioService.Person.Types.Rights.Operator) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Rights);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Dateofbirth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dateofbirth);
      }
      if (Gender != global::BioService.Person.Types.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Thumbnail != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Thumbnail);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Rights != global::BioService.Person.Types.Rights.Operator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rights);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Dateofbirth != 0L) {
        Dateofbirth = other.Dateofbirth;
      }
      if (other.Gender != global::BioService.Person.Types.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Thumbnail != 0L) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Rights != global::BioService.Person.Types.Rights.Operator) {
        Rights = other.Rights;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 32: {
            Dateofbirth = input.ReadInt64();
            break;
          }
          case 40: {
            gender_ = (global::BioService.Person.Types.Gender) input.ReadEnum();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
          case 58: {
            City = input.ReadString();
            break;
          }
          case 64: {
            Thumbnail = input.ReadInt64();
            break;
          }
          case 74: {
            Comments = input.ReadString();
            break;
          }
          case 80: {
            rights_ = (global::BioService.Person.Types.Rights) input.ReadEnum();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 96: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Gender {
        None = 0,
        Male = 1,
        Female = 2,
      }

      public enum Rights {
        Operator = 0,
        Manager = 1,
        Supervisor = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDevice : pb::IMessage<AccessDevice> {
    private static readonly pb::MessageParser<AccessDevice> _parser = new pb::MessageParser<AccessDevice>(() => new AccessDevice());
    public static pb::MessageParser<AccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDevice(AccessDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      portname_ = other.portname_;
      type_ = other.type_;
      dbstate_ = other.dbstate_;
    }

    public AccessDevice Clone() {
      return new AccessDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int PortnameFieldNumber = 3;
    private string portname_ = "";
    public string Portname {
      get { return portname_; }
      set {
        portname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TypeFieldNumber = 4;
    private global::BioService.AccessDevice.Types.AccessDeviceType type_ = global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone;
    public global::BioService.AccessDevice.Types.AccessDeviceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int DbstateFieldNumber = 5;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDevice);
    }

    public bool Equals(AccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Portname != other.Portname) return false;
      if (Type != other.Type) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Portname.Length != 0) hash ^= Portname.GetHashCode();
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) hash ^= Type.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Portname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Portname);
      }
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Portname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Portname);
      }
      if (Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(AccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Portname.Length != 0) {
        Portname = other.Portname;
      }
      if (other.Type != global::BioService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        Type = other.Type;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Portname = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::BioService.AccessDevice.Types.AccessDeviceType) input.ReadEnum();
            break;
          }
          case 40: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AccessDeviceType {
        DeviceNone = 0,
        DeviceIn = 1,
        DeviceOut = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDevice : pb::IMessage<CaptureDevice> {
    private static readonly pb::MessageParser<CaptureDevice> _parser = new pb::MessageParser<CaptureDevice>(() => new CaptureDevice());
    public static pb::MessageParser<CaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDevice(CaptureDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      devicename_ = other.devicename_;
      dbstate_ = other.dbstate_;
    }

    public CaptureDevice Clone() {
      return new CaptureDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int DevicenameFieldNumber = 3;
    private string devicename_ = "";
    public string Devicename {
      get { return devicename_; }
      set {
        devicename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 4;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDevice);
    }

    public bool Equals(CaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Devicename != other.Devicename) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Devicename.Length != 0) hash ^= Devicename.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Devicename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Devicename);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Devicename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Devicename);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(CaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Devicename.Length != 0) {
        Devicename = other.Devicename;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Devicename = input.ReadString();
            break;
          }
          case 32: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Card(Card other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      uniqueNumber_ = other.uniqueNumber_;
      dbstate_ = other.dbstate_;
    }

    public Card Clone() {
      return new Card(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int UniqueNumberFieldNumber = 3;
    private string uniqueNumber_ = "";
    public string UniqueNumber {
      get { return uniqueNumber_; }
      set {
        uniqueNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 4;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (UniqueNumber != other.UniqueNumber) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (UniqueNumber.Length != 0) hash ^= UniqueNumber.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (UniqueNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueNumber);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (UniqueNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueNumber);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.UniqueNumber.Length != 0) {
        UniqueNumber = other.UniqueNumber;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 26: {
            UniqueNumber = input.ReadString();
            break;
          }
          case 32: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Location(Location other) : this() {
      id_ = other.id_;
      locationName_ = other.locationName_;
      description_ = other.description_;
      dbstate_ = other.dbstate_;
    }

    public Location Clone() {
      return new Location(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationNameFieldNumber = 2;
    private string locationName_ = "";
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 4;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LocationName != other.LocationName) return false;
      if (Description != other.Description) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocationName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            LocationName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photo : pb::IMessage<Photo> {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photo(Photo other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      type_ = other.type_;
      firLocation_ = other.firLocation_;
      fileLocation_ = other.fileLocation_;
      description_ = other.description_;
      fir_ = other.fir_;
      dbstate_ = other.dbstate_;
      origin_ = other.origin_;
    }

    public Photo Clone() {
      return new Photo(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int TypeFieldNumber = 3;
    private global::BioService.PhotoSizeType type_ = global::BioService.PhotoSizeType.Full;
    public global::BioService.PhotoSizeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int FirLocationFieldNumber = 4;
    private string firLocation_ = "";
    public string FirLocation {
      get { return firLocation_; }
      set {
        firLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FileLocationFieldNumber = 5;
    private string fileLocation_ = "";
    public string FileLocation {
      get { return fileLocation_; }
      set {
        fileLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 6;
    private pb::ByteString description_ = pb::ByteString.Empty;
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FirFieldNumber = 7;
    private pb::ByteString fir_ = pb::ByteString.Empty;
    public pb::ByteString Fir {
      get { return fir_; }
      set {
        fir_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 8;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public const int OriginFieldNumber = 9;
    private global::BioService.PhotoOriginType origin_ = global::BioService.PhotoOriginType.Loaded;
    public global::BioService.PhotoOriginType Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Type != other.Type) return false;
      if (FirLocation != other.FirLocation) return false;
      if (FileLocation != other.FileLocation) return false;
      if (Description != other.Description) return false;
      if (Fir != other.Fir) return false;
      if (Dbstate != other.Dbstate) return false;
      if (Origin != other.Origin) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Type != global::BioService.PhotoSizeType.Full) hash ^= Type.GetHashCode();
      if (FirLocation.Length != 0) hash ^= FirLocation.GetHashCode();
      if (FileLocation.Length != 0) hash ^= FileLocation.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Fir.Length != 0) hash ^= Fir.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      if (Origin != global::BioService.PhotoOriginType.Loaded) hash ^= Origin.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Type != global::BioService.PhotoSizeType.Full) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (FirLocation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirLocation);
      }
      if (FileLocation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FileLocation);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Description);
      }
      if (Fir.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Fir);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Dbstate);
      }
      if (Origin != global::BioService.PhotoOriginType.Loaded) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Origin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Type != global::BioService.PhotoSizeType.Full) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FirLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirLocation);
      }
      if (FileLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileLocation);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (Fir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Fir);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      if (Origin != global::BioService.PhotoOriginType.Loaded) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Origin);
      }
      return size;
    }

    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Type != global::BioService.PhotoSizeType.Full) {
        Type = other.Type;
      }
      if (other.FirLocation.Length != 0) {
        FirLocation = other.FirLocation;
      }
      if (other.FileLocation.Length != 0) {
        FileLocation = other.FileLocation;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Fir.Length != 0) {
        Fir = other.Fir;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
      if (other.Origin != global::BioService.PhotoOriginType.Loaded) {
        Origin = other.Origin;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            type_ = (global::BioService.PhotoSizeType) input.ReadEnum();
            break;
          }
          case 34: {
            FirLocation = input.ReadString();
            break;
          }
          case 42: {
            FileLocation = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadBytes();
            break;
          }
          case 58: {
            Fir = input.ReadBytes();
            break;
          }
          case 64: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
          case 72: {
            origin_ = (global::BioService.PhotoOriginType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Visitor : pb::IMessage<Visitor> {
    private static readonly pb::MessageParser<Visitor> _parser = new pb::MessageParser<Visitor>(() => new Visitor());
    public static pb::MessageParser<Visitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Visitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Visitor(Visitor other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      photoid_ = other.photoid_;
      locationid_ = other.locationid_;
      time_ = other.time_;
      status_ = other.status_;
      dbstate_ = other.dbstate_;
    }

    public Visitor Clone() {
      return new Visitor(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int PhotoidFieldNumber = 3;
    private long photoid_;
    public long Photoid {
      get { return photoid_; }
      set {
        photoid_ = value;
      }
    }

    public const int LocationidFieldNumber = 4;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int TimeFieldNumber = 5;
    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public const int StatusFieldNumber = 6;
    private global::BioService.ResultStatus status_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public const int DbstateFieldNumber = 7;
    private global::BioService.DbState dbstate_ = global::BioService.DbState.None;
    public global::BioService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Visitor);
    }

    public bool Equals(Visitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Photoid != other.Photoid) return false;
      if (Locationid != other.Locationid) return false;
      if (Time != other.Time) return false;
      if (Status != other.Status) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Photoid != 0L) hash ^= Photoid.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Status != global::BioService.ResultStatus.Success) hash ^= Status.GetHashCode();
      if (Dbstate != global::BioService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Photoid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Photoid);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Locationid);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (Dbstate != global::BioService.DbState.None) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Photoid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Photoid);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Dbstate != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(Visitor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Photoid != 0L) {
        Photoid = other.Photoid;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Status != global::BioService.ResultStatus.Success) {
        Status = other.Status;
      }
      if (other.Dbstate != global::BioService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            Photoid = input.ReadInt64();
            break;
          }
          case 32: {
            Locationid = input.ReadInt64();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            status_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 56: {
            dbstate_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonList : pb::IMessage<PersonList> {
    private static readonly pb::MessageParser<PersonList> _parser = new pb::MessageParser<PersonList>(() => new PersonList());
    public static pb::MessageParser<PersonList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PersonList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PersonList(PersonList other) : this() {
      persons_ = other.persons_.Clone();
    }

    public PersonList Clone() {
      return new PersonList(this);
    }

    public const int PersonsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Person> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioService.Person> persons_ = new pbc::RepeatedField<global::BioService.Person>();
    public pbc::RepeatedField<global::BioService.Person> Persons {
      get { return persons_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PersonList);
    }

    public bool Equals(PersonList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!persons_.Equals(other.persons_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= persons_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      persons_.WriteTo(output, _repeated_persons_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += persons_.CalculateSize(_repeated_persons_codec);
      return size;
    }

    public void MergeFrom(PersonList other) {
      if (other == null) {
        return;
      }
      persons_.Add(other.persons_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhotoList : pb::IMessage<PhotoList> {
    private static readonly pb::MessageParser<PhotoList> _parser = new pb::MessageParser<PhotoList>(() => new PhotoList());
    public static pb::MessageParser<PhotoList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PhotoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PhotoList(PhotoList other) : this() {
      photos_ = other.photos_.Clone();
    }

    public PhotoList Clone() {
      return new PhotoList(this);
    }

    public const int PhotosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> photos_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Photos {
      get { return photos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PhotoList);
    }

    public bool Equals(PhotoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!photos_.Equals(other.photos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= photos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      photos_.WriteTo(output, _repeated_photos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += photos_.CalculateSize(_repeated_photos_codec);
      return size;
    }

    public void MergeFrom(PhotoList other) {
      if (other == null) {
        return;
      }
      photos_.Add(other.photos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VisitorList : pb::IMessage<VisitorList> {
    private static readonly pb::MessageParser<VisitorList> _parser = new pb::MessageParser<VisitorList>(() => new VisitorList());
    public static pb::MessageParser<VisitorList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VisitorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VisitorList(VisitorList other) : this() {
      visitors_ = other.visitors_.Clone();
    }

    public VisitorList Clone() {
      return new VisitorList(this);
    }

    public const int VisitorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Visitor> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Visitor.Parser);
    private readonly pbc::RepeatedField<global::BioService.Visitor> visitors_ = new pbc::RepeatedField<global::BioService.Visitor>();
    public pbc::RepeatedField<global::BioService.Visitor> Visitors {
      get { return visitors_; }
    }

    public override bool Equals(object other) {
      return Equals(other as VisitorList);
    }

    public bool Equals(VisitorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visitors_.Equals(other.visitors_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= visitors_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      visitors_.WriteTo(output, _repeated_visitors_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      return size;
    }

    public void MergeFrom(VisitorList other) {
      if (other == null) {
        return;
      }
      visitors_.Add(other.visitors_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LocationList : pb::IMessage<LocationList> {
    private static readonly pb::MessageParser<LocationList> _parser = new pb::MessageParser<LocationList>(() => new LocationList());
    public static pb::MessageParser<LocationList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LocationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LocationList(LocationList other) : this() {
      locations_ = other.locations_.Clone();
    }

    public LocationList Clone() {
      return new LocationList(this);
    }

    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Location> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Location.Parser);
    private readonly pbc::RepeatedField<global::BioService.Location> locations_ = new pbc::RepeatedField<global::BioService.Location>();
    public pbc::RepeatedField<global::BioService.Location> Locations {
      get { return locations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LocationList);
    }

    public bool Equals(LocationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    public void MergeFrom(LocationList other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDeviceList : pb::IMessage<AccessDeviceList> {
    private static readonly pb::MessageParser<AccessDeviceList> _parser = new pb::MessageParser<AccessDeviceList>(() => new AccessDeviceList());
    public static pb::MessageParser<AccessDeviceList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDeviceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDeviceList(AccessDeviceList other) : this() {
      accessDevices_ = other.accessDevices_.Clone();
    }

    public AccessDeviceList Clone() {
      return new AccessDeviceList(this);
    }

    public const int AccessDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.AccessDevice> _repeated_accessDevices_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.AccessDevice.Parser);
    private readonly pbc::RepeatedField<global::BioService.AccessDevice> accessDevices_ = new pbc::RepeatedField<global::BioService.AccessDevice>();
    public pbc::RepeatedField<global::BioService.AccessDevice> AccessDevices {
      get { return accessDevices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDeviceList);
    }

    public bool Equals(AccessDeviceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accessDevices_.Equals(other.accessDevices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= accessDevices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      accessDevices_.WriteTo(output, _repeated_accessDevices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += accessDevices_.CalculateSize(_repeated_accessDevices_codec);
      return size;
    }

    public void MergeFrom(AccessDeviceList other) {
      if (other == null) {
        return;
      }
      accessDevices_.Add(other.accessDevices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accessDevices_.AddEntriesFrom(input, _repeated_accessDevices_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CardList : pb::IMessage<CardList> {
    private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
    public static pb::MessageParser<CardList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CardList(CardList other) : this() {
      cards_ = other.cards_.Clone();
    }

    public CardList Clone() {
      return new CardList(this);
    }

    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Card.Parser);
    private readonly pbc::RepeatedField<global::BioService.Card> cards_ = new pbc::RepeatedField<global::BioService.Card>();
    public pbc::RepeatedField<global::BioService.Card> Cards {
      get { return cards_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CardList);
    }

    public bool Equals(CardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(CardList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDeviceList : pb::IMessage<CaptureDeviceList> {
    private static readonly pb::MessageParser<CaptureDeviceList> _parser = new pb::MessageParser<CaptureDeviceList>(() => new CaptureDeviceList());
    public static pb::MessageParser<CaptureDeviceList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDeviceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDeviceList(CaptureDeviceList other) : this() {
      captureDevices_ = other.captureDevices_.Clone();
    }

    public CaptureDeviceList Clone() {
      return new CaptureDeviceList(this);
    }

    public const int CaptureDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.CaptureDevice> _repeated_captureDevices_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.CaptureDevice.Parser);
    private readonly pbc::RepeatedField<global::BioService.CaptureDevice> captureDevices_ = new pbc::RepeatedField<global::BioService.CaptureDevice>();
    public pbc::RepeatedField<global::BioService.CaptureDevice> CaptureDevices {
      get { return captureDevices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDeviceList);
    }

    public bool Equals(CaptureDeviceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!captureDevices_.Equals(other.captureDevices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= captureDevices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      captureDevices_.WriteTo(output, _repeated_captureDevices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += captureDevices_.CalculateSize(_repeated_captureDevices_codec);
      return size;
    }

    public void MergeFrom(CaptureDeviceList other) {
      if (other == null) {
        return;
      }
      captureDevices_.Add(other.captureDevices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            captureDevices_.AddEntriesFrom(input, _repeated_captureDevices_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResultPair : pb::IMessage<ResultPair> {
    private static readonly pb::MessageParser<ResultPair> _parser = new pb::MessageParser<ResultPair>(() => new ResultPair());
    public static pb::MessageParser<ResultPair> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ResultPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResultPair(ResultPair other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      status_ = other.status_;
      Person = other.person_ != null ? other.Person.Clone() : null;
      Visitor = other.visitor_ != null ? other.Visitor.Clone() : null;
      AccessDevice = other.accessDevice_ != null ? other.AccessDevice.Clone() : null;
      Location = other.location_ != null ? other.Location.Clone() : null;
      Card = other.card_ != null ? other.Card.Clone() : null;
      CaptureDevice = other.captureDevice_ != null ? other.CaptureDevice.Clone() : null;
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
    }

    public ResultPair Clone() {
      return new ResultPair(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int StateFieldNumber = 2;
    private global::BioService.DbState state_ = global::BioService.DbState.None;
    public global::BioService.DbState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public const int StatusFieldNumber = 3;
    private global::BioService.ResultStatus status_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public const int PersonFieldNumber = 4;
    private global::BioService.Person person_;
    public global::BioService.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    public const int VisitorFieldNumber = 5;
    private global::BioService.Visitor visitor_;
    public global::BioService.Visitor Visitor {
      get { return visitor_; }
      set {
        visitor_ = value;
      }
    }

    public const int AccessDeviceFieldNumber = 6;
    private global::BioService.AccessDevice accessDevice_;
    public global::BioService.AccessDevice AccessDevice {
      get { return accessDevice_; }
      set {
        accessDevice_ = value;
      }
    }

    public const int LocationFieldNumber = 7;
    private global::BioService.Location location_;
    public global::BioService.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public const int CardFieldNumber = 8;
    private global::BioService.Card card_;
    public global::BioService.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    public const int CaptureDeviceFieldNumber = 9;
    private global::BioService.CaptureDevice captureDevice_;
    public global::BioService.CaptureDevice CaptureDevice {
      get { return captureDevice_; }
      set {
        captureDevice_ = value;
      }
    }

    public const int PhotoFieldNumber = 10;
    private global::BioService.Photo photo_;
    public global::BioService.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResultPair);
    }

    public bool Equals(ResultPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!object.Equals(Visitor, other.Visitor)) return false;
      if (!object.Equals(AccessDevice, other.AccessDevice)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Card, other.Card)) return false;
      if (!object.Equals(CaptureDevice, other.CaptureDevice)) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (State != global::BioService.DbState.None) hash ^= State.GetHashCode();
      if (Status != global::BioService.ResultStatus.Success) hash ^= Status.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      if (visitor_ != null) hash ^= Visitor.GetHashCode();
      if (accessDevice_ != null) hash ^= AccessDevice.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      if (captureDevice_ != null) hash ^= CaptureDevice.GetHashCode();
      if (photo_ != null) hash ^= Photo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (State != global::BioService.DbState.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (person_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Person);
      }
      if (visitor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Visitor);
      }
      if (accessDevice_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AccessDevice);
      }
      if (location_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Location);
      }
      if (card_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Card);
      }
      if (captureDevice_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CaptureDevice);
      }
      if (photo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (State != global::BioService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Status != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (visitor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visitor);
      }
      if (accessDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessDevice);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (captureDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureDevice);
      }
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      return size;
    }

    public void MergeFrom(ResultPair other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.State != global::BioService.DbState.None) {
        State = other.State;
      }
      if (other.Status != global::BioService.ResultStatus.Success) {
        Status = other.Status;
      }
      if (other.person_ != null) {
        if (person_ == null) {
          person_ = new global::BioService.Person();
        }
        Person.MergeFrom(other.Person);
      }
      if (other.visitor_ != null) {
        if (visitor_ == null) {
          visitor_ = new global::BioService.Visitor();
        }
        Visitor.MergeFrom(other.Visitor);
      }
      if (other.accessDevice_ != null) {
        if (accessDevice_ == null) {
          accessDevice_ = new global::BioService.AccessDevice();
        }
        AccessDevice.MergeFrom(other.AccessDevice);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::BioService.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::BioService.Card();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.captureDevice_ != null) {
        if (captureDevice_ == null) {
          captureDevice_ = new global::BioService.CaptureDevice();
        }
        CaptureDevice.MergeFrom(other.CaptureDevice);
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::BioService.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            state_ = (global::BioService.DbState) input.ReadEnum();
            break;
          }
          case 24: {
            status_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
          case 34: {
            if (person_ == null) {
              person_ = new global::BioService.Person();
            }
            input.ReadMessage(person_);
            break;
          }
          case 42: {
            if (visitor_ == null) {
              visitor_ = new global::BioService.Visitor();
            }
            input.ReadMessage(visitor_);
            break;
          }
          case 50: {
            if (accessDevice_ == null) {
              accessDevice_ = new global::BioService.AccessDevice();
            }
            input.ReadMessage(accessDevice_);
            break;
          }
          case 58: {
            if (location_ == null) {
              location_ = new global::BioService.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 66: {
            if (card_ == null) {
              card_ = new global::BioService.Card();
            }
            input.ReadMessage(card_);
            break;
          }
          case 74: {
            if (captureDevice_ == null) {
              captureDevice_ = new global::BioService.CaptureDevice();
            }
            input.ReadMessage(captureDevice_);
            break;
          }
          case 82: {
            if (photo_ == null) {
              photo_ = new global::BioService.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Result(Result other) : this() {
      status_ = other.status_.Clone();
    }

    public Result Clone() {
      return new Result(this);
    }

    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.ResultPair> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.ResultPair.Parser);
    private readonly pbc::RepeatedField<global::BioService.ResultPair> status_ = new pbc::RepeatedField<global::BioService.ResultPair>();
    public pbc::RepeatedField<global::BioService.ResultPair> Status {
      get { return status_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      good_ = other.good_;
    }

    public Response Clone() {
      return new Response(this);
    }

    public const int GoodFieldNumber = 2;
    private global::BioService.ResultStatus good_ = global::BioService.ResultStatus.Success;
    public global::BioService.ResultStatus Good {
      get { return good_; }
      set {
        good_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Good != other.Good) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Good != global::BioService.ResultStatus.Success) hash ^= Good.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Good != global::BioService.ResultStatus.Success) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Good);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Good != global::BioService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Good);
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Good != global::BioService.ResultStatus.Success) {
        Good = other.Good;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            good_ = (global::BioService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationData : pb::IMessage<VerificationData> {
    private static readonly pb::MessageParser<VerificationData> _parser = new pb::MessageParser<VerificationData>(() => new VerificationData());
    public static pb::MessageParser<VerificationData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationData(VerificationData other) : this() {
      images_ = other.images_.Clone();
      personid_ = other.personid_;
    }

    public VerificationData Clone() {
      return new VerificationData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationData);
    }

    public bool Equals(VerificationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (Personid != other.Personid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      return size;
    }

    public void MergeFrom(VerificationData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentData : pb::IMessage<EnrollmentData> {
    private static readonly pb::MessageParser<EnrollmentData> _parser = new pb::MessageParser<EnrollmentData>(() => new EnrollmentData());
    public static pb::MessageParser<EnrollmentData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentData(EnrollmentData other) : this() {
      images_ = other.images_.Clone();
      personid_ = other.personid_;
    }

    public EnrollmentData Clone() {
      return new EnrollmentData(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioService.Photo> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioService.Photo> images_ = new pbc::RepeatedField<global::BioService.Photo>();
    public pbc::RepeatedField<global::BioService.Photo> Images {
      get { return images_; }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentData);
    }

    public bool Equals(EnrollmentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (Personid != other.Personid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      return size;
    }

    public void MergeFrom(EnrollmentData other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentFeedback : pb::IMessage<EnrollmentFeedback> {
    private static readonly pb::MessageParser<EnrollmentFeedback> _parser = new pb::MessageParser<EnrollmentFeedback>(() => new EnrollmentFeedback());
    public static pb::MessageParser<EnrollmentFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentFeedback(EnrollmentFeedback other) : this() {
      progress_ = other.progress_;
      eyesfound_ = other.eyesfound_;
      success_ = other.success_;
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
    }

    public EnrollmentFeedback Clone() {
      return new EnrollmentFeedback(this);
    }

    public const int ProgressFieldNumber = 1;
    private int progress_;
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public const int EyesfoundFieldNumber = 2;
    private bool eyesfound_;
    public bool Eyesfound {
      get { return eyesfound_; }
      set {
        eyesfound_ = value;
      }
    }

    public const int SuccessFieldNumber = 3;
    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public const int PhotoFieldNumber = 4;
    private global::BioService.Photo photo_;
    public global::BioService.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentFeedback);
    }

    public bool Equals(EnrollmentFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      if (Eyesfound != other.Eyesfound) return false;
      if (Success != other.Success) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Eyesfound != false) hash ^= Eyesfound.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (photo_ != null) hash ^= Photo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Progress);
      }
      if (Eyesfound != false) {
        output.WriteRawTag(16);
        output.WriteBool(Eyesfound);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (photo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + 4;
      }
      if (Eyesfound != false) {
        size += 1 + 1;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      return size;
    }

    public void MergeFrom(EnrollmentFeedback other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Eyesfound != false) {
        Eyesfound = other.Eyesfound;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::BioService.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Progress = input.ReadSFixed32();
            break;
          }
          case 16: {
            Eyesfound = input.ReadBool();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 34: {
            if (photo_ == null) {
              photo_ = new global::BioService.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationFeedback : pb::IMessage<VerificationFeedback> {
    private static readonly pb::MessageParser<VerificationFeedback> _parser = new pb::MessageParser<VerificationFeedback>(() => new VerificationFeedback());
    public static pb::MessageParser<VerificationFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationFeedback(VerificationFeedback other) : this() {
      EnrollmentFeedback = other.enrollmentFeedback_ != null ? other.EnrollmentFeedback.Clone() : null;
      match_ = other.match_;
    }

    public VerificationFeedback Clone() {
      return new VerificationFeedback(this);
    }

    public const int EnrollmentFeedbackFieldNumber = 1;
    private global::BioService.EnrollmentFeedback enrollmentFeedback_;
    public global::BioService.EnrollmentFeedback EnrollmentFeedback {
      get { return enrollmentFeedback_; }
      set {
        enrollmentFeedback_ = value;
      }
    }

    public const int MatchFieldNumber = 2;
    private float match_;
    public float Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationFeedback);
    }

    public bool Equals(VerificationFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnrollmentFeedback, other.EnrollmentFeedback)) return false;
      if (Match != other.Match) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (enrollmentFeedback_ != null) hash ^= EnrollmentFeedback.GetHashCode();
      if (Match != 0F) hash ^= Match.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enrollmentFeedback_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EnrollmentFeedback);
      }
      if (Match != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Match);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (enrollmentFeedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnrollmentFeedback);
      }
      if (Match != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(VerificationFeedback other) {
      if (other == null) {
        return;
      }
      if (other.enrollmentFeedback_ != null) {
        if (enrollmentFeedback_ == null) {
          enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
        }
        EnrollmentFeedback.MergeFrom(other.EnrollmentFeedback);
      }
      if (other.Match != 0F) {
        Match = other.Match;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enrollmentFeedback_ == null) {
              enrollmentFeedback_ = new global::BioService.EnrollmentFeedback();
            }
            input.ReadMessage(enrollmentFeedback_);
            break;
          }
          case 21: {
            Match = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPerson : pb::IMessage<CommandPerson> {
    private static readonly pb::MessageParser<CommandPerson> _parser = new pb::MessageParser<CommandPerson>(() => new CommandPerson());
    public static pb::MessageParser<CommandPerson> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPerson() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPerson(CommandPerson other) : this() {
      all_ = other.all_;
    }

    public CommandPerson Clone() {
      return new CommandPerson(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPerson);
    }

    public bool Equals(CommandPerson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandPerson other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandVisitor : pb::IMessage<CommandVisitor> {
    private static readonly pb::MessageParser<CommandVisitor> _parser = new pb::MessageParser<CommandVisitor>(() => new CommandVisitor());
    public static pb::MessageParser<CommandVisitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandVisitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandVisitor(CommandVisitor other) : this() {
      all_ = other.all_;
    }

    public CommandVisitor Clone() {
      return new CommandVisitor(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandVisitor);
    }

    public bool Equals(CommandVisitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandVisitor other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandLocation : pb::IMessage<CommandLocation> {
    private static readonly pb::MessageParser<CommandLocation> _parser = new pb::MessageParser<CommandLocation>(() => new CommandLocation());
    public static pb::MessageParser<CommandLocation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandLocation(CommandLocation other) : this() {
      all_ = other.all_;
    }

    public CommandLocation Clone() {
      return new CommandLocation(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandLocation);
    }

    public bool Equals(CommandLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandLocation other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandAccessDevice : pb::IMessage<CommandAccessDevice> {
    private static readonly pb::MessageParser<CommandAccessDevice> _parser = new pb::MessageParser<CommandAccessDevice>(() => new CommandAccessDevice());
    public static pb::MessageParser<CommandAccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandAccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandAccessDevice(CommandAccessDevice other) : this() {
      all_ = other.all_;
    }

    public CommandAccessDevice Clone() {
      return new CommandAccessDevice(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandAccessDevice);
    }

    public bool Equals(CommandAccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandAccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPhoto : pb::IMessage<CommandPhoto> {
    private static readonly pb::MessageParser<CommandPhoto> _parser = new pb::MessageParser<CommandPhoto>(() => new CommandPhoto());
    public static pb::MessageParser<CommandPhoto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPhoto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPhoto(CommandPhoto other) : this() {
      all_ = other.all_;
      personid_ = other.personid_;
    }

    public CommandPhoto Clone() {
      return new CommandPhoto(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPhoto);
    }

    public bool Equals(CommandPhoto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      if (Personid != other.Personid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      return size;
    }

    public void MergeFrom(CommandPhoto other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandCaptureDevice : pb::IMessage<CommandCaptureDevice> {
    private static readonly pb::MessageParser<CommandCaptureDevice> _parser = new pb::MessageParser<CommandCaptureDevice>(() => new CommandCaptureDevice());
    public static pb::MessageParser<CommandCaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandCaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandCaptureDevice(CommandCaptureDevice other) : this() {
      all_ = other.all_;
    }

    public CommandCaptureDevice Clone() {
      return new CommandCaptureDevice(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandCaptureDevice);
    }

    public bool Equals(CommandCaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandCaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandCard : pb::IMessage<CommandCard> {
    private static readonly pb::MessageParser<CommandCard> _parser = new pb::MessageParser<CommandCard>(() => new CommandCard());
    public static pb::MessageParser<CommandCard> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandCard(CommandCard other) : this() {
      all_ = other.all_;
    }

    public CommandCard Clone() {
      return new CommandCard(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandCard);
    }

    public bool Equals(CommandCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandCard other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerConfiguration : pb::IMessage<ServerConfiguration> {
    private static readonly pb::MessageParser<ServerConfiguration> _parser = new pb::MessageParser<ServerConfiguration>(() => new ServerConfiguration());
    public static pb::MessageParser<ServerConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioService.BioService.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServerConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServerConfiguration(ServerConfiguration other) : this() {
      address_ = other.address_;
    }

    public ServerConfiguration Clone() {
      return new ServerConfiguration(this);
    }

    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ServerConfiguration);
    }

    public bool Equals(ServerConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    public void MergeFrom(ServerConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
