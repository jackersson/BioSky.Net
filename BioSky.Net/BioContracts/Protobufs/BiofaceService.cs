// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bioface_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioFaceService {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BiofaceService {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BiofaceService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChViaW9mYWNlX3NlcnZpY2UucHJvdG8SDkJpb0ZhY2VTZXJ2aWNlIiMKBVBv", 
            "aW50EgwKBHhQb3MYASABKAISDAoEeVBvcxgCIAEoAiJSCglSZWN0YW5nbGUS", 
            "JgoHZmFjZVBvcxgBIAEoCzIVLkJpb0ZhY2VTZXJ2aWNlLlBvaW50Eg0KBVdp", 
            "ZHRoGAIgASgFEg4KBkhlaWdodBgDIAEoBSJqCgpPYmplY3RJbmZvEjEKDm9i", 
            "amVjdExvY2F0aW9uGAEgASgLMhkuQmlvRmFjZVNlcnZpY2UuUmVjdGFuZ2xl", 
            "EhIKCmNvbmZpZGVuY2UYAiABKAISFQoNcm90YXRpb25BbmdsZRgDIAEoAiJC", 
            "ChNEZXRlY3RlZE9iamVjdHNJbmZvEisKB29iamVjdHMYASADKAsyGi5CaW9G", 
            "YWNlU2VydmljZS5PYmplY3RJbmZvIh8KCEJpb0ltYWdlEhMKC2Rlc2NyaXB0", 
            "aW9uGAEgASgMIjkKDUJpb0ltYWdlc0xpc3QSKAoGaW1hZ2VzGAEgAygLMhgu", 
            "QmlvRmFjZVNlcnZpY2UuQmlvSW1hZ2UiSgoSRW5yb2xsbWVudEZlZWRiYWNr", 
            "EhAKCHByb2dyZXNzGAEgASgPEhEKCWV5ZXNmb3VuZBgCIAEoCBIPCgdzdWNj", 
            "ZXNzGAMgASgIIl4KEFZlcmlmaWNhdGlvbkRhdGESLQoGaW1hZ2VzGAEgASgL", 
            "Mh0uQmlvRmFjZVNlcnZpY2UuQmlvSW1hZ2VzTGlzdBIbChN2ZXJpZmljYXRp", 
            "b25fdGFyZ2V0GAIgASgJImYKFFZlcmlmaWNhdGlvbkZlZWRiYWNrEj8KE2Vu", 
            "cm9sbG1lbnRfZmVlZGJhY2sYASABKAsyIi5CaW9GYWNlU2VydmljZS5FbnJv", 
            "bGxtZW50RmVlZGJhY2sSDQoFbWF0Y2gYAiABKAIiQwoTSWRlbnRpZmljYXRp", 
            "b25TY29yZRINCgVzY29yZRgBIAEoAhIdChVpZGVudGlmaWNhdGlvbl90YXJn", 
            "ZXQYAiABKAkijgEKFklkZW50aWZpY2F0aW9uRmVlZGJhY2sSPwoTZW5yb2xs", 
            "bWVudF9mZWVkYmFjaxgBIAEoCzIiLkJpb0ZhY2VTZXJ2aWNlLkVucm9sbG1l", 
            "bnRGZWVkYmFjaxIzCgZzY29yZXMYAiADKAsyIy5CaW9GYWNlU2VydmljZS5J", 
            "ZGVudGlmaWNhdGlvblNjb3JlIogDCgZQZXJzb24SCgoCaWQYASABKAMSEQoJ", 
            "Zmlyc3RuYW1lGAIgASgJEhAKCGxhc3RuYW1lGAMgASgJEhMKC2RhdGVvZmJp", 
            "cnRoGAQgASgDEi0KBmdlbmRlchgFIAEoDjIdLkJpb0ZhY2VTZXJ2aWNlLlBl", 
            "cnNvbi5HZW5kZXISDwoHY291bnRyeRgGIAEoCRIMCgRjaXR5GAcgASgJEhEK", 
            "CXRodW1ibmFpbBgIIAEoAxIQCghjb21tZW50cxgJIAEoCRItCgZyaWdodHMY", 
            "CiABKA4yHS5CaW9GYWNlU2VydmljZS5QZXJzb24uUmlnaHRzEg0KBWVtYWls", 
            "GAsgASgJEigKB2Ric3RhdGUYDCABKA4yFy5CaW9GYWNlU2VydmljZS5EYlN0", 
            "YXRlIigKBkdlbmRlchIICgROb25lEAASCAoETWFsZRABEgoKBkZlbWFsZRAC", 
            "IjMKBlJpZ2h0cxIMCghPcGVyYXRvchAAEgsKB01hbmFnZXIQARIOCgpTdXBl", 
            "cnZpc29yEAIivgEKDEFjY2Vzc0RldmljZRIKCgJpZBgBIAEoAxISCgpsb2Nh", 
            "dGlvbmlkGAIgASgDEhAKCHBvcnRuYW1lGAMgASgJEjsKBHR5cGUYBCABKA4y", 
            "LS5CaW9GYWNlU2VydmljZS5BY2Nlc3NEZXZpY2UuQWNjZXNzRGV2aWNlVHlw", 
            "ZSI/ChBBY2Nlc3NEZXZpY2VUeXBlEg4KCkRldmljZU5vbmUQABIMCghEZXZp", 
            "Y2VJbhABEg0KCURldmljZU91dBACIkMKDUNhcHR1cmVEZXZpY2USCgoCaWQY", 
            "ASABKAMSEgoKbG9jYXRpb25pZBgCIAEoAxISCgpkZXZpY2VuYW1lGAMgASgJ", 
            "IjsKBENhcmQSCgoCaWQYASABKAMSEAoIcGVyc29uaWQYAiABKAMSFQoNdW5p", 
            "cXVlX251bWJlchgDIAEoCSJCCghMb2NhdGlvbhIKCgJpZBgBIAEoAxIVCg1s", 
            "b2NhdGlvbl9uYW1lGAIgASgJEhMKC2Rlc2N0aXB0aW9uGAMgASgJIqwBCgVQ", 
            "aG90bxIKCgJpZBgBIAEoAxIQCghwZXJzb25pZBgCIAEoAxIxCgR0eXBlGAMg", 
            "ASgOMiMuQmlvRmFjZVNlcnZpY2UuUGhvdG8uUGhvdG9TaXplVHlwZRIUCgxm", 
            "aXJfbG9jYXRpb24YBCABKAkSFQoNZmlsZV9sb2NhdGlvbhgFIAEoCSIlCg1Q", 
            "aG90b1NpemVUeXBlEggKBEZ1bGwQABIKCgZDcm9wZWQQASK7AQoHVmlzaXRv", 
            "chIKCgJpZBgBIAEoAxIQCghwZXJzb25pZBgCIAEoAxIPCgdwaG90b2lkGAMg", 
            "ASgDEhIKCmxvY2F0aW9uaWQYBCABKAMSDAoEdGltZRgFIAEoAxI1CgZzdGF0", 
            "dXMYBiABKA4yJS5CaW9GYWNlU2VydmljZS5WaXNpdG9yLlZpc2l0b3JTdGF0", 
            "dXMiKAoNVmlzaXRvclN0YXR1cxILCgdTdWNjZXNzEAASCgoGRmFpbGVkEAEi", 
            "NQoKUGVyc29uTGlzdBInCgdwZXJzb25zGAEgAygLMhYuQmlvRmFjZVNlcnZp", 
            "Y2UuUGVyc29uIjIKCVBob3RvTGlzdBIlCgZwaG90b3MYASADKAsyFS5CaW9G", 
            "YWNlU2VydmljZS5QaG90byI4CgtWaXNpdG9yTGlzdBIpCgh2aXNpdG9ycxgB", 
            "IAMoCzIXLkJpb0ZhY2VTZXJ2aWNlLlZpc2l0b3IiOwoMTG9jYXRpb25MaXN0", 
            "EisKCWxvY2F0aW9ucxgBIAMoCzIYLkJpb0ZhY2VTZXJ2aWNlLkxvY2F0aW9u", 
            "IkgKEEFjY2Vzc0RldmljZUxpc3QSNAoOYWNjZXNzX2RldmljZXMYASADKAsy", 
            "HC5CaW9GYWNlU2VydmljZS5BY2Nlc3NEZXZpY2UiLwoIQ2FyZExpc3QSIwoF", 
            "Y2FyZHMYASADKAsyFC5CaW9GYWNlU2VydmljZS5DYXJkIksKEUNhcHR1cmVE", 
            "ZXZpY2VMaXN0EjYKD2NhcHR1cmVfZGV2aWNlcxgBIAMoCzIdLkJpb0ZhY2VT", 
            "ZXJ2aWNlLkNhcHR1cmVEZXZpY2UibgoKUmVzdWx0UGFpchIKCgJpZBgBIAEo", 
            "AxImCgVzdGF0ZRgCIAEoDjIXLkJpb0ZhY2VTZXJ2aWNlLkRiU3RhdGUSLAoG", 
            "c3RhdHVzGAMgASgOMhwuQmlvRmFjZVNlcnZpY2UuUmVzdWx0U3RhdHVzIjQK", 
            "BlJlc3VsdBIqCgZzdGF0dXMYASADKAsyGi5CaW9GYWNlU2VydmljZS5SZXN1", 
            "bHRQYWlyIhwKDUNvbW1hbmRQZXJzb24SCwoDYWxsGAEgASgIIh0KDkNvbW1h", 
            "bmRWaXNpdG9yEgsKA2FsbBgBIAEoCCIeCg9Db21tYW5kTG9jYXRpb24SCwoD", 
            "YWxsGAEgASgIIiIKE0NvbW1hbmRBY2Nlc3NEZXZpY2USCwoDYWxsGAEgASgI", 
            "IhsKDENvbW1hbmRQaG90bxILCgNhbGwYASABKAgiIwoUQ29tbWFuZENhcHR1", 
            "cmVEZXZpY2USCwoDYWxsGAEgASgIIhoKC0NvbW1hbmRDYXJkEgsKA2FsbBgB", 
            "IAEoCCLMAQoHQ29tbWFuZBI5Cgpjb21tYW5kX2lkGAEgASgOMiUuQmlvRmFj", 
            "ZVNlcnZpY2UuQ29tbWFuZC5TZXJ2ZXJDb21tYW5kIoUBCg1TZXJ2ZXJDb21t", 
            "YW5kEg0KCUdldFBlcnNvbhAAEg4KCkdldFZpc2l0b3IQARIMCghHZXRQaG90", 
            "bxACEg8KC0dldExvY2F0aW9uEAMSEwoPR2V0QWNjZXNzRGV2aWNlEAQSFAoQ", 
            "R2V0Q2FwdHVyZURldmljZRAFEgsKB0dldENhcmQQBio3CgdEYlN0YXRlEggK", 
            "BE5vbmUQABIKCgZJbnNlcnQQARIKCgZVcGRhdGUQAhIKCgZSZW1vdmUQAyon", 
            "CgxSZXN1bHRTdGF0dXMSCwoHU3VjY2VzcxAAEgoKBkZhaWxlZBABMrQLCg9C", 
            "aW9GYWNlRGV0ZWN0b3ISSwoMUGVyc29uU2VsZWN0Eh0uQmlvRmFjZVNlcnZp", 
            "Y2UuQ29tbWFuZFBlcnNvbhoaLkJpb0ZhY2VTZXJ2aWNlLlBlcnNvbkxpc3Qi", 
            "ABJECgxQZXJzb25VcGRhdGUSGi5CaW9GYWNlU2VydmljZS5QZXJzb25MaXN0", 
            "GhYuQmlvRmFjZVNlcnZpY2UuUmVzdWx0IgASSAoLUGhvdG9TZWxlY3QSHC5C", 
            "aW9GYWNlU2VydmljZS5Db21tYW5kUGhvdG8aGS5CaW9GYWNlU2VydmljZS5Q", 
            "aG90b0xpc3QiABJCCgtQaG90b1VwZGF0ZRIZLkJpb0ZhY2VTZXJ2aWNlLlBo", 
            "b3RvTGlzdBoWLkJpb0ZhY2VTZXJ2aWNlLlJlc3VsdCIAEk4KDVZpc2l0b3JT", 
            "ZWxlY3QSHi5CaW9GYWNlU2VydmljZS5Db21tYW5kVmlzaXRvchobLkJpb0Zh", 
            "Y2VTZXJ2aWNlLlZpc2l0b3JMaXN0IgASRgoNVmlzaXRvclVwZGF0ZRIbLkJp", 
            "b0ZhY2VTZXJ2aWNlLlZpc2l0b3JMaXN0GhYuQmlvRmFjZVNlcnZpY2UuUmVz", 
            "dWx0IgASUQoOTG9jYXRpb25TZWxlY3QSHy5CaW9GYWNlU2VydmljZS5Db21t", 
            "YW5kTG9jYXRpb24aHC5CaW9GYWNlU2VydmljZS5Mb2NhdGlvbkxpc3QiABJI", 
            "Cg5Mb2NhdGlvblVwZGF0ZRIcLkJpb0ZhY2VTZXJ2aWNlLkxvY2F0aW9uTGlz", 
            "dBoWLkJpb0ZhY2VTZXJ2aWNlLlJlc3VsdCIAEl0KEkFjY2Vzc0RldmljZVNl", 
            "bGVjdBIjLkJpb0ZhY2VTZXJ2aWNlLkNvbW1hbmRBY2Nlc3NEZXZpY2UaIC5C", 
            "aW9GYWNlU2VydmljZS5BY2Nlc3NEZXZpY2VMaXN0IgASUAoSQWNjZXNzRGV2", 
            "aWNlVXBkYXRlEiAuQmlvRmFjZVNlcnZpY2UuQWNjZXNzRGV2aWNlTGlzdBoW", 
            "LkJpb0ZhY2VTZXJ2aWNlLlJlc3VsdCIAEmAKE0NhcHR1cmVEZXZpY2VTZWxl", 
            "Y3QSJC5CaW9GYWNlU2VydmljZS5Db21tYW5kQ2FwdHVyZURldmljZRohLkJp", 
            "b0ZhY2VTZXJ2aWNlLkNhcHR1cmVEZXZpY2VMaXN0IgASUgoTQ2FwdHVyZURl", 
            "dmljZVVwZGF0ZRIhLkJpb0ZhY2VTZXJ2aWNlLkNhcHR1cmVEZXZpY2VMaXN0", 
            "GhYuQmlvRmFjZVNlcnZpY2UuUmVzdWx0IgASRQoKQ2FyZFNlbGVjdBIbLkJp", 
            "b0ZhY2VTZXJ2aWNlLkNvbW1hbmRDYXJkGhguQmlvRmFjZVNlcnZpY2UuQ2Fy", 
            "ZExpc3QiABJACgpDYXJkVXBkYXRlEhguQmlvRmFjZVNlcnZpY2UuQ2FyZExp", 
            "c3QaFi5CaW9GYWNlU2VydmljZS5SZXN1bHQiABJRCgpEZXRlY3RGYWNlEhgu", 
            "QmlvRmFjZVNlcnZpY2UuQmlvSW1hZ2UaIy5CaW9GYWNlU2VydmljZS5EZXRl", 
            "Y3RlZE9iamVjdHNJbmZvIgAoATABElMKCkVucm9sbEZhY2USHS5CaW9GYWNl", 
            "U2VydmljZS5CaW9JbWFnZXNMaXN0GiIuQmlvRmFjZVNlcnZpY2UuRW5yb2xs", 
            "bWVudEZlZWRiYWNrIgAwARJYCgpWZXJpZnlGYWNlEiAuQmlvRmFjZVNlcnZp", 
            "Y2UuVmVyaWZpY2F0aW9uRGF0YRokLkJpb0ZhY2VTZXJ2aWNlLlZlcmlmaWNh", 
            "dGlvbkZlZWRiYWNrIgAwARJZCgxJZGVudGlmeUZhY2USHS5CaW9GYWNlU2Vy", 
            "dmljZS5CaW9JbWFnZXNMaXN0GiYuQmlvRmFjZVNlcnZpY2UuSWRlbnRpZmlj", 
            "YXRpb25GZWVkYmFjayIAMAFCDwoHZXguZ3JwY6ICA1JUR2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::BioFaceService.DbState), typeof(global::BioFaceService.ResultStatus), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Point), new[]{ "XPos", "YPos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Rectangle), new[]{ "FacePos", "Width", "Height" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.ObjectInfo), new[]{ "ObjectLocation", "Confidence", "RotationAngle" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.DetectedObjectsInfo), new[]{ "Objects" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.BioImage), new[]{ "Description" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.BioImagesList), new[]{ "Images" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.EnrollmentFeedback), new[]{ "Progress", "Eyesfound", "Success" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.VerificationData), new[]{ "Images", "VerificationTarget" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.VerificationFeedback), new[]{ "EnrollmentFeedback", "Match" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.IdentificationScore), new[]{ "Score", "IdentificationTarget" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.IdentificationFeedback), new[]{ "EnrollmentFeedback", "Scores" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Person), new[]{ "Id", "Firstname", "Lastname", "Dateofbirth", "Gender", "Country", "City", "Thumbnail", "Comments", "Rights", "Email", "Dbstate" }, null, new[]{ typeof(global::BioFaceService.Person.Types.Gender), typeof(global::BioFaceService.Person.Types.Rights) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.AccessDevice), new[]{ "Id", "Locationid", "Portname", "Type" }, null, new[]{ typeof(global::BioFaceService.AccessDevice.Types.AccessDeviceType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CaptureDevice), new[]{ "Id", "Locationid", "Devicename" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Card), new[]{ "Id", "Personid", "UniqueNumber" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Location), new[]{ "Id", "LocationName", "Desctiption" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Photo), new[]{ "Id", "Personid", "Type", "FirLocation", "FileLocation" }, null, new[]{ typeof(global::BioFaceService.Photo.Types.PhotoSizeType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Visitor), new[]{ "Id", "Personid", "Photoid", "Locationid", "Time", "Status" }, null, new[]{ typeof(global::BioFaceService.Visitor.Types.VisitorStatus) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.PersonList), new[]{ "Persons" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.PhotoList), new[]{ "Photos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.VisitorList), new[]{ "Visitors" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.LocationList), new[]{ "Locations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.AccessDeviceList), new[]{ "AccessDevices" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CardList), new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CaptureDeviceList), new[]{ "CaptureDevices" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.ResultPair), new[]{ "Id", "State", "Status" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Result), new[]{ "Status" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandPerson), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandVisitor), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandLocation), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandAccessDevice), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandPhoto), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandCaptureDevice), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.CommandCard), new[]{ "All" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Command), new[]{ "CommandId" }, null, new[]{ typeof(global::BioFaceService.Command.Types.ServerCommand) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DbState {
    None = 0,
    Insert = 1,
    Update = 2,
    Remove = 3,
  }

  public enum ResultStatus {
    Success = 0,
    Failed = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
    }

    public Point Clone() {
      return new Point(this);
    }

    public const int XPosFieldNumber = 1;
    private float xPos_;
    public float XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    public const int YPosFieldNumber = 2;
    private float yPos_;
    public float YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (XPos != 0F) hash ^= XPos.GetHashCode();
      if (YPos != 0F) hash ^= YPos.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (XPos != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XPos);
      }
      if (YPos != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YPos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (XPos != 0F) {
        size += 1 + 4;
      }
      if (YPos != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.XPos != 0F) {
        XPos = other.XPos;
      }
      if (other.YPos != 0F) {
        YPos = other.YPos;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XPos = input.ReadFloat();
            break;
          }
          case 21: {
            YPos = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Rectangle : pb::IMessage<Rectangle> {
    private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
    public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Rectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Rectangle(Rectangle other) : this() {
      FacePos = other.facePos_ != null ? other.FacePos.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
    }

    public Rectangle Clone() {
      return new Rectangle(this);
    }

    public const int FacePosFieldNumber = 1;
    private global::BioFaceService.Point facePos_;
    public global::BioFaceService.Point FacePos {
      get { return facePos_; }
      set {
        facePos_ = value;
      }
    }

    public const int WidthFieldNumber = 2;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    public const int HeightFieldNumber = 3;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Rectangle);
    }

    public bool Equals(Rectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FacePos, other.FacePos)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (facePos_ != null) hash ^= FacePos.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (facePos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FacePos);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (facePos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FacePos);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    public void MergeFrom(Rectangle other) {
      if (other == null) {
        return;
      }
      if (other.facePos_ != null) {
        if (facePos_ == null) {
          facePos_ = new global::BioFaceService.Point();
        }
        FacePos.MergeFrom(other.FacePos);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (facePos_ == null) {
              facePos_ = new global::BioFaceService.Point();
            }
            input.ReadMessage(facePos_);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ObjectInfo : pb::IMessage<ObjectInfo> {
    private static readonly pb::MessageParser<ObjectInfo> _parser = new pb::MessageParser<ObjectInfo>(() => new ObjectInfo());
    public static pb::MessageParser<ObjectInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ObjectInfo(ObjectInfo other) : this() {
      ObjectLocation = other.objectLocation_ != null ? other.ObjectLocation.Clone() : null;
      confidence_ = other.confidence_;
      rotationAngle_ = other.rotationAngle_;
    }

    public ObjectInfo Clone() {
      return new ObjectInfo(this);
    }

    public const int ObjectLocationFieldNumber = 1;
    private global::BioFaceService.Rectangle objectLocation_;
    public global::BioFaceService.Rectangle ObjectLocation {
      get { return objectLocation_; }
      set {
        objectLocation_ = value;
      }
    }

    public const int ConfidenceFieldNumber = 2;
    private float confidence_;
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    public const int RotationAngleFieldNumber = 3;
    private float rotationAngle_;
    public float RotationAngle {
      get { return rotationAngle_; }
      set {
        rotationAngle_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ObjectInfo);
    }

    public bool Equals(ObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectLocation, other.ObjectLocation)) return false;
      if (Confidence != other.Confidence) return false;
      if (RotationAngle != other.RotationAngle) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (objectLocation_ != null) hash ^= ObjectLocation.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      if (RotationAngle != 0F) hash ^= RotationAngle.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (objectLocation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectLocation);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Confidence);
      }
      if (RotationAngle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RotationAngle);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (objectLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectLocation);
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (RotationAngle != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(ObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectLocation_ != null) {
        if (objectLocation_ == null) {
          objectLocation_ = new global::BioFaceService.Rectangle();
        }
        ObjectLocation.MergeFrom(other.ObjectLocation);
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.RotationAngle != 0F) {
        RotationAngle = other.RotationAngle;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (objectLocation_ == null) {
              objectLocation_ = new global::BioFaceService.Rectangle();
            }
            input.ReadMessage(objectLocation_);
            break;
          }
          case 21: {
            Confidence = input.ReadFloat();
            break;
          }
          case 29: {
            RotationAngle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DetectedObjectsInfo : pb::IMessage<DetectedObjectsInfo> {
    private static readonly pb::MessageParser<DetectedObjectsInfo> _parser = new pb::MessageParser<DetectedObjectsInfo>(() => new DetectedObjectsInfo());
    public static pb::MessageParser<DetectedObjectsInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DetectedObjectsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DetectedObjectsInfo(DetectedObjectsInfo other) : this() {
      objects_ = other.objects_.Clone();
    }

    public DetectedObjectsInfo Clone() {
      return new DetectedObjectsInfo(this);
    }

    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.ObjectInfo> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.ObjectInfo.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.ObjectInfo> objects_ = new pbc::RepeatedField<global::BioFaceService.ObjectInfo>();
    public pbc::RepeatedField<global::BioFaceService.ObjectInfo> Objects {
      get { return objects_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DetectedObjectsInfo);
    }

    public bool Equals(DetectedObjectsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      objects_.WriteTo(output, _repeated_objects_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      return size;
    }

    public void MergeFrom(DetectedObjectsInfo other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioImage : pb::IMessage<BioImage> {
    private static readonly pb::MessageParser<BioImage> _parser = new pb::MessageParser<BioImage>(() => new BioImage());
    public static pb::MessageParser<BioImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioImage(BioImage other) : this() {
      description_ = other.description_;
    }

    public BioImage Clone() {
      return new BioImage(this);
    }

    public const int DescriptionFieldNumber = 1;
    private pb::ByteString description_ = pb::ByteString.Empty;
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BioImage);
    }

    public bool Equals(BioImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Description);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      return size;
    }

    public void MergeFrom(BioImage other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Description = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioImagesList : pb::IMessage<BioImagesList> {
    private static readonly pb::MessageParser<BioImagesList> _parser = new pb::MessageParser<BioImagesList>(() => new BioImagesList());
    public static pb::MessageParser<BioImagesList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioImagesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioImagesList(BioImagesList other) : this() {
      images_ = other.images_.Clone();
    }

    public BioImagesList Clone() {
      return new BioImagesList(this);
    }

    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.BioImage> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.BioImage.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.BioImage> images_ = new pbc::RepeatedField<global::BioFaceService.BioImage>();
    public pbc::RepeatedField<global::BioFaceService.BioImage> Images {
      get { return images_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BioImagesList);
    }

    public bool Equals(BioImagesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      return size;
    }

    public void MergeFrom(BioImagesList other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnrollmentFeedback : pb::IMessage<EnrollmentFeedback> {
    private static readonly pb::MessageParser<EnrollmentFeedback> _parser = new pb::MessageParser<EnrollmentFeedback>(() => new EnrollmentFeedback());
    public static pb::MessageParser<EnrollmentFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EnrollmentFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EnrollmentFeedback(EnrollmentFeedback other) : this() {
      progress_ = other.progress_;
      eyesfound_ = other.eyesfound_;
      success_ = other.success_;
    }

    public EnrollmentFeedback Clone() {
      return new EnrollmentFeedback(this);
    }

    public const int ProgressFieldNumber = 1;
    private int progress_;
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public const int EyesfoundFieldNumber = 2;
    private bool eyesfound_;
    public bool Eyesfound {
      get { return eyesfound_; }
      set {
        eyesfound_ = value;
      }
    }

    public const int SuccessFieldNumber = 3;
    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EnrollmentFeedback);
    }

    public bool Equals(EnrollmentFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      if (Eyesfound != other.Eyesfound) return false;
      if (Success != other.Success) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Eyesfound != false) hash ^= Eyesfound.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Progress);
      }
      if (Eyesfound != false) {
        output.WriteRawTag(16);
        output.WriteBool(Eyesfound);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + 4;
      }
      if (Eyesfound != false) {
        size += 1 + 1;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(EnrollmentFeedback other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Eyesfound != false) {
        Eyesfound = other.Eyesfound;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Progress = input.ReadSFixed32();
            break;
          }
          case 16: {
            Eyesfound = input.ReadBool();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationData : pb::IMessage<VerificationData> {
    private static readonly pb::MessageParser<VerificationData> _parser = new pb::MessageParser<VerificationData>(() => new VerificationData());
    public static pb::MessageParser<VerificationData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationData(VerificationData other) : this() {
      Images = other.images_ != null ? other.Images.Clone() : null;
      verificationTarget_ = other.verificationTarget_;
    }

    public VerificationData Clone() {
      return new VerificationData(this);
    }

    public const int ImagesFieldNumber = 1;
    private global::BioFaceService.BioImagesList images_;
    public global::BioFaceService.BioImagesList Images {
      get { return images_; }
      set {
        images_ = value;
      }
    }

    public const int VerificationTargetFieldNumber = 2;
    private string verificationTarget_ = "";
    public string VerificationTarget {
      get { return verificationTarget_; }
      set {
        verificationTarget_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationData);
    }

    public bool Equals(VerificationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Images, other.Images)) return false;
      if (VerificationTarget != other.VerificationTarget) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (images_ != null) hash ^= Images.GetHashCode();
      if (VerificationTarget.Length != 0) hash ^= VerificationTarget.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (images_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Images);
      }
      if (VerificationTarget.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerificationTarget);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (images_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Images);
      }
      if (VerificationTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationTarget);
      }
      return size;
    }

    public void MergeFrom(VerificationData other) {
      if (other == null) {
        return;
      }
      if (other.images_ != null) {
        if (images_ == null) {
          images_ = new global::BioFaceService.BioImagesList();
        }
        Images.MergeFrom(other.Images);
      }
      if (other.VerificationTarget.Length != 0) {
        VerificationTarget = other.VerificationTarget;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (images_ == null) {
              images_ = new global::BioFaceService.BioImagesList();
            }
            input.ReadMessage(images_);
            break;
          }
          case 18: {
            VerificationTarget = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerificationFeedback : pb::IMessage<VerificationFeedback> {
    private static readonly pb::MessageParser<VerificationFeedback> _parser = new pb::MessageParser<VerificationFeedback>(() => new VerificationFeedback());
    public static pb::MessageParser<VerificationFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VerificationFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VerificationFeedback(VerificationFeedback other) : this() {
      EnrollmentFeedback = other.enrollmentFeedback_ != null ? other.EnrollmentFeedback.Clone() : null;
      match_ = other.match_;
    }

    public VerificationFeedback Clone() {
      return new VerificationFeedback(this);
    }

    public const int EnrollmentFeedbackFieldNumber = 1;
    private global::BioFaceService.EnrollmentFeedback enrollmentFeedback_;
    public global::BioFaceService.EnrollmentFeedback EnrollmentFeedback {
      get { return enrollmentFeedback_; }
      set {
        enrollmentFeedback_ = value;
      }
    }

    public const int MatchFieldNumber = 2;
    private float match_;
    public float Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VerificationFeedback);
    }

    public bool Equals(VerificationFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnrollmentFeedback, other.EnrollmentFeedback)) return false;
      if (Match != other.Match) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (enrollmentFeedback_ != null) hash ^= EnrollmentFeedback.GetHashCode();
      if (Match != 0F) hash ^= Match.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enrollmentFeedback_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EnrollmentFeedback);
      }
      if (Match != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Match);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (enrollmentFeedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnrollmentFeedback);
      }
      if (Match != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(VerificationFeedback other) {
      if (other == null) {
        return;
      }
      if (other.enrollmentFeedback_ != null) {
        if (enrollmentFeedback_ == null) {
          enrollmentFeedback_ = new global::BioFaceService.EnrollmentFeedback();
        }
        EnrollmentFeedback.MergeFrom(other.EnrollmentFeedback);
      }
      if (other.Match != 0F) {
        Match = other.Match;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enrollmentFeedback_ == null) {
              enrollmentFeedback_ = new global::BioFaceService.EnrollmentFeedback();
            }
            input.ReadMessage(enrollmentFeedback_);
            break;
          }
          case 21: {
            Match = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IdentificationScore : pb::IMessage<IdentificationScore> {
    private static readonly pb::MessageParser<IdentificationScore> _parser = new pb::MessageParser<IdentificationScore>(() => new IdentificationScore());
    public static pb::MessageParser<IdentificationScore> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public IdentificationScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    public IdentificationScore(IdentificationScore other) : this() {
      score_ = other.score_;
      identificationTarget_ = other.identificationTarget_;
    }

    public IdentificationScore Clone() {
      return new IdentificationScore(this);
    }

    public const int ScoreFieldNumber = 1;
    private float score_;
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public const int IdentificationTargetFieldNumber = 2;
    private string identificationTarget_ = "";
    public string IdentificationTarget {
      get { return identificationTarget_; }
      set {
        identificationTarget_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as IdentificationScore);
    }

    public bool Equals(IdentificationScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (IdentificationTarget != other.IdentificationTarget) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0F) hash ^= Score.GetHashCode();
      if (IdentificationTarget.Length != 0) hash ^= IdentificationTarget.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Score);
      }
      if (IdentificationTarget.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentificationTarget);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (IdentificationTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentificationTarget);
      }
      return size;
    }

    public void MergeFrom(IdentificationScore other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.IdentificationTarget.Length != 0) {
        IdentificationTarget = other.IdentificationTarget;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Score = input.ReadFloat();
            break;
          }
          case 18: {
            IdentificationTarget = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IdentificationFeedback : pb::IMessage<IdentificationFeedback> {
    private static readonly pb::MessageParser<IdentificationFeedback> _parser = new pb::MessageParser<IdentificationFeedback>(() => new IdentificationFeedback());
    public static pb::MessageParser<IdentificationFeedback> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public IdentificationFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    public IdentificationFeedback(IdentificationFeedback other) : this() {
      EnrollmentFeedback = other.enrollmentFeedback_ != null ? other.EnrollmentFeedback.Clone() : null;
      scores_ = other.scores_.Clone();
    }

    public IdentificationFeedback Clone() {
      return new IdentificationFeedback(this);
    }

    public const int EnrollmentFeedbackFieldNumber = 1;
    private global::BioFaceService.EnrollmentFeedback enrollmentFeedback_;
    public global::BioFaceService.EnrollmentFeedback EnrollmentFeedback {
      get { return enrollmentFeedback_; }
      set {
        enrollmentFeedback_ = value;
      }
    }

    public const int ScoresFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BioFaceService.IdentificationScore> _repeated_scores_codec
        = pb::FieldCodec.ForMessage(18, global::BioFaceService.IdentificationScore.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.IdentificationScore> scores_ = new pbc::RepeatedField<global::BioFaceService.IdentificationScore>();
    public pbc::RepeatedField<global::BioFaceService.IdentificationScore> Scores {
      get { return scores_; }
    }

    public override bool Equals(object other) {
      return Equals(other as IdentificationFeedback);
    }

    public bool Equals(IdentificationFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnrollmentFeedback, other.EnrollmentFeedback)) return false;
      if(!scores_.Equals(other.scores_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (enrollmentFeedback_ != null) hash ^= EnrollmentFeedback.GetHashCode();
      hash ^= scores_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (enrollmentFeedback_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EnrollmentFeedback);
      }
      scores_.WriteTo(output, _repeated_scores_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (enrollmentFeedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnrollmentFeedback);
      }
      size += scores_.CalculateSize(_repeated_scores_codec);
      return size;
    }

    public void MergeFrom(IdentificationFeedback other) {
      if (other == null) {
        return;
      }
      if (other.enrollmentFeedback_ != null) {
        if (enrollmentFeedback_ == null) {
          enrollmentFeedback_ = new global::BioFaceService.EnrollmentFeedback();
        }
        EnrollmentFeedback.MergeFrom(other.EnrollmentFeedback);
      }
      scores_.Add(other.scores_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (enrollmentFeedback_ == null) {
              enrollmentFeedback_ = new global::BioFaceService.EnrollmentFeedback();
            }
            input.ReadMessage(enrollmentFeedback_);
            break;
          }
          case 18: {
            scores_.AddEntriesFrom(input, _repeated_scores_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Person(Person other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      dateofbirth_ = other.dateofbirth_;
      gender_ = other.gender_;
      country_ = other.country_;
      city_ = other.city_;
      thumbnail_ = other.thumbnail_;
      comments_ = other.comments_;
      rights_ = other.rights_;
      email_ = other.email_;
      dbstate_ = other.dbstate_;
    }

    public Person Clone() {
      return new Person(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DateofbirthFieldNumber = 4;
    private long dateofbirth_;
    public long Dateofbirth {
      get { return dateofbirth_; }
      set {
        dateofbirth_ = value;
      }
    }

    public const int GenderFieldNumber = 5;
    private global::BioFaceService.Person.Types.Gender gender_ = global::BioFaceService.Person.Types.Gender.None;
    public global::BioFaceService.Person.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    public const int CountryFieldNumber = 6;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CityFieldNumber = 7;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ThumbnailFieldNumber = 8;
    private long thumbnail_;
    public long Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = value;
      }
    }

    public const int CommentsFieldNumber = 9;
    private string comments_ = "";
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RightsFieldNumber = 10;
    private global::BioFaceService.Person.Types.Rights rights_ = global::BioFaceService.Person.Types.Rights.Operator;
    public global::BioFaceService.Person.Types.Rights Rights {
      get { return rights_; }
      set {
        rights_ = value;
      }
    }

    public const int EmailFieldNumber = 11;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DbstateFieldNumber = 12;
    private global::BioFaceService.DbState dbstate_ = global::BioFaceService.DbState.None;
    public global::BioFaceService.DbState Dbstate {
      get { return dbstate_; }
      set {
        dbstate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Dateofbirth != other.Dateofbirth) return false;
      if (Gender != other.Gender) return false;
      if (Country != other.Country) return false;
      if (City != other.City) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Comments != other.Comments) return false;
      if (Rights != other.Rights) return false;
      if (Email != other.Email) return false;
      if (Dbstate != other.Dbstate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Dateofbirth != 0L) hash ^= Dateofbirth.GetHashCode();
      if (Gender != global::BioFaceService.Person.Types.Gender.None) hash ^= Gender.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Thumbnail != 0L) hash ^= Thumbnail.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Rights != global::BioFaceService.Person.Types.Rights.Operator) hash ^= Rights.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Dbstate != global::BioFaceService.DbState.None) hash ^= Dbstate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Dateofbirth != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Dateofbirth);
      }
      if (Gender != global::BioFaceService.Person.Types.Gender.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Gender);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (City.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(City);
      }
      if (Thumbnail != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Thumbnail);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Comments);
      }
      if (Rights != global::BioFaceService.Person.Types.Rights.Operator) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Rights);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (Dbstate != global::BioFaceService.DbState.None) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Dbstate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Dateofbirth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dateofbirth);
      }
      if (Gender != global::BioFaceService.Person.Types.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Thumbnail != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Thumbnail);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Rights != global::BioFaceService.Person.Types.Rights.Operator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rights);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Dbstate != global::BioFaceService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dbstate);
      }
      return size;
    }

    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Dateofbirth != 0L) {
        Dateofbirth = other.Dateofbirth;
      }
      if (other.Gender != global::BioFaceService.Person.Types.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Thumbnail != 0L) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Rights != global::BioFaceService.Person.Types.Rights.Operator) {
        Rights = other.Rights;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Dbstate != global::BioFaceService.DbState.None) {
        Dbstate = other.Dbstate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 32: {
            Dateofbirth = input.ReadInt64();
            break;
          }
          case 40: {
            gender_ = (global::BioFaceService.Person.Types.Gender) input.ReadEnum();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
          case 58: {
            City = input.ReadString();
            break;
          }
          case 64: {
            Thumbnail = input.ReadInt64();
            break;
          }
          case 74: {
            Comments = input.ReadString();
            break;
          }
          case 80: {
            rights_ = (global::BioFaceService.Person.Types.Rights) input.ReadEnum();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 96: {
            dbstate_ = (global::BioFaceService.DbState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Gender {
        None = 0,
        Male = 1,
        Female = 2,
      }

      public enum Rights {
        Operator = 0,
        Manager = 1,
        Supervisor = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDevice : pb::IMessage<AccessDevice> {
    private static readonly pb::MessageParser<AccessDevice> _parser = new pb::MessageParser<AccessDevice>(() => new AccessDevice());
    public static pb::MessageParser<AccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDevice(AccessDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      portname_ = other.portname_;
      type_ = other.type_;
    }

    public AccessDevice Clone() {
      return new AccessDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int PortnameFieldNumber = 3;
    private string portname_ = "";
    public string Portname {
      get { return portname_; }
      set {
        portname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TypeFieldNumber = 4;
    private global::BioFaceService.AccessDevice.Types.AccessDeviceType type_ = global::BioFaceService.AccessDevice.Types.AccessDeviceType.DeviceNone;
    public global::BioFaceService.AccessDevice.Types.AccessDeviceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDevice);
    }

    public bool Equals(AccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Portname != other.Portname) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Portname.Length != 0) hash ^= Portname.GetHashCode();
      if (Type != global::BioFaceService.AccessDevice.Types.AccessDeviceType.DeviceNone) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Portname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Portname);
      }
      if (Type != global::BioFaceService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Portname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Portname);
      }
      if (Type != global::BioFaceService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(AccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Portname.Length != 0) {
        Portname = other.Portname;
      }
      if (other.Type != global::BioFaceService.AccessDevice.Types.AccessDeviceType.DeviceNone) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Portname = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::BioFaceService.AccessDevice.Types.AccessDeviceType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AccessDeviceType {
        DeviceNone = 0,
        DeviceIn = 1,
        DeviceOut = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDevice : pb::IMessage<CaptureDevice> {
    private static readonly pb::MessageParser<CaptureDevice> _parser = new pb::MessageParser<CaptureDevice>(() => new CaptureDevice());
    public static pb::MessageParser<CaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDevice(CaptureDevice other) : this() {
      id_ = other.id_;
      locationid_ = other.locationid_;
      devicename_ = other.devicename_;
    }

    public CaptureDevice Clone() {
      return new CaptureDevice(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationidFieldNumber = 2;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int DevicenameFieldNumber = 3;
    private string devicename_ = "";
    public string Devicename {
      get { return devicename_; }
      set {
        devicename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDevice);
    }

    public bool Equals(CaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Locationid != other.Locationid) return false;
      if (Devicename != other.Devicename) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Devicename.Length != 0) hash ^= Devicename.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Locationid);
      }
      if (Devicename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Devicename);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Devicename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Devicename);
      }
      return size;
    }

    public void MergeFrom(CaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Devicename.Length != 0) {
        Devicename = other.Devicename;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Locationid = input.ReadInt64();
            break;
          }
          case 26: {
            Devicename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Card(Card other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      uniqueNumber_ = other.uniqueNumber_;
    }

    public Card Clone() {
      return new Card(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int UniqueNumberFieldNumber = 3;
    private string uniqueNumber_ = "";
    public string UniqueNumber {
      get { return uniqueNumber_; }
      set {
        uniqueNumber_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (UniqueNumber != other.UniqueNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (UniqueNumber.Length != 0) hash ^= UniqueNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (UniqueNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (UniqueNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueNumber);
      }
      return size;
    }

    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.UniqueNumber.Length != 0) {
        UniqueNumber = other.UniqueNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 26: {
            UniqueNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Location(Location other) : this() {
      id_ = other.id_;
      locationName_ = other.locationName_;
      desctiption_ = other.desctiption_;
    }

    public Location Clone() {
      return new Location(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int LocationNameFieldNumber = 2;
    private string locationName_ = "";
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DesctiptionFieldNumber = 3;
    private string desctiption_ = "";
    public string Desctiption {
      get { return desctiption_; }
      set {
        desctiption_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LocationName != other.LocationName) return false;
      if (Desctiption != other.Desctiption) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Desctiption.Length != 0) hash ^= Desctiption.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocationName);
      }
      if (Desctiption.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desctiption);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Desctiption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desctiption);
      }
      return size;
    }

    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Desctiption.Length != 0) {
        Desctiption = other.Desctiption;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            LocationName = input.ReadString();
            break;
          }
          case 26: {
            Desctiption = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photo : pb::IMessage<Photo> {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photo(Photo other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      type_ = other.type_;
      firLocation_ = other.firLocation_;
      fileLocation_ = other.fileLocation_;
    }

    public Photo Clone() {
      return new Photo(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int TypeFieldNumber = 3;
    private global::BioFaceService.Photo.Types.PhotoSizeType type_ = global::BioFaceService.Photo.Types.PhotoSizeType.Full;
    public global::BioFaceService.Photo.Types.PhotoSizeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int FirLocationFieldNumber = 4;
    private string firLocation_ = "";
    public string FirLocation {
      get { return firLocation_; }
      set {
        firLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FileLocationFieldNumber = 5;
    private string fileLocation_ = "";
    public string FileLocation {
      get { return fileLocation_; }
      set {
        fileLocation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Type != other.Type) return false;
      if (FirLocation != other.FirLocation) return false;
      if (FileLocation != other.FileLocation) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Type != global::BioFaceService.Photo.Types.PhotoSizeType.Full) hash ^= Type.GetHashCode();
      if (FirLocation.Length != 0) hash ^= FirLocation.GetHashCode();
      if (FileLocation.Length != 0) hash ^= FileLocation.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Type != global::BioFaceService.Photo.Types.PhotoSizeType.Full) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (FirLocation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirLocation);
      }
      if (FileLocation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FileLocation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Type != global::BioFaceService.Photo.Types.PhotoSizeType.Full) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FirLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirLocation);
      }
      if (FileLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileLocation);
      }
      return size;
    }

    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Type != global::BioFaceService.Photo.Types.PhotoSizeType.Full) {
        Type = other.Type;
      }
      if (other.FirLocation.Length != 0) {
        FirLocation = other.FirLocation;
      }
      if (other.FileLocation.Length != 0) {
        FileLocation = other.FileLocation;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            type_ = (global::BioFaceService.Photo.Types.PhotoSizeType) input.ReadEnum();
            break;
          }
          case 34: {
            FirLocation = input.ReadString();
            break;
          }
          case 42: {
            FileLocation = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum PhotoSizeType {
        Full = 0,
        Croped = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Visitor : pb::IMessage<Visitor> {
    private static readonly pb::MessageParser<Visitor> _parser = new pb::MessageParser<Visitor>(() => new Visitor());
    public static pb::MessageParser<Visitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Visitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Visitor(Visitor other) : this() {
      id_ = other.id_;
      personid_ = other.personid_;
      photoid_ = other.photoid_;
      locationid_ = other.locationid_;
      time_ = other.time_;
      status_ = other.status_;
    }

    public Visitor Clone() {
      return new Visitor(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int PersonidFieldNumber = 2;
    private long personid_;
    public long Personid {
      get { return personid_; }
      set {
        personid_ = value;
      }
    }

    public const int PhotoidFieldNumber = 3;
    private long photoid_;
    public long Photoid {
      get { return photoid_; }
      set {
        photoid_ = value;
      }
    }

    public const int LocationidFieldNumber = 4;
    private long locationid_;
    public long Locationid {
      get { return locationid_; }
      set {
        locationid_ = value;
      }
    }

    public const int TimeFieldNumber = 5;
    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public const int StatusFieldNumber = 6;
    private global::BioFaceService.Visitor.Types.VisitorStatus status_ = global::BioFaceService.Visitor.Types.VisitorStatus.Success;
    public global::BioFaceService.Visitor.Types.VisitorStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Visitor);
    }

    public bool Equals(Visitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Personid != other.Personid) return false;
      if (Photoid != other.Photoid) return false;
      if (Locationid != other.Locationid) return false;
      if (Time != other.Time) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Personid != 0L) hash ^= Personid.GetHashCode();
      if (Photoid != 0L) hash ^= Photoid.GetHashCode();
      if (Locationid != 0L) hash ^= Locationid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Status != global::BioFaceService.Visitor.Types.VisitorStatus.Success) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Personid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Personid);
      }
      if (Photoid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Photoid);
      }
      if (Locationid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Locationid);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (Status != global::BioFaceService.Visitor.Types.VisitorStatus.Success) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Personid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Personid);
      }
      if (Photoid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Photoid);
      }
      if (Locationid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Locationid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Status != global::BioFaceService.Visitor.Types.VisitorStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    public void MergeFrom(Visitor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Personid != 0L) {
        Personid = other.Personid;
      }
      if (other.Photoid != 0L) {
        Photoid = other.Photoid;
      }
      if (other.Locationid != 0L) {
        Locationid = other.Locationid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Status != global::BioFaceService.Visitor.Types.VisitorStatus.Success) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Personid = input.ReadInt64();
            break;
          }
          case 24: {
            Photoid = input.ReadInt64();
            break;
          }
          case 32: {
            Locationid = input.ReadInt64();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            status_ = (global::BioFaceService.Visitor.Types.VisitorStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum VisitorStatus {
        Success = 0,
        Failed = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonList : pb::IMessage<PersonList> {
    private static readonly pb::MessageParser<PersonList> _parser = new pb::MessageParser<PersonList>(() => new PersonList());
    public static pb::MessageParser<PersonList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PersonList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PersonList(PersonList other) : this() {
      persons_ = other.persons_.Clone();
    }

    public PersonList Clone() {
      return new PersonList(this);
    }

    public const int PersonsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.Person> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.Person.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.Person> persons_ = new pbc::RepeatedField<global::BioFaceService.Person>();
    public pbc::RepeatedField<global::BioFaceService.Person> Persons {
      get { return persons_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PersonList);
    }

    public bool Equals(PersonList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!persons_.Equals(other.persons_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= persons_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      persons_.WriteTo(output, _repeated_persons_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += persons_.CalculateSize(_repeated_persons_codec);
      return size;
    }

    public void MergeFrom(PersonList other) {
      if (other == null) {
        return;
      }
      persons_.Add(other.persons_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PhotoList : pb::IMessage<PhotoList> {
    private static readonly pb::MessageParser<PhotoList> _parser = new pb::MessageParser<PhotoList>(() => new PhotoList());
    public static pb::MessageParser<PhotoList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PhotoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PhotoList(PhotoList other) : this() {
      photos_ = other.photos_.Clone();
    }

    public PhotoList Clone() {
      return new PhotoList(this);
    }

    public const int PhotosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.Photo.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.Photo> photos_ = new pbc::RepeatedField<global::BioFaceService.Photo>();
    public pbc::RepeatedField<global::BioFaceService.Photo> Photos {
      get { return photos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PhotoList);
    }

    public bool Equals(PhotoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!photos_.Equals(other.photos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= photos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      photos_.WriteTo(output, _repeated_photos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += photos_.CalculateSize(_repeated_photos_codec);
      return size;
    }

    public void MergeFrom(PhotoList other) {
      if (other == null) {
        return;
      }
      photos_.Add(other.photos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VisitorList : pb::IMessage<VisitorList> {
    private static readonly pb::MessageParser<VisitorList> _parser = new pb::MessageParser<VisitorList>(() => new VisitorList());
    public static pb::MessageParser<VisitorList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VisitorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VisitorList(VisitorList other) : this() {
      visitors_ = other.visitors_.Clone();
    }

    public VisitorList Clone() {
      return new VisitorList(this);
    }

    public const int VisitorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.Visitor> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.Visitor.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.Visitor> visitors_ = new pbc::RepeatedField<global::BioFaceService.Visitor>();
    public pbc::RepeatedField<global::BioFaceService.Visitor> Visitors {
      get { return visitors_; }
    }

    public override bool Equals(object other) {
      return Equals(other as VisitorList);
    }

    public bool Equals(VisitorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visitors_.Equals(other.visitors_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= visitors_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      visitors_.WriteTo(output, _repeated_visitors_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      return size;
    }

    public void MergeFrom(VisitorList other) {
      if (other == null) {
        return;
      }
      visitors_.Add(other.visitors_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LocationList : pb::IMessage<LocationList> {
    private static readonly pb::MessageParser<LocationList> _parser = new pb::MessageParser<LocationList>(() => new LocationList());
    public static pb::MessageParser<LocationList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LocationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LocationList(LocationList other) : this() {
      locations_ = other.locations_.Clone();
    }

    public LocationList Clone() {
      return new LocationList(this);
    }

    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.Location> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.Location.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.Location> locations_ = new pbc::RepeatedField<global::BioFaceService.Location>();
    public pbc::RepeatedField<global::BioFaceService.Location> Locations {
      get { return locations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LocationList);
    }

    public bool Equals(LocationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    public void MergeFrom(LocationList other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccessDeviceList : pb::IMessage<AccessDeviceList> {
    private static readonly pb::MessageParser<AccessDeviceList> _parser = new pb::MessageParser<AccessDeviceList>(() => new AccessDeviceList());
    public static pb::MessageParser<AccessDeviceList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccessDeviceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccessDeviceList(AccessDeviceList other) : this() {
      accessDevices_ = other.accessDevices_.Clone();
    }

    public AccessDeviceList Clone() {
      return new AccessDeviceList(this);
    }

    public const int AccessDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.AccessDevice> _repeated_accessDevices_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.AccessDevice.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.AccessDevice> accessDevices_ = new pbc::RepeatedField<global::BioFaceService.AccessDevice>();
    public pbc::RepeatedField<global::BioFaceService.AccessDevice> AccessDevices {
      get { return accessDevices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AccessDeviceList);
    }

    public bool Equals(AccessDeviceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accessDevices_.Equals(other.accessDevices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= accessDevices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      accessDevices_.WriteTo(output, _repeated_accessDevices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += accessDevices_.CalculateSize(_repeated_accessDevices_codec);
      return size;
    }

    public void MergeFrom(AccessDeviceList other) {
      if (other == null) {
        return;
      }
      accessDevices_.Add(other.accessDevices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accessDevices_.AddEntriesFrom(input, _repeated_accessDevices_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CardList : pb::IMessage<CardList> {
    private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
    public static pb::MessageParser<CardList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CardList(CardList other) : this() {
      cards_ = other.cards_.Clone();
    }

    public CardList Clone() {
      return new CardList(this);
    }

    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.Card.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.Card> cards_ = new pbc::RepeatedField<global::BioFaceService.Card>();
    public pbc::RepeatedField<global::BioFaceService.Card> Cards {
      get { return cards_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CardList);
    }

    public bool Equals(CardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(CardList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CaptureDeviceList : pb::IMessage<CaptureDeviceList> {
    private static readonly pb::MessageParser<CaptureDeviceList> _parser = new pb::MessageParser<CaptureDeviceList>(() => new CaptureDeviceList());
    public static pb::MessageParser<CaptureDeviceList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CaptureDeviceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CaptureDeviceList(CaptureDeviceList other) : this() {
      captureDevices_ = other.captureDevices_.Clone();
    }

    public CaptureDeviceList Clone() {
      return new CaptureDeviceList(this);
    }

    public const int CaptureDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.CaptureDevice> _repeated_captureDevices_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.CaptureDevice.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.CaptureDevice> captureDevices_ = new pbc::RepeatedField<global::BioFaceService.CaptureDevice>();
    public pbc::RepeatedField<global::BioFaceService.CaptureDevice> CaptureDevices {
      get { return captureDevices_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CaptureDeviceList);
    }

    public bool Equals(CaptureDeviceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!captureDevices_.Equals(other.captureDevices_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= captureDevices_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      captureDevices_.WriteTo(output, _repeated_captureDevices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += captureDevices_.CalculateSize(_repeated_captureDevices_codec);
      return size;
    }

    public void MergeFrom(CaptureDeviceList other) {
      if (other == null) {
        return;
      }
      captureDevices_.Add(other.captureDevices_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            captureDevices_.AddEntriesFrom(input, _repeated_captureDevices_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResultPair : pb::IMessage<ResultPair> {
    private static readonly pb::MessageParser<ResultPair> _parser = new pb::MessageParser<ResultPair>(() => new ResultPair());
    public static pb::MessageParser<ResultPair> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ResultPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResultPair(ResultPair other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      status_ = other.status_;
    }

    public ResultPair Clone() {
      return new ResultPair(this);
    }

    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int StateFieldNumber = 2;
    private global::BioFaceService.DbState state_ = global::BioFaceService.DbState.None;
    public global::BioFaceService.DbState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public const int StatusFieldNumber = 3;
    private global::BioFaceService.ResultStatus status_ = global::BioFaceService.ResultStatus.Success;
    public global::BioFaceService.ResultStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResultPair);
    }

    public bool Equals(ResultPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (State != global::BioFaceService.DbState.None) hash ^= State.GetHashCode();
      if (Status != global::BioFaceService.ResultStatus.Success) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (State != global::BioFaceService.DbState.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (Status != global::BioFaceService.ResultStatus.Success) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (State != global::BioFaceService.DbState.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Status != global::BioFaceService.ResultStatus.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    public void MergeFrom(ResultPair other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.State != global::BioFaceService.DbState.None) {
        State = other.State;
      }
      if (other.Status != global::BioFaceService.ResultStatus.Success) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            state_ = (global::BioFaceService.DbState) input.ReadEnum();
            break;
          }
          case 24: {
            status_ = (global::BioFaceService.ResultStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Result(Result other) : this() {
      status_ = other.status_.Clone();
    }

    public Result Clone() {
      return new Result(this);
    }

    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.ResultPair> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.ResultPair.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.ResultPair> status_ = new pbc::RepeatedField<global::BioFaceService.ResultPair>();
    public pbc::RepeatedField<global::BioFaceService.ResultPair> Status {
      get { return status_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPerson : pb::IMessage<CommandPerson> {
    private static readonly pb::MessageParser<CommandPerson> _parser = new pb::MessageParser<CommandPerson>(() => new CommandPerson());
    public static pb::MessageParser<CommandPerson> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPerson() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPerson(CommandPerson other) : this() {
      all_ = other.all_;
    }

    public CommandPerson Clone() {
      return new CommandPerson(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPerson);
    }

    public bool Equals(CommandPerson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandPerson other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandVisitor : pb::IMessage<CommandVisitor> {
    private static readonly pb::MessageParser<CommandVisitor> _parser = new pb::MessageParser<CommandVisitor>(() => new CommandVisitor());
    public static pb::MessageParser<CommandVisitor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandVisitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandVisitor(CommandVisitor other) : this() {
      all_ = other.all_;
    }

    public CommandVisitor Clone() {
      return new CommandVisitor(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandVisitor);
    }

    public bool Equals(CommandVisitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandVisitor other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandLocation : pb::IMessage<CommandLocation> {
    private static readonly pb::MessageParser<CommandLocation> _parser = new pb::MessageParser<CommandLocation>(() => new CommandLocation());
    public static pb::MessageParser<CommandLocation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[29]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandLocation(CommandLocation other) : this() {
      all_ = other.all_;
    }

    public CommandLocation Clone() {
      return new CommandLocation(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandLocation);
    }

    public bool Equals(CommandLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandLocation other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandAccessDevice : pb::IMessage<CommandAccessDevice> {
    private static readonly pb::MessageParser<CommandAccessDevice> _parser = new pb::MessageParser<CommandAccessDevice>(() => new CommandAccessDevice());
    public static pb::MessageParser<CommandAccessDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[30]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandAccessDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandAccessDevice(CommandAccessDevice other) : this() {
      all_ = other.all_;
    }

    public CommandAccessDevice Clone() {
      return new CommandAccessDevice(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandAccessDevice);
    }

    public bool Equals(CommandAccessDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandAccessDevice other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandPhoto : pb::IMessage<CommandPhoto> {
    private static readonly pb::MessageParser<CommandPhoto> _parser = new pb::MessageParser<CommandPhoto>(() => new CommandPhoto());
    public static pb::MessageParser<CommandPhoto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[31]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandPhoto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandPhoto(CommandPhoto other) : this() {
      all_ = other.all_;
    }

    public CommandPhoto Clone() {
      return new CommandPhoto(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandPhoto);
    }

    public bool Equals(CommandPhoto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandPhoto other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandCaptureDevice : pb::IMessage<CommandCaptureDevice> {
    private static readonly pb::MessageParser<CommandCaptureDevice> _parser = new pb::MessageParser<CommandCaptureDevice>(() => new CommandCaptureDevice());
    public static pb::MessageParser<CommandCaptureDevice> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[32]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandCaptureDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandCaptureDevice(CommandCaptureDevice other) : this() {
      all_ = other.all_;
    }

    public CommandCaptureDevice Clone() {
      return new CommandCaptureDevice(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandCaptureDevice);
    }

    public bool Equals(CommandCaptureDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandCaptureDevice other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandCard : pb::IMessage<CommandCard> {
    private static readonly pb::MessageParser<CommandCard> _parser = new pb::MessageParser<CommandCard>(() => new CommandCard());
    public static pb::MessageParser<CommandCard> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[33]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandCard(CommandCard other) : this() {
      all_ = other.all_;
    }

    public CommandCard Clone() {
      return new CommandCard(this);
    }

    public const int AllFieldNumber = 1;
    private bool all_;
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandCard);
    }

    public bool Equals(CommandCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(CommandCard other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[34]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Command(Command other) : this() {
      commandId_ = other.commandId_;
    }

    public Command Clone() {
      return new Command(this);
    }

    public const int CommandIdFieldNumber = 1;
    private global::BioFaceService.Command.Types.ServerCommand commandId_ = global::BioFaceService.Command.Types.ServerCommand.GetPerson;
    public global::BioFaceService.Command.Types.ServerCommand CommandId {
      get { return commandId_; }
      set {
        commandId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandId != other.CommandId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CommandId != global::BioFaceService.Command.Types.ServerCommand.GetPerson) hash ^= CommandId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandId != global::BioFaceService.Command.Types.ServerCommand.GetPerson) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CommandId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CommandId != global::BioFaceService.Command.Types.ServerCommand.GetPerson) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandId);
      }
      return size;
    }

    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.CommandId != global::BioFaceService.Command.Types.ServerCommand.GetPerson) {
        CommandId = other.CommandId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            commandId_ = (global::BioFaceService.Command.Types.ServerCommand) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ServerCommand {
        GetPerson = 0,
        GetVisitor = 1,
        GetPhoto = 2,
        GetLocation = 3,
        GetAccessDevice = 4,
        GetCaptureDevice = 5,
        GetCard = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
