// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bioface_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioFaceService {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BiofaceService {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BiofaceService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChViaW9mYWNlX3NlcnZpY2UucHJvdG8SDkJpb0ZhY2VTZXJ2aWNlIiMKBVBv", 
            "aW50EgwKBHhQb3MYASABKAISDAoEeVBvcxgCIAEoAiJSCglSZWN0YW5nbGUS", 
            "JgoHZmFjZVBvcxgBIAEoCzIVLkJpb0ZhY2VTZXJ2aWNlLlBvaW50Eg0KBVdp", 
            "ZHRoGAIgASgFEg4KBkhlaWdodBgDIAEoBSJqCgpPYmplY3RJbmZvEjEKDm9i", 
            "amVjdExvY2F0aW9uGAEgASgLMhkuQmlvRmFjZVNlcnZpY2UuUmVjdGFuZ2xl", 
            "EhIKCmNvbmZpZGVuY2UYAiABKAISFQoNcm90YXRpb25BbmdsZRgDIAEoAiJC", 
            "ChNEZXRlY3RlZE9iamVjdHNJbmZvEisKB29iamVjdHMYASADKAsyGi5CaW9G", 
            "YWNlU2VydmljZS5PYmplY3RJbmZvIh8KCEJpb0ltYWdlEhMKC2Rlc2NyaXB0", 
            "aW9uGAEgASgMMmQKD0Jpb0ZhY2VEZXRlY3RvchJRCgpEZXRlY3RGYWNlEhgu", 
            "QmlvRmFjZVNlcnZpY2UuQmlvSW1hZ2UaIy5CaW9GYWNlU2VydmljZS5EZXRl", 
            "Y3RlZE9iamVjdHNJbmZvIgAoATABQg8KB2V4LmdycGOiAgNSVEdiBnByb3Rv", 
            "Mw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Point), new[]{ "XPos", "YPos" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.Rectangle), new[]{ "FacePos", "Width", "Height" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.ObjectInfo), new[]{ "ObjectLocation", "Confidence", "RotationAngle" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.DetectedObjectsInfo), new[]{ "Objects" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BioFaceService.BioImage), new[]{ "Description" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
    }

    public Point Clone() {
      return new Point(this);
    }

    public const int XPosFieldNumber = 1;
    private float xPos_;
    public float XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    public const int YPosFieldNumber = 2;
    private float yPos_;
    public float YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (XPos != 0F) hash ^= XPos.GetHashCode();
      if (YPos != 0F) hash ^= YPos.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (XPos != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XPos);
      }
      if (YPos != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YPos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (XPos != 0F) {
        size += 1 + 4;
      }
      if (YPos != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.XPos != 0F) {
        XPos = other.XPos;
      }
      if (other.YPos != 0F) {
        YPos = other.YPos;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XPos = input.ReadFloat();
            break;
          }
          case 21: {
            YPos = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Rectangle : pb::IMessage<Rectangle> {
    private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
    public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Rectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Rectangle(Rectangle other) : this() {
      FacePos = other.facePos_ != null ? other.FacePos.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
    }

    public Rectangle Clone() {
      return new Rectangle(this);
    }

    public const int FacePosFieldNumber = 1;
    private global::BioFaceService.Point facePos_;
    public global::BioFaceService.Point FacePos {
      get { return facePos_; }
      set {
        facePos_ = value;
      }
    }

    public const int WidthFieldNumber = 2;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    public const int HeightFieldNumber = 3;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Rectangle);
    }

    public bool Equals(Rectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FacePos, other.FacePos)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (facePos_ != null) hash ^= FacePos.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (facePos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FacePos);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (facePos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FacePos);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    public void MergeFrom(Rectangle other) {
      if (other == null) {
        return;
      }
      if (other.facePos_ != null) {
        if (facePos_ == null) {
          facePos_ = new global::BioFaceService.Point();
        }
        FacePos.MergeFrom(other.FacePos);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (facePos_ == null) {
              facePos_ = new global::BioFaceService.Point();
            }
            input.ReadMessage(facePos_);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ObjectInfo : pb::IMessage<ObjectInfo> {
    private static readonly pb::MessageParser<ObjectInfo> _parser = new pb::MessageParser<ObjectInfo>(() => new ObjectInfo());
    public static pb::MessageParser<ObjectInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ObjectInfo(ObjectInfo other) : this() {
      ObjectLocation = other.objectLocation_ != null ? other.ObjectLocation.Clone() : null;
      confidence_ = other.confidence_;
      rotationAngle_ = other.rotationAngle_;
    }

    public ObjectInfo Clone() {
      return new ObjectInfo(this);
    }

    public const int ObjectLocationFieldNumber = 1;
    private global::BioFaceService.Rectangle objectLocation_;
    public global::BioFaceService.Rectangle ObjectLocation {
      get { return objectLocation_; }
      set {
        objectLocation_ = value;
      }
    }

    public const int ConfidenceFieldNumber = 2;
    private float confidence_;
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    public const int RotationAngleFieldNumber = 3;
    private float rotationAngle_;
    public float RotationAngle {
      get { return rotationAngle_; }
      set {
        rotationAngle_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ObjectInfo);
    }

    public bool Equals(ObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectLocation, other.ObjectLocation)) return false;
      if (Confidence != other.Confidence) return false;
      if (RotationAngle != other.RotationAngle) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (objectLocation_ != null) hash ^= ObjectLocation.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      if (RotationAngle != 0F) hash ^= RotationAngle.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (objectLocation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectLocation);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Confidence);
      }
      if (RotationAngle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RotationAngle);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (objectLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectLocation);
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (RotationAngle != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(ObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectLocation_ != null) {
        if (objectLocation_ == null) {
          objectLocation_ = new global::BioFaceService.Rectangle();
        }
        ObjectLocation.MergeFrom(other.ObjectLocation);
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.RotationAngle != 0F) {
        RotationAngle = other.RotationAngle;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (objectLocation_ == null) {
              objectLocation_ = new global::BioFaceService.Rectangle();
            }
            input.ReadMessage(objectLocation_);
            break;
          }
          case 21: {
            Confidence = input.ReadFloat();
            break;
          }
          case 29: {
            RotationAngle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DetectedObjectsInfo : pb::IMessage<DetectedObjectsInfo> {
    private static readonly pb::MessageParser<DetectedObjectsInfo> _parser = new pb::MessageParser<DetectedObjectsInfo>(() => new DetectedObjectsInfo());
    public static pb::MessageParser<DetectedObjectsInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DetectedObjectsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DetectedObjectsInfo(DetectedObjectsInfo other) : this() {
      objects_ = other.objects_.Clone();
    }

    public DetectedObjectsInfo Clone() {
      return new DetectedObjectsInfo(this);
    }

    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BioFaceService.ObjectInfo> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::BioFaceService.ObjectInfo.Parser);
    private readonly pbc::RepeatedField<global::BioFaceService.ObjectInfo> objects_ = new pbc::RepeatedField<global::BioFaceService.ObjectInfo>();
    public pbc::RepeatedField<global::BioFaceService.ObjectInfo> Objects {
      get { return objects_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DetectedObjectsInfo);
    }

    public bool Equals(DetectedObjectsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      objects_.WriteTo(output, _repeated_objects_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      return size;
    }

    public void MergeFrom(DetectedObjectsInfo other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BioImage : pb::IMessage<BioImage> {
    private static readonly pb::MessageParser<BioImage> _parser = new pb::MessageParser<BioImage>(() => new BioImage());
    public static pb::MessageParser<BioImage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioFaceService.BiofaceService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BioImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BioImage(BioImage other) : this() {
      description_ = other.description_;
    }

    public BioImage Clone() {
      return new BioImage(this);
    }

    public const int DescriptionFieldNumber = 1;
    private pb::ByteString description_ = pb::ByteString.Empty;
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BioImage);
    }

    public bool Equals(BioImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Description);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      return size;
    }

    public void MergeFrom(BioImage other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Description = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
