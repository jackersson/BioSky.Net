// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bioface_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace BioFaceService {
  public static class BioFaceDetector
  {
    static readonly string __ServiceName = "BioFaceService.BioFaceDetector";

    static readonly Marshaller<global::BioFaceService.CommandPerson> __Marshaller_CommandPerson = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandPerson.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.PersonList> __Marshaller_PersonList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.PersonList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.Result> __Marshaller_Result = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.Result.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandPhoto> __Marshaller_CommandPhoto = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandPhoto.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.PhotoList> __Marshaller_PhotoList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.PhotoList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandVisitor> __Marshaller_CommandVisitor = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandVisitor.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.VisitorList> __Marshaller_VisitorList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.VisitorList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandLocation> __Marshaller_CommandLocation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandLocation.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.LocationList> __Marshaller_LocationList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.LocationList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandAccessDevice> __Marshaller_CommandAccessDevice = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandAccessDevice.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.AccessDeviceList> __Marshaller_AccessDeviceList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.AccessDeviceList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandCaptureDevice> __Marshaller_CommandCaptureDevice = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandCaptureDevice.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CaptureDeviceList> __Marshaller_CaptureDeviceList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CaptureDeviceList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CommandCard> __Marshaller_CommandCard = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CommandCard.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.CardList> __Marshaller_CardList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.CardList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.BioImage> __Marshaller_BioImage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.BioImage.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.DetectedObjectsInfo> __Marshaller_DetectedObjectsInfo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.DetectedObjectsInfo.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.BioImagesList> __Marshaller_BioImagesList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.BioImagesList.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.EnrollmentFeedback> __Marshaller_EnrollmentFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.EnrollmentFeedback.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.VerificationData> __Marshaller_VerificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.VerificationData.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.VerificationFeedback> __Marshaller_VerificationFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.VerificationFeedback.Parser.ParseFrom);
    static readonly Marshaller<global::BioFaceService.IdentificationFeedback> __Marshaller_IdentificationFeedback = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BioFaceService.IdentificationFeedback.Parser.ParseFrom);

    static readonly Method<global::BioFaceService.CommandPerson, global::BioFaceService.PersonList> __Method_PersonSelect = new Method<global::BioFaceService.CommandPerson, global::BioFaceService.PersonList>(
        MethodType.Unary,
        __ServiceName,
        "PersonSelect",
        __Marshaller_CommandPerson,
        __Marshaller_PersonList);

    static readonly Method<global::BioFaceService.PersonList, global::BioFaceService.Result> __Method_PersonUpdate = new Method<global::BioFaceService.PersonList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "PersonUpdate",
        __Marshaller_PersonList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandPhoto, global::BioFaceService.PhotoList> __Method_PhotoSelect = new Method<global::BioFaceService.CommandPhoto, global::BioFaceService.PhotoList>(
        MethodType.Unary,
        __ServiceName,
        "PhotoSelect",
        __Marshaller_CommandPhoto,
        __Marshaller_PhotoList);

    static readonly Method<global::BioFaceService.PhotoList, global::BioFaceService.Result> __Method_PhotoUpdate = new Method<global::BioFaceService.PhotoList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "PhotoUpdate",
        __Marshaller_PhotoList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandVisitor, global::BioFaceService.VisitorList> __Method_VisitorSelect = new Method<global::BioFaceService.CommandVisitor, global::BioFaceService.VisitorList>(
        MethodType.Unary,
        __ServiceName,
        "VisitorSelect",
        __Marshaller_CommandVisitor,
        __Marshaller_VisitorList);

    static readonly Method<global::BioFaceService.VisitorList, global::BioFaceService.Result> __Method_VisitorUpdate = new Method<global::BioFaceService.VisitorList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "VisitorUpdate",
        __Marshaller_VisitorList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandLocation, global::BioFaceService.LocationList> __Method_LocationSelect = new Method<global::BioFaceService.CommandLocation, global::BioFaceService.LocationList>(
        MethodType.Unary,
        __ServiceName,
        "LocationSelect",
        __Marshaller_CommandLocation,
        __Marshaller_LocationList);

    static readonly Method<global::BioFaceService.LocationList, global::BioFaceService.Result> __Method_LocationUpdate = new Method<global::BioFaceService.LocationList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "LocationUpdate",
        __Marshaller_LocationList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandAccessDevice, global::BioFaceService.AccessDeviceList> __Method_AccessDeviceSelect = new Method<global::BioFaceService.CommandAccessDevice, global::BioFaceService.AccessDeviceList>(
        MethodType.Unary,
        __ServiceName,
        "AccessDeviceSelect",
        __Marshaller_CommandAccessDevice,
        __Marshaller_AccessDeviceList);

    static readonly Method<global::BioFaceService.AccessDeviceList, global::BioFaceService.Result> __Method_AccessDeviceUpdate = new Method<global::BioFaceService.AccessDeviceList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "AccessDeviceUpdate",
        __Marshaller_AccessDeviceList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandCaptureDevice, global::BioFaceService.CaptureDeviceList> __Method_CaptureDeviceSelect = new Method<global::BioFaceService.CommandCaptureDevice, global::BioFaceService.CaptureDeviceList>(
        MethodType.Unary,
        __ServiceName,
        "CaptureDeviceSelect",
        __Marshaller_CommandCaptureDevice,
        __Marshaller_CaptureDeviceList);

    static readonly Method<global::BioFaceService.CaptureDeviceList, global::BioFaceService.Result> __Method_CaptureDeviceUpdate = new Method<global::BioFaceService.CaptureDeviceList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "CaptureDeviceUpdate",
        __Marshaller_CaptureDeviceList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.CommandCard, global::BioFaceService.CardList> __Method_CardSelect = new Method<global::BioFaceService.CommandCard, global::BioFaceService.CardList>(
        MethodType.Unary,
        __ServiceName,
        "CardSelect",
        __Marshaller_CommandCard,
        __Marshaller_CardList);

    static readonly Method<global::BioFaceService.CardList, global::BioFaceService.Result> __Method_CardUpdate = new Method<global::BioFaceService.CardList, global::BioFaceService.Result>(
        MethodType.Unary,
        __ServiceName,
        "CardUpdate",
        __Marshaller_CardList,
        __Marshaller_Result);

    static readonly Method<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo> __Method_DetectFace = new Method<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "DetectFace",
        __Marshaller_BioImage,
        __Marshaller_DetectedObjectsInfo);

    static readonly Method<global::BioFaceService.BioImagesList, global::BioFaceService.EnrollmentFeedback> __Method_EnrollFace = new Method<global::BioFaceService.BioImagesList, global::BioFaceService.EnrollmentFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "EnrollFace",
        __Marshaller_BioImagesList,
        __Marshaller_EnrollmentFeedback);

    static readonly Method<global::BioFaceService.VerificationData, global::BioFaceService.VerificationFeedback> __Method_VerifyFace = new Method<global::BioFaceService.VerificationData, global::BioFaceService.VerificationFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "VerifyFace",
        __Marshaller_VerificationData,
        __Marshaller_VerificationFeedback);

    static readonly Method<global::BioFaceService.BioImagesList, global::BioFaceService.IdentificationFeedback> __Method_IdentifyFace = new Method<global::BioFaceService.BioImagesList, global::BioFaceService.IdentificationFeedback>(
        MethodType.ServerStreaming,
        __ServiceName,
        "IdentifyFace",
        __Marshaller_BioImagesList,
        __Marshaller_IdentificationFeedback);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BioFaceService.BiofaceService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBioFaceDetectorClient
    {
      global::BioFaceService.PersonList PersonSelect(global::BioFaceService.CommandPerson request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.PersonList PersonSelect(global::BioFaceService.CommandPerson request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.PersonList> PersonSelectAsync(global::BioFaceService.CommandPerson request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.PersonList> PersonSelectAsync(global::BioFaceService.CommandPerson request, CallOptions options);
      global::BioFaceService.Result PersonUpdate(global::BioFaceService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result PersonUpdate(global::BioFaceService.PersonList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> PersonUpdateAsync(global::BioFaceService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> PersonUpdateAsync(global::BioFaceService.PersonList request, CallOptions options);
      global::BioFaceService.PhotoList PhotoSelect(global::BioFaceService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.PhotoList PhotoSelect(global::BioFaceService.CommandPhoto request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.PhotoList> PhotoSelectAsync(global::BioFaceService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.PhotoList> PhotoSelectAsync(global::BioFaceService.CommandPhoto request, CallOptions options);
      global::BioFaceService.Result PhotoUpdate(global::BioFaceService.PhotoList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result PhotoUpdate(global::BioFaceService.PhotoList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> PhotoUpdateAsync(global::BioFaceService.PhotoList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> PhotoUpdateAsync(global::BioFaceService.PhotoList request, CallOptions options);
      global::BioFaceService.VisitorList VisitorSelect(global::BioFaceService.CommandVisitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.VisitorList VisitorSelect(global::BioFaceService.CommandVisitor request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.VisitorList> VisitorSelectAsync(global::BioFaceService.CommandVisitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.VisitorList> VisitorSelectAsync(global::BioFaceService.CommandVisitor request, CallOptions options);
      global::BioFaceService.Result VisitorUpdate(global::BioFaceService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result VisitorUpdate(global::BioFaceService.VisitorList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> VisitorUpdateAsync(global::BioFaceService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> VisitorUpdateAsync(global::BioFaceService.VisitorList request, CallOptions options);
      global::BioFaceService.LocationList LocationSelect(global::BioFaceService.CommandLocation request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.LocationList LocationSelect(global::BioFaceService.CommandLocation request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.LocationList> LocationSelectAsync(global::BioFaceService.CommandLocation request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.LocationList> LocationSelectAsync(global::BioFaceService.CommandLocation request, CallOptions options);
      global::BioFaceService.Result LocationUpdate(global::BioFaceService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result LocationUpdate(global::BioFaceService.LocationList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> LocationUpdateAsync(global::BioFaceService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> LocationUpdateAsync(global::BioFaceService.LocationList request, CallOptions options);
      global::BioFaceService.AccessDeviceList AccessDeviceSelect(global::BioFaceService.CommandAccessDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.AccessDeviceList AccessDeviceSelect(global::BioFaceService.CommandAccessDevice request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.AccessDeviceList> AccessDeviceSelectAsync(global::BioFaceService.CommandAccessDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.AccessDeviceList> AccessDeviceSelectAsync(global::BioFaceService.CommandAccessDevice request, CallOptions options);
      global::BioFaceService.Result AccessDeviceUpdate(global::BioFaceService.AccessDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result AccessDeviceUpdate(global::BioFaceService.AccessDeviceList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> AccessDeviceUpdateAsync(global::BioFaceService.AccessDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> AccessDeviceUpdateAsync(global::BioFaceService.AccessDeviceList request, CallOptions options);
      global::BioFaceService.CaptureDeviceList CaptureDeviceSelect(global::BioFaceService.CommandCaptureDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.CaptureDeviceList CaptureDeviceSelect(global::BioFaceService.CommandCaptureDevice request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.CaptureDeviceList> CaptureDeviceSelectAsync(global::BioFaceService.CommandCaptureDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.CaptureDeviceList> CaptureDeviceSelectAsync(global::BioFaceService.CommandCaptureDevice request, CallOptions options);
      global::BioFaceService.Result CaptureDeviceUpdate(global::BioFaceService.CaptureDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result CaptureDeviceUpdate(global::BioFaceService.CaptureDeviceList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> CaptureDeviceUpdateAsync(global::BioFaceService.CaptureDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> CaptureDeviceUpdateAsync(global::BioFaceService.CaptureDeviceList request, CallOptions options);
      global::BioFaceService.CardList CardSelect(global::BioFaceService.CommandCard request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.CardList CardSelect(global::BioFaceService.CommandCard request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.CardList> CardSelectAsync(global::BioFaceService.CommandCard request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.CardList> CardSelectAsync(global::BioFaceService.CommandCard request, CallOptions options);
      global::BioFaceService.Result CardUpdate(global::BioFaceService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BioFaceService.Result CardUpdate(global::BioFaceService.CardList request, CallOptions options);
      AsyncUnaryCall<global::BioFaceService.Result> CardUpdateAsync(global::BioFaceService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BioFaceService.Result> CardUpdateAsync(global::BioFaceService.CardList request, CallOptions options);
      AsyncDuplexStreamingCall<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo> DetectFace(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncDuplexStreamingCall<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo> DetectFace(CallOptions options);
      AsyncServerStreamingCall<global::BioFaceService.EnrollmentFeedback> EnrollFace(global::BioFaceService.BioImagesList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioFaceService.EnrollmentFeedback> EnrollFace(global::BioFaceService.BioImagesList request, CallOptions options);
      AsyncServerStreamingCall<global::BioFaceService.VerificationFeedback> VerifyFace(global::BioFaceService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioFaceService.VerificationFeedback> VerifyFace(global::BioFaceService.VerificationData request, CallOptions options);
      AsyncServerStreamingCall<global::BioFaceService.IdentificationFeedback> IdentifyFace(global::BioFaceService.BioImagesList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BioFaceService.IdentificationFeedback> IdentifyFace(global::BioFaceService.BioImagesList request, CallOptions options);
    }

    // server-side interface
    public interface IBioFaceDetector
    {
      Task<global::BioFaceService.PersonList> PersonSelect(global::BioFaceService.CommandPerson request, ServerCallContext context);
      Task<global::BioFaceService.Result> PersonUpdate(global::BioFaceService.PersonList request, ServerCallContext context);
      Task<global::BioFaceService.PhotoList> PhotoSelect(global::BioFaceService.CommandPhoto request, ServerCallContext context);
      Task<global::BioFaceService.Result> PhotoUpdate(global::BioFaceService.PhotoList request, ServerCallContext context);
      Task<global::BioFaceService.VisitorList> VisitorSelect(global::BioFaceService.CommandVisitor request, ServerCallContext context);
      Task<global::BioFaceService.Result> VisitorUpdate(global::BioFaceService.VisitorList request, ServerCallContext context);
      Task<global::BioFaceService.LocationList> LocationSelect(global::BioFaceService.CommandLocation request, ServerCallContext context);
      Task<global::BioFaceService.Result> LocationUpdate(global::BioFaceService.LocationList request, ServerCallContext context);
      Task<global::BioFaceService.AccessDeviceList> AccessDeviceSelect(global::BioFaceService.CommandAccessDevice request, ServerCallContext context);
      Task<global::BioFaceService.Result> AccessDeviceUpdate(global::BioFaceService.AccessDeviceList request, ServerCallContext context);
      Task<global::BioFaceService.CaptureDeviceList> CaptureDeviceSelect(global::BioFaceService.CommandCaptureDevice request, ServerCallContext context);
      Task<global::BioFaceService.Result> CaptureDeviceUpdate(global::BioFaceService.CaptureDeviceList request, ServerCallContext context);
      Task<global::BioFaceService.CardList> CardSelect(global::BioFaceService.CommandCard request, ServerCallContext context);
      Task<global::BioFaceService.Result> CardUpdate(global::BioFaceService.CardList request, ServerCallContext context);
      Task DetectFace(IAsyncStreamReader<global::BioFaceService.BioImage> requestStream, IServerStreamWriter<global::BioFaceService.DetectedObjectsInfo> responseStream, ServerCallContext context);
      Task EnrollFace(global::BioFaceService.BioImagesList request, IServerStreamWriter<global::BioFaceService.EnrollmentFeedback> responseStream, ServerCallContext context);
      Task VerifyFace(global::BioFaceService.VerificationData request, IServerStreamWriter<global::BioFaceService.VerificationFeedback> responseStream, ServerCallContext context);
      Task IdentifyFace(global::BioFaceService.BioImagesList request, IServerStreamWriter<global::BioFaceService.IdentificationFeedback> responseStream, ServerCallContext context);
    }

    // client stub
    public class BioFaceDetectorClient : ClientBase, IBioFaceDetectorClient
    {
      public BioFaceDetectorClient(Channel channel) : base(channel)
      {
      }
      public global::BioFaceService.PersonList PersonSelect(global::BioFaceService.CommandPerson request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.PersonList PersonSelect(global::BioFaceService.CommandPerson request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.PersonList> PersonSelectAsync(global::BioFaceService.CommandPerson request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.PersonList> PersonSelectAsync(global::BioFaceService.CommandPerson request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result PersonUpdate(global::BioFaceService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result PersonUpdate(global::BioFaceService.PersonList request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> PersonUpdateAsync(global::BioFaceService.PersonList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PersonUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> PersonUpdateAsync(global::BioFaceService.PersonList request, CallOptions options)
      {
        var call = CreateCall(__Method_PersonUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.PhotoList PhotoSelect(global::BioFaceService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.PhotoList PhotoSelect(global::BioFaceService.CommandPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.PhotoList> PhotoSelectAsync(global::BioFaceService.CommandPhoto request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.PhotoList> PhotoSelectAsync(global::BioFaceService.CommandPhoto request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result PhotoUpdate(global::BioFaceService.PhotoList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result PhotoUpdate(global::BioFaceService.PhotoList request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> PhotoUpdateAsync(global::BioFaceService.PhotoList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PhotoUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> PhotoUpdateAsync(global::BioFaceService.PhotoList request, CallOptions options)
      {
        var call = CreateCall(__Method_PhotoUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.VisitorList VisitorSelect(global::BioFaceService.CommandVisitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.VisitorList VisitorSelect(global::BioFaceService.CommandVisitor request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.VisitorList> VisitorSelectAsync(global::BioFaceService.CommandVisitor request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.VisitorList> VisitorSelectAsync(global::BioFaceService.CommandVisitor request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result VisitorUpdate(global::BioFaceService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result VisitorUpdate(global::BioFaceService.VisitorList request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> VisitorUpdateAsync(global::BioFaceService.VisitorList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VisitorUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> VisitorUpdateAsync(global::BioFaceService.VisitorList request, CallOptions options)
      {
        var call = CreateCall(__Method_VisitorUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.LocationList LocationSelect(global::BioFaceService.CommandLocation request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.LocationList LocationSelect(global::BioFaceService.CommandLocation request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.LocationList> LocationSelectAsync(global::BioFaceService.CommandLocation request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.LocationList> LocationSelectAsync(global::BioFaceService.CommandLocation request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result LocationUpdate(global::BioFaceService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result LocationUpdate(global::BioFaceService.LocationList request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> LocationUpdateAsync(global::BioFaceService.LocationList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_LocationUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> LocationUpdateAsync(global::BioFaceService.LocationList request, CallOptions options)
      {
        var call = CreateCall(__Method_LocationUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.AccessDeviceList AccessDeviceSelect(global::BioFaceService.CommandAccessDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccessDeviceSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.AccessDeviceList AccessDeviceSelect(global::BioFaceService.CommandAccessDevice request, CallOptions options)
      {
        var call = CreateCall(__Method_AccessDeviceSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.AccessDeviceList> AccessDeviceSelectAsync(global::BioFaceService.CommandAccessDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccessDeviceSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.AccessDeviceList> AccessDeviceSelectAsync(global::BioFaceService.CommandAccessDevice request, CallOptions options)
      {
        var call = CreateCall(__Method_AccessDeviceSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result AccessDeviceUpdate(global::BioFaceService.AccessDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccessDeviceUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result AccessDeviceUpdate(global::BioFaceService.AccessDeviceList request, CallOptions options)
      {
        var call = CreateCall(__Method_AccessDeviceUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> AccessDeviceUpdateAsync(global::BioFaceService.AccessDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccessDeviceUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> AccessDeviceUpdateAsync(global::BioFaceService.AccessDeviceList request, CallOptions options)
      {
        var call = CreateCall(__Method_AccessDeviceUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.CaptureDeviceList CaptureDeviceSelect(global::BioFaceService.CommandCaptureDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CaptureDeviceSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.CaptureDeviceList CaptureDeviceSelect(global::BioFaceService.CommandCaptureDevice request, CallOptions options)
      {
        var call = CreateCall(__Method_CaptureDeviceSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.CaptureDeviceList> CaptureDeviceSelectAsync(global::BioFaceService.CommandCaptureDevice request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CaptureDeviceSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.CaptureDeviceList> CaptureDeviceSelectAsync(global::BioFaceService.CommandCaptureDevice request, CallOptions options)
      {
        var call = CreateCall(__Method_CaptureDeviceSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result CaptureDeviceUpdate(global::BioFaceService.CaptureDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CaptureDeviceUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result CaptureDeviceUpdate(global::BioFaceService.CaptureDeviceList request, CallOptions options)
      {
        var call = CreateCall(__Method_CaptureDeviceUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> CaptureDeviceUpdateAsync(global::BioFaceService.CaptureDeviceList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CaptureDeviceUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> CaptureDeviceUpdateAsync(global::BioFaceService.CaptureDeviceList request, CallOptions options)
      {
        var call = CreateCall(__Method_CaptureDeviceUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.CardList CardSelect(global::BioFaceService.CommandCard request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CardSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.CardList CardSelect(global::BioFaceService.CommandCard request, CallOptions options)
      {
        var call = CreateCall(__Method_CardSelect, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.CardList> CardSelectAsync(global::BioFaceService.CommandCard request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CardSelect, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.CardList> CardSelectAsync(global::BioFaceService.CommandCard request, CallOptions options)
      {
        var call = CreateCall(__Method_CardSelect, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BioFaceService.Result CardUpdate(global::BioFaceService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CardUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BioFaceService.Result CardUpdate(global::BioFaceService.CardList request, CallOptions options)
      {
        var call = CreateCall(__Method_CardUpdate, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> CardUpdateAsync(global::BioFaceService.CardList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CardUpdate, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BioFaceService.Result> CardUpdateAsync(global::BioFaceService.CardList request, CallOptions options)
      {
        var call = CreateCall(__Method_CardUpdate, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncDuplexStreamingCall<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo> DetectFace(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DetectFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncDuplexStreamingCall(call);
      }
      public AsyncDuplexStreamingCall<global::BioFaceService.BioImage, global::BioFaceService.DetectedObjectsInfo> DetectFace(CallOptions options)
      {
        var call = CreateCall(__Method_DetectFace, options);
        return Calls.AsyncDuplexStreamingCall(call);
      }
      public AsyncServerStreamingCall<global::BioFaceService.EnrollmentFeedback> EnrollFace(global::BioFaceService.BioImagesList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_EnrollFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioFaceService.EnrollmentFeedback> EnrollFace(global::BioFaceService.BioImagesList request, CallOptions options)
      {
        var call = CreateCall(__Method_EnrollFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioFaceService.VerificationFeedback> VerifyFace(global::BioFaceService.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_VerifyFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioFaceService.VerificationFeedback> VerifyFace(global::BioFaceService.VerificationData request, CallOptions options)
      {
        var call = CreateCall(__Method_VerifyFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioFaceService.IdentificationFeedback> IdentifyFace(global::BioFaceService.BioImagesList request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_IdentifyFace, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BioFaceService.IdentificationFeedback> IdentifyFace(global::BioFaceService.BioImagesList request, CallOptions options)
      {
        var call = CreateCall(__Method_IdentifyFace, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBioFaceDetector serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_PersonSelect, serviceImpl.PersonSelect)
          .AddMethod(__Method_PersonUpdate, serviceImpl.PersonUpdate)
          .AddMethod(__Method_PhotoSelect, serviceImpl.PhotoSelect)
          .AddMethod(__Method_PhotoUpdate, serviceImpl.PhotoUpdate)
          .AddMethod(__Method_VisitorSelect, serviceImpl.VisitorSelect)
          .AddMethod(__Method_VisitorUpdate, serviceImpl.VisitorUpdate)
          .AddMethod(__Method_LocationSelect, serviceImpl.LocationSelect)
          .AddMethod(__Method_LocationUpdate, serviceImpl.LocationUpdate)
          .AddMethod(__Method_AccessDeviceSelect, serviceImpl.AccessDeviceSelect)
          .AddMethod(__Method_AccessDeviceUpdate, serviceImpl.AccessDeviceUpdate)
          .AddMethod(__Method_CaptureDeviceSelect, serviceImpl.CaptureDeviceSelect)
          .AddMethod(__Method_CaptureDeviceUpdate, serviceImpl.CaptureDeviceUpdate)
          .AddMethod(__Method_CardSelect, serviceImpl.CardSelect)
          .AddMethod(__Method_CardUpdate, serviceImpl.CardUpdate)
          .AddMethod(__Method_DetectFace, serviceImpl.DetectFace)
          .AddMethod(__Method_EnrollFace, serviceImpl.EnrollFace)
          .AddMethod(__Method_VerifyFace, serviceImpl.VerifyFace)
          .AddMethod(__Method_IdentifyFace, serviceImpl.IdentifyFace).Build();
    }

    // creates a new client
    public static BioFaceDetectorClient NewClient(Channel channel)
    {
      return new BioFaceDetectorClient(channel);
    }

  }
}
#endregion
