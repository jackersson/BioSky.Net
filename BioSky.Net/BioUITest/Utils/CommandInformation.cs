// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command_information.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioUITest.Utils {

  /// <summary>Holder for reflection information generated from command_information.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CommandInformationReflection {

    #region Descriptor
    /// <summary>File descriptor for command_information.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandInformationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chljb21tYW5kX2luZm9ybWF0aW9uLnByb3RvEghTbWFydEJpbyJRChJDb21t",
            "YW5kSW5mb3JtYXRpb24SEgoKUGFja2V0U2l6ZRgBIAEoBRIUCgxQYWNrZXRM",
            "ZW5ndGgYAiABKAUSEQoJQ29tbWFuZElEGAMgASgFQhKqAg9CaW9VSVRlc3Qu",
            "VXRpbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioUITest.Utils.CommandInformation), global::BioUITest.Utils.CommandInformation.Parser, new[]{ "PacketSize", "PacketLength", "CommandID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandInformation : pb::IMessage<CommandInformation> {
    private static readonly pb::MessageParser<CommandInformation> _parser = new pb::MessageParser<CommandInformation>(() => new CommandInformation());
    public static pb::MessageParser<CommandInformation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioUITest.Utils.CommandInformationReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandInformation(CommandInformation other) : this() {
      packetSize_ = other.packetSize_;
      packetLength_ = other.packetLength_;
      commandID_ = other.commandID_;
    }

    public CommandInformation Clone() {
      return new CommandInformation(this);
    }

    /// <summary>Field number for the "PacketSize" field.</summary>
    public const int PacketSizeFieldNumber = 1;
    private int packetSize_;
    /// <summary>
    ///  Unique ID number for this person.
    /// </summary>
    public int PacketSize {
      get { return packetSize_; }
      set {
        packetSize_ = value;
      }
    }

    /// <summary>Field number for the "PacketLength" field.</summary>
    public const int PacketLengthFieldNumber = 2;
    private int packetLength_;
    /// <summary>
    ///  Unique ID number for this person. 
    /// </summary>
    public int PacketLength {
      get { return packetLength_; }
      set {
        packetLength_ = value;
      }
    }

    /// <summary>Field number for the "CommandID" field.</summary>
    public const int CommandIDFieldNumber = 3;
    private int commandID_;
    /// <summary>
    ///  Unique ID number for this person.
    /// </summary>
    public int CommandID {
      get { return commandID_; }
      set {
        commandID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandInformation);
    }

    public bool Equals(CommandInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketSize != other.PacketSize) return false;
      if (PacketLength != other.PacketLength) return false;
      if (CommandID != other.CommandID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PacketSize != 0) hash ^= PacketSize.GetHashCode();
      if (PacketLength != 0) hash ^= PacketLength.GetHashCode();
      if (CommandID != 0) hash ^= CommandID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketSize);
      }
      if (PacketLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PacketLength);
      }
      if (CommandID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CommandID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PacketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketSize);
      }
      if (PacketLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketLength);
      }
      if (CommandID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommandID);
      }
      return size;
    }

    public void MergeFrom(CommandInformation other) {
      if (other == null) {
        return;
      }
      if (other.PacketSize != 0) {
        PacketSize = other.PacketSize;
      }
      if (other.PacketLength != 0) {
        PacketLength = other.PacketLength;
      }
      if (other.CommandID != 0) {
        CommandID = other.CommandID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PacketSize = input.ReadInt32();
            break;
          }
          case 16: {
            PacketLength = input.ReadInt32();
            break;
          }
          case 24: {
            CommandID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
