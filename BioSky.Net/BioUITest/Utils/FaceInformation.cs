// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_information.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BioUITest.Utils {

  /// <summary>Holder for reflection information generated from face_information.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FaceInformationReflection {

    #region Descriptor
    /// <summary>File descriptor for face_information.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FaceInformationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZmYWNlX2luZm9ybWF0aW9uLnByb3RvEghTbWFydEJpbyJ3Cg9GYWNlSW5m",
            "b3JtYXRpb24SDAoEWFBvcxgBIAEoAhIMCgRZUG9zGAIgASgCEg0KBVdpZHRo",
            "GAMgASgCEg4KBkhlaWdodBgEIAEoAhISCgpDb25maWRlbmNlGAUgASgCEhUK",
            "DVJvdGF0aW9uQW5nbGUYBiABKAJCEqoCD0Jpb1VJVGVzdC5VdGlsc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BioUITest.Utils.FaceInformation), global::BioUITest.Utils.FaceInformation.Parser, new[]{ "XPos", "YPos", "Width", "Height", "Confidence", "RotationAngle" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FaceInformation : pb::IMessage<FaceInformation> {
    private static readonly pb::MessageParser<FaceInformation> _parser = new pb::MessageParser<FaceInformation>(() => new FaceInformation());
    public static pb::MessageParser<FaceInformation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BioUITest.Utils.FaceInformationReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FaceInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FaceInformation(FaceInformation other) : this() {
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
      width_ = other.width_;
      height_ = other.height_;
      confidence_ = other.confidence_;
      rotationAngle_ = other.rotationAngle_;
    }

    public FaceInformation Clone() {
      return new FaceInformation(this);
    }

    /// <summary>Field number for the "XPos" field.</summary>
    public const int XPosFieldNumber = 1;
    private float xPos_;
    /// <summary>
    ///  Unique ID number for this person.
    /// </summary>
    public float XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    /// <summary>Field number for the "YPos" field.</summary>
    public const int YPosFieldNumber = 2;
    private float yPos_;
    /// <summary>
    ///  Unique ID number for this person. 
    /// </summary>
    public float YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    /// <summary>
    ///  Unique ID number for this person.
    /// </summary>
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    /// <summary>
    ///  Unique ID number for this person. 
    /// </summary>
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "Confidence" field.</summary>
    public const int ConfidenceFieldNumber = 5;
    private float confidence_;
    /// <summary>
    ///  Unique ID number for this person.
    /// </summary>
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "RotationAngle" field.</summary>
    public const int RotationAngleFieldNumber = 6;
    private float rotationAngle_;
    /// <summary>
    ///  Unique ID number for this person. 
    /// </summary>
    public float RotationAngle {
      get { return rotationAngle_; }
      set {
        rotationAngle_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FaceInformation);
    }

    public bool Equals(FaceInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Confidence != other.Confidence) return false;
      if (RotationAngle != other.RotationAngle) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (XPos != 0F) hash ^= XPos.GetHashCode();
      if (YPos != 0F) hash ^= YPos.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      if (RotationAngle != 0F) hash ^= RotationAngle.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (XPos != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XPos);
      }
      if (YPos != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YPos);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Confidence);
      }
      if (RotationAngle != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotationAngle);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (XPos != 0F) {
        size += 1 + 4;
      }
      if (YPos != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (RotationAngle != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(FaceInformation other) {
      if (other == null) {
        return;
      }
      if (other.XPos != 0F) {
        XPos = other.XPos;
      }
      if (other.YPos != 0F) {
        YPos = other.YPos;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.RotationAngle != 0F) {
        RotationAngle = other.RotationAngle;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XPos = input.ReadFloat();
            break;
          }
          case 21: {
            YPos = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
          case 45: {
            Confidence = input.ReadFloat();
            break;
          }
          case 53: {
            RotationAngle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
